{"version":3,"file":"splide-renderer.min.js","sources":["../../src/js/constants/directions.ts","../../src/js/components/Direction/Direction.ts","../../src/js/constants/arrows.ts","../../src/js/constants/project.ts","../../src/js/constants/classes.ts","../../src/js/constants/defaults.ts","../../src/js/constants/i18n.ts","../../../utils/dist/splide-utils.esm.js","../../src/js/renderer/constants/classes.ts","../../src/js/renderer/constants/defaults.ts","../../src/js/renderer/Style/Style.ts","../../src/js/utils/error/assert/assert.ts","../../src/js/renderer/SplideRenderer/SplideRenderer.ts","../../src/js/constants/events.ts","../../src/js/constants/types.ts","../../src/js/components/Arrows/path.ts"],"sourcesContent":["/**\r\n * Enumerates slides from left to right.\r\n */\r\nexport const LTR = 'ltr';\r\n\r\n/**\r\n * Enumerates slides from right to left.\r\n */\r\nexport const RTL = 'rtl';\r\n\r\n/**\r\n * Enumerates slides in a col.\r\n */\r\nexport const TTB = 'ttb';\r\n","import { ARROW_DOWN, ARROW_LEFT, ARROW_RIGHT, ARROW_UP } from '../../constants/arrows';\r\nimport { RTL, TTB } from '../../constants/directions';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, ComponentConstructor, Components, Options } from '../../types';\r\n\r\n\r\n/**\r\n * The interface for the Direction component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface DirectionComponent extends BaseComponent {\r\n  resolve<R extends string>( prop: string, axisOnly?: boolean, direction?: Options['direction'] ): R;\r\n  orient( value: number ): number;\r\n}\r\n\r\n/**\r\n * The translation map for directions.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const ORIENTATION_MAP = {\r\n  width     : [ 'height' ],\r\n  left      : [ 'top', 'right' ],\r\n  right     : [ 'bottom', 'left' ],\r\n  x         : [ 'y' ],\r\n  X         : [ 'Y' ],\r\n  Y         : [ 'X' ],\r\n  ArrowLeft : [ ARROW_UP, ARROW_RIGHT ],\r\n  ArrowRight: [ ARROW_DOWN, ARROW_LEFT ],\r\n};\r\n\r\n/**\r\n * The component that absorbs the difference among directions.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Direction component object.\r\n */\r\nexport const Direction: ComponentConstructor<DirectionComponent> = ( Splide: Splide, Components: Components, options: Options ) => {\r\n  /**\r\n   * Resolves the provided property name.\r\n   *\r\n   * @param prop      - A property name to translate.\r\n   * @param axisOnly  - Optional. If `ture`, returns the same property for LTR and RTL.\r\n   * @param direction - Optional. Specify the direction. The default value is the `direction` option.\r\n   */\r\n  function resolve<R extends string>(\r\n    prop: string,\r\n    axisOnly?: boolean,\r\n    direction: Options['direction'] = options.direction\r\n  ): R {\r\n    const index = direction === RTL && ! axisOnly ? 1 : direction === TTB ? 0 : -1;\r\n\r\n    return ORIENTATION_MAP[ prop ] && ORIENTATION_MAP[ prop ][ index ]\r\n      || prop.replace( /width|left|right/i, ( match, offset ) => {\r\n        const replacement = ORIENTATION_MAP[ match.toLowerCase() ][ index ] || match;\r\n        return offset > 0 ? replacement.charAt( 0 ).toUpperCase() + replacement.slice( 1 ) : replacement;\r\n      } );\r\n  }\r\n\r\n  /**\r\n   * Orients the value towards the current direction.\r\n   *\r\n   * @param value - A value to orient.\r\n   *\r\n   * @return The oriented value.\r\n   */\r\n  function orient( value: number ): number {\r\n    return value * ( options.direction === RTL ? 1 : -1 );\r\n  }\r\n\r\n  return {\r\n    resolve,\r\n    orient,\r\n  };\r\n};\r\n","const ARROW = 'Arrow';\r\nexport const ARROW_LEFT  = `${ ARROW }Left`;\r\nexport const ARROW_RIGHT = `${ ARROW }Right`;\r\nexport const ARROW_UP    = `${ ARROW }Up`;\r\nexport const ARROW_DOWN  = `${ ARROW }Down`;","/**\r\n * The project code.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const PROJECT_CODE = 'splide';\r\n\r\n/**\r\n * The data attribute prefix.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const DATA_ATTRIBUTE = `data-${ PROJECT_CODE }`;\r\n","import { PROJECT_CODE } from './project';\r\n\r\n/**\r\n * The prefix for classes.\r\n *\r\n * @since 4.1.0\r\n */\r\nconst CLASS_PREFIX = `${ PROJECT_CODE }__`;\r\n\r\n/**\r\n * The prefix for status classes.\r\n *\r\n * @since 4.1.0\r\n */\r\nconst STATUS_CLASS_PREFIX = 'is-';\r\n\r\n/**\r\n * All classes as constants.\r\n */\r\nexport const CLASS_ROOT            = PROJECT_CODE;\r\nexport const CLASS_TRACK           = `${ CLASS_PREFIX }track`;\r\nexport const CLASS_LIST            = `${ CLASS_PREFIX }list`;\r\nexport const CLASS_SLIDE           = `${ CLASS_PREFIX }slide`;\r\nexport const CLASS_CLONE           = `${ CLASS_SLIDE }--clone`;\r\nexport const CLASS_CONTAINER       = `${ CLASS_SLIDE }__container`;\r\nexport const CLASS_ARROWS          = `${ CLASS_PREFIX }arrows`;\r\nexport const CLASS_ARROW           = `${ CLASS_PREFIX }arrow`;\r\nexport const CLASS_ARROW_PREV      = `${ CLASS_ARROW }--prev`;\r\nexport const CLASS_ARROW_NEXT      = `${ CLASS_ARROW }--next`;\r\nexport const CLASS_PAGINATION      = `${ CLASS_PREFIX }pagination`;\r\nexport const CLASS_PAGINATION_PAGE = `${ CLASS_PAGINATION }__page`;\r\nexport const CLASS_PROGRESS        = `${ CLASS_PREFIX }progress`;\r\nexport const CLASS_PROGRESS_BAR    = `${ CLASS_PROGRESS }__bar`;\r\nexport const CLASS_TOGGLE          = `${ CLASS_PREFIX }toggle`;\r\nexport const CLASS_TOGGLE_PLAY     = `${ CLASS_TOGGLE }__play`;\r\nexport const CLASS_TOGGLE_PAUSE    = `${ CLASS_TOGGLE }__pause`;\r\nexport const CLASS_SPINNER         = `${ CLASS_PREFIX }spinner`;\r\nexport const CLASS_SR              = `${ CLASS_PREFIX }sr`;\r\nexport const CLASS_INITIALIZED     = `${ STATUS_CLASS_PREFIX }initialized`;\r\nexport const CLASS_ACTIVE          = `${ STATUS_CLASS_PREFIX }active`;\r\nexport const CLASS_PREV            = `${ STATUS_CLASS_PREFIX }prev`;\r\nexport const CLASS_NEXT            = `${ STATUS_CLASS_PREFIX }next`;\r\nexport const CLASS_VISIBLE         = `${ STATUS_CLASS_PREFIX }visible`;\r\nexport const CLASS_LOADING         = `${ STATUS_CLASS_PREFIX }loading`;\r\nexport const CLASS_FOCUS_IN        = `${ STATUS_CLASS_PREFIX }focus-in`;\r\nexport const CLASS_OVERFLOW        = `${ STATUS_CLASS_PREFIX }overflow`;\r\n\r\n/**\r\n * The array with all status classes except for `is-initialized`.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const STATUS_CLASSES = [\r\n  CLASS_ACTIVE,\r\n  CLASS_VISIBLE,\r\n  CLASS_PREV,\r\n  CLASS_NEXT,\r\n  CLASS_LOADING,\r\n  CLASS_FOCUS_IN,\r\n  CLASS_OVERFLOW,\r\n];\r\n\r\n/**\r\n * The collection of classes for elements that Splide dynamically creates.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const CLASSES = {\r\n  slide     : CLASS_SLIDE,\r\n  clone     : CLASS_CLONE,\r\n  arrows    : CLASS_ARROWS,\r\n  arrow     : CLASS_ARROW,\r\n  prev      : CLASS_ARROW_PREV,\r\n  next      : CLASS_ARROW_NEXT,\r\n  pagination: CLASS_PAGINATION,\r\n  page      : CLASS_PAGINATION_PAGE,\r\n  spinner   : CLASS_SPINNER,\r\n};\r\n","import { Options } from '../types';\r\nimport { CLASSES } from './classes';\r\nimport { I18N } from './i18n';\r\n\r\n\r\n/**\r\n * The collection of default options.\r\n * Note that this collection does not contain all options.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const DEFAULTS: Options = {\r\n  type          : 'slide',\r\n  speed         : 400,\r\n  perPage       : 1,\r\n  easing        : 'cubic-bezier(0.25, 1, 0.5, 1)',\r\n  drag          : true,\r\n  direction     : 'ltr',\r\n  trimSpace     : true,\r\n  focusableNodes: 'a, button, textarea, input, select, iframe',\r\n  classes       : CLASSES,\r\n  i18n          : I18N,\r\n  reducedMotion: {\r\n    speed      : 0,\r\n    rewindSpeed: 0,\r\n    autoplay   : 'pause',\r\n  },\r\n};","/**\r\n * The collection of i18n strings.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const I18N = {\r\n  prev      : 'Previous slide',\r\n  next      : 'Next slide',\r\n  first     : 'Go to first slide',\r\n  last      : 'Go to last slide',\r\n  slideX    : 'Go to slide %s',\r\n  pageX     : 'Go to page %s',\r\n  play      : 'Start autoplay',\r\n  pause     : 'Pause autoplay',\r\n  carousel  : 'carousel',\r\n  slide     : 'slide',\r\n  select    : 'Select a slide to show',\r\n  slideLabel: '%s of %s', // [ slide number ] / [ slide size ]\r\n};\r\n","function empty(array) {\n  array.length = 0;\n}\nfunction apply(func, ...args) {\n  return func.bind(null, ...args);\n}\nconst nextTick = setTimeout;\nconst noop = () => {\n};\nfunction raf(func) {\n  return requestAnimationFrame(func);\n}\nfunction typeOf(type, subject) {\n  return typeof subject === type;\n}\nfunction isObject(subject) {\n  return !isNull(subject) && typeOf(\"object\", subject);\n}\nconst isArray = Array.isArray;\nconst isFunction = apply(typeOf, \"function\");\nconst isString = apply(typeOf, \"string\");\nconst isBoolean = apply(typeOf, \"boolean\");\nconst isUndefined = apply(typeOf, \"undefined\");\nfunction isNull(subject) {\n  return subject === null;\n}\nfunction isHTMLElement(subject) {\n  try {\n    return subject instanceof (subject.ownerDocument.defaultView || window).HTMLElement;\n  } catch (e) {\n    return false;\n  }\n}\nfunction toArray(value) {\n  return isArray(value) ? value : [value];\n}\nfunction forEach(values, iteratee) {\n  toArray(values).forEach(iteratee);\n}\nfunction push(array, items) {\n  array.push(...toArray(items));\n  return array;\n}\nconst arrayProto = Array.prototype;\nfunction slice(arrayLike, start, end) {\n  return arrayProto.slice.call(arrayLike, start, end);\n}\nfunction includes(arrayLike, value) {\n  return arrayProto.includes.call(arrayLike, value);\n}\nfunction find(arrayLike, predicate) {\n  return arrayProto.find.call(arrayLike, predicate);\n}\nfunction toggleClass(elm, classes, force) {\n  if (elm) {\n    forEach(isString(classes) ? classes.split(\" \") : classes, (className) => {\n      className && elm.classList.toggle(className, force);\n    });\n  }\n}\nfunction addClass(elm, classes) {\n  toggleClass(elm, classes, true);\n}\nfunction append(parent, ...children2) {\n  parent && parent.append(...children2);\n}\nfunction before(ref, ...nodes) {\n  ref && ref.before(...nodes);\n}\nfunction matches(elm, selector) {\n  return isHTMLElement(elm) && elm.matches(selector);\n}\nfunction children(parent, selector) {\n  const children2 = parent ? slice(parent.children) : [];\n  return selector ? children2.filter((child2) => matches(child2, selector)) : children2;\n}\nfunction child(parent, selector) {\n  return selector ? children(parent, selector)[0] : parent.firstElementChild;\n}\nfunction closest(from, selector) {\n  return from.closest(selector);\n}\nconst assign = Object.assign;\nconst ownKeys = Object.keys;\nfunction forOwn(object, iteratee, right) {\n  if (object) {\n    (right ? ownKeys(object).reverse() : ownKeys(object)).forEach((key) => {\n      key !== \"__proto__\" && iteratee(object[key], key);\n    });\n  }\n  return object;\n}\nfunction merge(object, ...sources) {\n  sources.forEach((source) => {\n    forOwn(source, (value, key) => {\n      if (isArray(value)) {\n        value = value.slice();\n      } else if (isObject(value)) {\n        value = merge({}, isObject(object[key]) ? object[key] : {}, value);\n      }\n      object[key] = value;\n    });\n  });\n  return object;\n}\nfunction omit(object, keys) {\n  forEach(keys || ownKeys(object), (key) => {\n    delete object[key];\n  });\n  return object;\n}\nfunction removeAttribute(elms, attrs) {\n  forEach(elms, (elm) => {\n    forEach(attrs, (attr) => {\n      elm && elm.removeAttribute(attr);\n    });\n  });\n}\nfunction setAttribute(elms, attrs, value) {\n  if (isObject(attrs)) {\n    forOwn(attrs, (value2, name) => {\n      setAttribute(elms, name, value2);\n    });\n  } else {\n    forEach(elms, (elm) => {\n      isNull(value) || value === \"\" ? removeAttribute(elm, attrs) : elm.setAttribute(attrs, String(value));\n    });\n  }\n}\nfunction create(tag2, attrs, parent) {\n  const elm = document.createElement(tag2);\n  if (attrs) {\n    isString(attrs) ? addClass(elm, attrs) : setAttribute(elm, attrs);\n  }\n  parent && append(parent, elm);\n  return elm;\n}\nfunction style(elm, prop, value) {\n  if (isUndefined(value)) {\n    return getComputedStyle(elm)[prop];\n  }\n  if (!isNull(value)) {\n    elm.style[prop] = `${value}`;\n  }\n}\nfunction display(elm, display2) {\n  style(elm, \"display\", display2);\n}\nfunction focus(elm) {\n  isHTMLElement(elm) && elm.focus({ preventScroll: true });\n}\nfunction getAttribute(elm, attr) {\n  return elm.getAttribute(attr);\n}\nfunction hasClass(elm, className) {\n  return !!elm && elm.classList.contains(className);\n}\nfunction rect(target) {\n  return target.getBoundingClientRect();\n}\nfunction removeNode(nodes) {\n  forEach(nodes, (node) => {\n    if (node && node.parentNode) {\n      node.parentNode.removeChild(node);\n    }\n  });\n}\nfunction measure(parent, value) {\n  if (isString(value)) {\n    const div2 = create(\"div\", { style: `width: ${value}; position: absolute;` }, parent);\n    value = rect(div2).width;\n    removeNode(div2);\n  }\n  return value;\n}\nfunction parseHtml(html) {\n  return child(new DOMParser().parseFromString(html, \"text/html\").body);\n}\nfunction prevent(e, stopPropagation) {\n  e.preventDefault();\n  if (stopPropagation) {\n    e.stopPropagation();\n    e.stopImmediatePropagation();\n  }\n}\nfunction query(parent, selector) {\n  return parent && parent.querySelector(selector);\n}\nfunction queryAll(parent, selector) {\n  return selector && parent ? slice(parent.querySelectorAll(selector)) : [];\n}\nfunction removeClass(elm, classes) {\n  toggleClass(elm, classes, false);\n}\nfunction timeOf(e) {\n  return e.timeStamp;\n}\nfunction unit(value) {\n  return isString(value) ? value : value ? `${value}px` : \"\";\n}\nfunction buildAttrs(attrs) {\n  let result = \"\";\n  forOwn(attrs, (value, key) => {\n    result += value || value === 0 ? ` ${key}${value !== true ? `=\"${value}\"` : \"\"}` : \"\";\n  });\n  return result.trim();\n}\nfunction classNames(...args) {\n  return args.reduce((classes, value) => {\n    return `${classes} ${isArray(value) ? classNames(...value) : value || \"\"}`.trim();\n  }, \"\");\n}\nfunction tag(tag2, attrs) {\n  attrs = isArray(attrs) || !isObject(attrs) ? { class: classNames(attrs) } : attrs;\n  return `<${`${tag2} ${attrs ? buildAttrs(attrs) : \"\"}`.trim()}>`;\n}\nfunction div(attrs) {\n  return tag(\"div\", attrs);\n}\nconst { min, max, floor, ceil, abs, sign } = Math;\nfunction approximatelyEqual(x, y, epsilon) {\n  return abs(x - y) < epsilon;\n}\nfunction between(number, x, y, exclusive) {\n  const minimum = min(x, y);\n  const maximum = max(x, y);\n  return exclusive ? minimum < number && number < maximum : minimum <= number && number <= maximum;\n}\nfunction clamp(number, x, y) {\n  const minimum = min(x, y);\n  const maximum = max(x, y);\n  return min(max(minimum, number), maximum);\n}\nfunction camelToKebab(string) {\n  return string.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\nfunction format(string, replacements) {\n  forEach(replacements, (replacement) => {\n    string = string.replace(\"%s\", `${replacement}`);\n  });\n  return string;\n}\nfunction pad(number, length = 2) {\n  return `${number}`.padStart(length, \"0\");\n}\nconst ids = {};\nfunction uniqueId(prefix) {\n  return `${prefix}${pad(ids[prefix] = (ids[prefix] || 0) + 1)}`;\n}\nfunction forEachEvent(events, iteratee) {\n  forEach(events, (event) => {\n    isString(event) && event.split(\" \").forEach(iteratee);\n  });\n}\nfunction arrayRemove(array, predicate) {\n  const removed = [];\n  for (let i = array.length - 1; i >= 0; i--) {\n    if (predicate(array[i])) {\n      removed.push(...array.splice(i, 1));\n    }\n  }\n  return removed;\n}\nfunction EventBinder(removersRef) {\n  const removers = removersRef || [];\n  const key = removersRef ? {} : void 0;\n  function bind(target, events, callback, options) {\n    forEachEvent(events, (event) => {\n      target.addEventListener(event, callback, options);\n      removers.push([target.removeEventListener.bind(target, event, callback, options), key]);\n    });\n  }\n  function destroy() {\n    if (key) {\n      arrayRemove(removers, (remover) => remover[1] === key).forEach((remover) => {\n        remover[0]();\n      });\n    } else {\n      removers.forEach((remover) => {\n        remover[0]();\n      });\n      empty(removers);\n    }\n  }\n  return {\n    bind,\n    create: apply(EventBinder, removers),\n    destroy\n  };\n}\nfunction EventBus(listenersRef) {\n  const listeners = listenersRef || [];\n  const key = listenersRef ? {} : void 0;\n  function on(events, callback) {\n    forEachEvent(events, (event) => {\n      listeners.push([event, callback, key]);\n    });\n  }\n  function off(events, callback) {\n    forEachEvent(events, (event) => {\n      arrayRemove(listeners, (listener) => {\n        return listener[0] === event && (!callback || listener[1] === callback) && listener[2] === key;\n      });\n    });\n  }\n  function emit(event, ...args) {\n    listeners.slice().forEach((listener) => {\n      listener[0] === event && listener[1](...args);\n    });\n  }\n  function destroy() {\n    if (key) {\n      arrayRemove(listeners, (listener) => listener[2] === key);\n    } else {\n      empty(listeners);\n    }\n  }\n  return {\n    on,\n    off,\n    emit,\n    create: apply(EventBus, listeners),\n    destroy\n  };\n}\nfunction EventInterface(binder = EventBinder(), bus = EventBus()) {\n  function create2() {\n    return EventInterface(binder.create(), bus.create());\n  }\n  function destroy() {\n    binder.destroy();\n    bus.destroy();\n  }\n  return assign({}, binder, bus, { create: create2, destroy });\n}\nfunction RequestInterval(interval, onInterval, onUpdate, limit) {\n  const { now } = Date;\n  let startTime;\n  let rate = 0;\n  let id;\n  let paused = true;\n  let count = 0;\n  function update() {\n    if (!paused) {\n      rate = interval ? min((now() - startTime) / interval, 1) : 1;\n      onUpdate && onUpdate(rate);\n      if (rate >= 1) {\n        onInterval();\n        startTime = now();\n        if (limit && ++count >= limit) {\n          return pause();\n        }\n      }\n      id = raf(update);\n    }\n  }\n  function start(resume) {\n    resume || cancel();\n    startTime = now() - (resume ? rate * interval : 0);\n    paused = false;\n    id = raf(update);\n  }\n  function pause() {\n    paused = true;\n  }\n  function rewind() {\n    startTime = now();\n    rate = 0;\n    if (onUpdate) {\n      onUpdate(rate);\n    }\n  }\n  function cancel() {\n    id && cancelAnimationFrame(id);\n    rate = 0;\n    id = 0;\n    paused = true;\n  }\n  function set(time) {\n    interval = time;\n  }\n  function isPaused() {\n    return paused;\n  }\n  return {\n    start,\n    rewind,\n    pause,\n    cancel,\n    set,\n    isPaused\n  };\n}\nfunction State(initialState) {\n  let state = initialState;\n  function set(value) {\n    state = value;\n  }\n  function is(states) {\n    return includes(toArray(states), state);\n  }\n  return { set, is };\n}\nfunction Throttle(func, duration) {\n  const interval = RequestInterval(duration || 0, func, void 0, 1);\n  return () => {\n    interval.isPaused() && interval.start();\n  };\n}\nexport {\n  EventBinder,\n  EventBus,\n  EventInterface,\n  RequestInterval,\n  State,\n  Throttle,\n  abs,\n  addClass,\n  append,\n  apply,\n  approximatelyEqual,\n  assign,\n  before,\n  between,\n  buildAttrs,\n  camelToKebab,\n  ceil,\n  child,\n  children,\n  clamp,\n  classNames,\n  closest,\n  create,\n  display,\n  div,\n  empty,\n  find,\n  floor,\n  focus,\n  forEach,\n  forOwn,\n  format,\n  getAttribute,\n  hasClass,\n  includes,\n  isArray,\n  isBoolean,\n  isFunction,\n  isHTMLElement,\n  isNull,\n  isObject,\n  isString,\n  isUndefined,\n  matches,\n  max,\n  measure,\n  merge,\n  min,\n  nextTick,\n  noop,\n  omit,\n  ownKeys,\n  pad,\n  parseHtml,\n  prevent,\n  push,\n  query,\n  queryAll,\n  raf,\n  rect,\n  removeAttribute,\n  removeClass,\n  removeNode,\n  setAttribute,\n  sign,\n  slice,\n  style,\n  tag,\n  timeOf,\n  toArray,\n  toggleClass,\n  uniqueId,\n  unit\n};\n","export const CLASS_RENDERED = 'is-rendered';\r\n","import { RendererConfig } from '../types/types';\r\n\r\n\r\n/**\r\n * Default options for generating static HTML.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const RENDERER_DEFAULT_CONFIG: RendererConfig = {\r\n  listTag : 'ul',\r\n  slideTag: 'li',\r\n};\r\n","import { Options } from '../../types';\r\nimport { forOwn } from '@splidejs/utils';\r\n\r\n\r\ninterface Styles {\r\n  [ breakpoint: string ]: {\r\n    [ selector: string ]: Record<string, string | number>\r\n  };\r\n}\r\n\r\n/**\r\n * The class for generating styles as a string.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport class Style {\r\n  /**\r\n   * The collection of registered styles categorized by each breakpoint.\r\n   */\r\n  private readonly styles: Styles = {};\r\n\r\n  /**\r\n   * The ID of the slider.\r\n   */\r\n  private readonly id: string;\r\n\r\n  /**\r\n   * Holds options.\r\n   */\r\n  private readonly options: Options;\r\n\r\n  /**\r\n   * The Style constructor.\r\n   *\r\n   * @param id      - A slider ID.\r\n   * @param options - Options.\r\n   */\r\n  constructor( id: string, options: Options ) {\r\n    this.id      = id;\r\n    this.options = options;\r\n  }\r\n\r\n  /**\r\n   * Registers a CSS rule.\r\n   *\r\n   * @param selector - A selector.\r\n   * @param prop\r\n   * @param value\r\n   * @param breakpoint\r\n   */\r\n  rule( selector: string, prop: string, value: string | number, breakpoint?: string ): void {\r\n    breakpoint = breakpoint || 'default';\r\n    const selectors = ( this.styles[ breakpoint ] = this.styles[ breakpoint ] || {} );\r\n    const styles    = ( selectors[ selector ] = selectors[ selector ] || {} );\r\n    styles[ prop ] = value;\r\n  }\r\n\r\n  /**\r\n   * Builds styles as a single string.\r\n   *\r\n   * @return Built styles.\r\n   */\r\n  build(): string {\r\n    let css = '';\r\n\r\n    if ( this.styles.default ) {\r\n      css += this.buildSelectors( this.styles.default );\r\n    }\r\n\r\n    Object.keys( this.styles )\r\n      .sort( ( n, m ) => this.options.mediaQuery === 'min' ? +n - +m : +m - +n )\r\n      .forEach( breakpoint => {\r\n        if ( breakpoint !== 'default' ) {\r\n          css += `@media screen and (max-width: ${ breakpoint }px) {`;\r\n          css += this.buildSelectors( this.styles[ breakpoint ] );\r\n          css += `}`;\r\n        }\r\n      } );\r\n\r\n    return css;\r\n  }\r\n\r\n  /**\r\n   * Builds styles for each breakpoint.\r\n   *\r\n   * @param selectors - An object with styles.\r\n   *\r\n   * @return Built styles.\r\n   */\r\n  private buildSelectors( selectors: Record<string, Record<string, string | number>> ): string {\r\n    let css = '';\r\n\r\n    forOwn( selectors, ( styles, selector ) => {\r\n      css += `${ `#${ this.id } ${ selector }`.trim() } {`;\r\n\r\n      forOwn( styles, ( value, prop ) => {\r\n        if ( value || value === 0 ) {\r\n          css += `${ prop }: ${ value };`;\r\n        }\r\n      } );\r\n\r\n      css += '}';\r\n    } );\r\n\r\n    return css;\r\n  }\r\n}\r\n","import { PROJECT_CODE } from '../../../constants/project';\r\n\r\n\r\n/**\r\n * Throws an error if the provided condition is falsy.\r\n *\r\n * @param condition - If falsy, an error is thrown.\r\n * @param message   - Optional. A message to display.\r\n */\r\nexport function assert( condition: any, message?: string ): void {\r\n  if ( ! condition ) {\r\n    throw new Error( `[${ PROJECT_CODE }] ${ message || '' }` );\r\n  }\r\n}\r\n","import { PATH, SIZE, XML_NAME_SPACE } from '../../components/Arrows/path';\r\nimport { Direction, DirectionComponent } from '../../components/Direction/Direction';\r\nimport { CLASS_ACTIVE, CLASS_CLONE, CLASS_LIST, CLASS_ROOT, CLASS_SLIDE, CLASS_TRACK } from '../../constants/classes';\r\nimport { DEFAULTS } from '../../constants/defaults';\r\nimport { TTB } from '../../constants/directions';\r\nimport { EVENT_MOUNTED } from '../../constants/events';\r\nimport { LOOP, SLIDE } from '../../constants/types';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { Options } from '../../types';\r\nimport {\r\n  assign,\r\n  camelToKebab,\r\n  child,\r\n  forOwn,\r\n  isObject,\r\n  isString,\r\n  max,\r\n  merge,\r\n  push,\r\n  queryAll,\r\n  removeNode,\r\n  uniqueId,\r\n  unit,\r\n} from '@splidejs/utils';\r\nimport { CLASS_RENDERED } from '../constants/classes';\r\nimport { RENDERER_DEFAULT_CONFIG } from '../constants/defaults';\r\nimport { Style } from '../Style/Style';\r\nimport { RendererConfig, SlideContent } from '../types/types';\r\nimport { assert } from '../../utils';\r\n\r\n\r\n/**\r\n * The class to generate static HTML of the slider for the first view.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport class SplideRenderer {\r\n  /**\r\n   * Removes a style element and clones.\r\n   *\r\n   * @param splide - A Splide instance.\r\n   */\r\n  static clean( splide: Splide ): void {\r\n    const { on } = splide.event;\r\n    const { root } = splide;\r\n    const clones = queryAll( root, `.${ CLASS_CLONE }` );\r\n\r\n    on( EVENT_MOUNTED, () => {\r\n      removeNode( child( root, 'style' ) );\r\n    } );\r\n\r\n    removeNode( clones );\r\n  }\r\n\r\n  /**\r\n   * Holds slide contents.\r\n   */\r\n  private readonly contents: string[] | SlideContent[];\r\n\r\n  /**\r\n   * Stores data of slides.\r\n   */\r\n  private readonly slides: SlideContent[] = [];\r\n\r\n  /**\r\n   * The Direction component.\r\n   */\r\n  private readonly Direction: DirectionComponent;\r\n\r\n  /**\r\n   * Holds the Style instance.\r\n   */\r\n  private readonly Style: Style;\r\n\r\n  /**\r\n   * Holds options.\r\n   */\r\n  private readonly options: Options = {};\r\n\r\n  /**\r\n   * Holds options for this instance.\r\n   */\r\n  private readonly config: RendererConfig;\r\n\r\n  /**\r\n   * The slider ID.\r\n   */\r\n  private readonly id: string;\r\n\r\n  /**\r\n   * An array with options for each breakpoint.\r\n   */\r\n  private readonly breakpoints: [ string, Options ][] = [];\r\n\r\n  /**\r\n   * The SplideRenderer constructor.\r\n   *\r\n   * @param contents - An array with slide contents. Each item must be an HTML or a plain text.\r\n   * @param options  - Optional. Slider options.\r\n   * @param config   - Static default options.\r\n   * @param defaults - Default options for the slider. Pass `Splide.defaults` if you are using it.\r\n   */\r\n  constructor( contents: string[] | SlideContent[], options?: Options, config?: RendererConfig, defaults?: Options ) {\r\n    merge( DEFAULTS, defaults || {} );\r\n    merge( merge( this.options, DEFAULTS ), options || {} );\r\n\r\n    this.contents  = contents;\r\n    this.config    = assign( {}, RENDERER_DEFAULT_CONFIG, config || {} );\r\n    this.id        = this.config.id || uniqueId( 'splide' );\r\n    this.Style     = new Style( this.id, this.options );\r\n    this.Direction = Direction( null, null, this.options, undefined );\r\n\r\n    assert( this.contents.length, 'Provide at least 1 content.' );\r\n\r\n    this.init();\r\n  }\r\n\r\n  /**\r\n   * Initializes the instance.\r\n   */\r\n  private init(): void {\r\n    this.parseBreakpoints();\r\n    this.initSlides();\r\n    this.registerRootStyles();\r\n    this.registerTrackStyles();\r\n    this.registerSlideStyles();\r\n    this.registerListStyles();\r\n  }\r\n\r\n  /**\r\n   * Initializes slides.\r\n   */\r\n  private initSlides(): void {\r\n    push( this.slides, this.contents.map( ( content, index ) => {\r\n      content = isString( content ) ? { html: content } : content;\r\n      content.styles = content.styles || {};\r\n      content.attrs  = content.attrs || {};\r\n\r\n      this.cover( content );\r\n\r\n      const classes = `${ this.options.classes.slide } ${ index === 0 ? CLASS_ACTIVE : '' }`;\r\n\r\n      assign( content.attrs, {\r\n        class: `${ classes } ${ content.attrs.class || '' }`.trim(),\r\n        style: this.buildStyles( content.styles ),\r\n      } );\r\n\r\n      return content;\r\n    } ) );\r\n\r\n    if ( this.isLoop() ) {\r\n      this.generateClones( this.slides );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registers styles for the root element.\r\n   */\r\n  private registerRootStyles(): void {\r\n    this.breakpoints.forEach( ( [ width, options ] ) => {\r\n      this.Style.rule( ' ', 'max-width', unit( options.width ), width );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Registers styles for the track element.\r\n   */\r\n  private registerTrackStyles(): void {\r\n    const { Style } = this;\r\n    const selector = `.${ CLASS_TRACK }`;\r\n\r\n    this.breakpoints.forEach( ( [ width, options ] ) => {\r\n      Style.rule( selector, this.resolve( 'paddingLeft' ), this.cssPadding( options, false ), width );\r\n      Style.rule( selector, this.resolve( 'paddingRight' ), this.cssPadding( options, true ), width );\r\n      Style.rule( selector, 'height', this.cssTrackHeight( options ), width );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Registers styles for the list element.\r\n   */\r\n  private registerListStyles(): void {\r\n    const { Style } = this;\r\n    const selector = `.${ CLASS_LIST }`;\r\n\r\n    this.breakpoints.forEach( ( [ width, options ] ) => {\r\n      Style.rule( selector, 'transform', this.buildTranslate( options ), width );\r\n\r\n      if ( ! this.cssSlideHeight( options ) ) {\r\n        Style.rule( selector, 'aspect-ratio', this.cssAspectRatio( options ), width );\r\n      }\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Registers styles for slides and clones.\r\n   */\r\n  private registerSlideStyles(): void {\r\n    const { Style } = this;\r\n    const selector = `.${ CLASS_SLIDE }`;\r\n\r\n    this.breakpoints.forEach( ( [ width, options ] ) => {\r\n      Style.rule( selector, 'width', this.cssSlideWidth( options ), width );\r\n      Style.rule( selector, 'height', this.cssSlideHeight( options ) || '100%', width );\r\n      Style.rule( selector, this.resolve( 'marginRight' ), unit( options.gap ) || '0px', width );\r\n      Style.rule( `${ selector } > img`, 'display', options.cover ? 'none' : 'inline', width );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Builds multiple `translateX` for the list element.\r\n   *\r\n   * @param options - Options for each breakpoint.\r\n   *\r\n   * @return A string with multiple translate functions.\r\n   */\r\n  private buildTranslate( options: Options ): string {\r\n    const { resolve, orient } = this.Direction;\r\n    const values = [];\r\n\r\n    values.push( this.cssOffsetClones( options ) );\r\n    values.push( this.cssOffsetGaps( options ) );\r\n\r\n    if ( this.isCenter( options ) ) {\r\n      values.push( this.buildCssValue( orient( -50 ), '%' ) );\r\n      values.push( ...this.cssOffsetCenter( options ) );\r\n    }\r\n\r\n    return values\r\n      .filter( Boolean )\r\n      .map( value => `translate${ resolve( 'X' ) }(${ value })` )\r\n      .join( ' ' );\r\n  }\r\n\r\n  /**\r\n   * Returns offset for the list element.\r\n   * This does not include gaps because it can not be converted into percent.\r\n   *\r\n   * @param options - Options for each breakpoint.\r\n   *\r\n   * @return The offset.\r\n   */\r\n  private cssOffsetClones( options: Options ): string {\r\n    const { resolve, orient } = this.Direction;\r\n    const cloneCount = this.getCloneCount();\r\n\r\n    if ( this.isFixedWidth( options ) ) {\r\n      const { value, unit } = this.parseCssValue( options[ resolve( 'fixedWidth' ) ] );\r\n      return this.buildCssValue( orient( value ) * cloneCount, unit );\r\n    }\r\n\r\n    const percent = 100 * cloneCount / options.perPage;\r\n    return `${ orient( percent ) }%`;\r\n  }\r\n\r\n  /**\r\n   * Returns offset for centering the active slide.\r\n   *\r\n   * Note:\r\n   * ( 100% + gap ) / perPage - gap\r\n   * 100% / perPage + gap / perPage - gap;\r\n   * 50% / perPage + ( gap / perPage - gap ) / 2;\r\n   *\r\n   * @param options - Options for each breakpoint.\r\n   *\r\n   * @return The offset.\r\n   */\r\n  private cssOffsetCenter( options: Options ): string[] {\r\n    const { resolve, orient } = this.Direction;\r\n\r\n    if ( this.isFixedWidth( options ) ) {\r\n      const { value, unit } = this.parseCssValue( options[ resolve( 'fixedWidth' ) ] );\r\n      return [ this.buildCssValue( orient( value / 2 ), unit ) ];\r\n    }\r\n\r\n    const values = [];\r\n    const { perPage, gap } = options;\r\n\r\n    values.push( `${ orient( 50 / perPage ) }%` );\r\n\r\n    if ( gap ) {\r\n      const { value, unit } = this.parseCssValue( gap );\r\n      const gapOffset = ( value / perPage - value ) / 2;\r\n      values.push( this.buildCssValue( orient( gapOffset ), unit ) );\r\n    }\r\n\r\n    return values;\r\n  }\r\n\r\n  /**\r\n   * Returns offset for gaps.\r\n   *\r\n   * @param options - Options for each breakpoint.\r\n   *\r\n   * @return The offset as `calc()`.\r\n   */\r\n  private cssOffsetGaps( options: Options ): string {\r\n    const cloneCount = this.getCloneCount();\r\n\r\n    if ( cloneCount && options.gap ) {\r\n      const { orient } = this.Direction;\r\n      const { value, unit } = this.parseCssValue( options.gap );\r\n\r\n      if ( this.isFixedWidth( options ) ) {\r\n        return this.buildCssValue( orient( value * cloneCount ), unit );\r\n      }\r\n\r\n      const { perPage } = options;\r\n      const gaps = cloneCount / perPage;\r\n      return this.buildCssValue( orient( gaps * value ), unit );\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  /**\r\n   * Resolves the prop for the current direction and converts it into the Kebab case.\r\n   *\r\n   * @param prop - A property name to resolve.\r\n   *\r\n   * @return A resolved property name in the Kebab case.\r\n   */\r\n  private resolve( prop: string ): string {\r\n    return camelToKebab( this.Direction.resolve( prop ) );\r\n  }\r\n\r\n  /**\r\n   * Returns padding in the CSS format.\r\n   *\r\n   * @param options - Options.\r\n   * @param right   - Determines whether to get padding right or left.\r\n   *\r\n   * @return Padding in the CSS format.\r\n   */\r\n  private cssPadding( options: Options, right: boolean ): string {\r\n    const { padding } = options;\r\n    const prop = this.Direction.resolve( right ? 'right' : 'left', true );\r\n    return padding && unit( padding[ prop ] || ( isObject( padding ) ? 0 : padding ) ) || '0px';\r\n  }\r\n\r\n  /**\r\n   * Returns height of the track element in the CSS format.\r\n   *\r\n   * @param options - Options.\r\n   *\r\n   * @return Height in the CSS format.\r\n   */\r\n  private cssTrackHeight( options: Options ): string {\r\n    let height = '';\r\n\r\n    if ( this.isVertical() ) {\r\n      height = this.cssHeight( options );\r\n      assert( height, '\"height\" is missing.' );\r\n      height = `calc(${ height } - ${ this.cssPadding( options, false ) } - ${ this.cssPadding( options, true ) })`;\r\n    }\r\n\r\n    return height;\r\n  }\r\n\r\n  /**\r\n   * Returns height provided though options in the CSS format.\r\n   *\r\n   * @param options - Options.\r\n   *\r\n   * @return Height in the CSS format.\r\n   */\r\n  private cssHeight( options: Options ): string {\r\n    return unit( options.height );\r\n  }\r\n\r\n  /**\r\n   * Returns width of each slide in the CSS format.\r\n   *\r\n   * @param options - Options.\r\n   *\r\n   * @return Width in the CSS format.\r\n   */\r\n  private cssSlideWidth( options: Options ): string {\r\n    return options.autoWidth\r\n      ? ''\r\n      : unit( options.fixedWidth ) || ( this.isVertical() ? '' : this.cssSlideSize( options ) );\r\n  }\r\n\r\n  /**\r\n   * Returns height of each slide in the CSS format.\r\n   *\r\n   * @param options - Options.\r\n   *\r\n   * @return Height in the CSS format.\r\n   */\r\n  private cssSlideHeight( options: Options ): string {\r\n    return unit( options.fixedHeight )\r\n      || ( this.isVertical()\r\n        ? ( options.autoHeight ? '' : this.cssSlideSize( options ) )\r\n        : this.cssHeight( options )\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Returns width or height of each slide in the CSS format, considering the current direction.\r\n   *\r\n   * @param options - Options.\r\n   *\r\n   * @return Width or height in the CSS format.\r\n   */\r\n  private cssSlideSize( options: Options ): string {\r\n    const gap = unit( options.gap );\r\n    return `calc((100%${ gap && ` + ${ gap }` })/${ options.perPage || 1 }${ gap && ` - ${ gap }` })`;\r\n  }\r\n\r\n  /**\r\n   * Returns the aspectRatio value to simulate the `heightRatio` option.\r\n   *\r\n   * @param options - Options.\r\n   *\r\n   * @return aspectRatio in the CSS format.\r\n   */\r\n  private cssAspectRatio( options: Options ): string {\r\n    const { heightRatio } = options;\r\n    return heightRatio ? `${ 1 / heightRatio }` : '';\r\n  }\r\n\r\n  /**\r\n   * Builds the css value by the provided value and unit.\r\n   *\r\n   * @param value - A value.\r\n   * @param unit  - A CSS unit.\r\n   *\r\n   * @return A built value for a CSS value.\r\n   */\r\n  private buildCssValue( value: number, unit: string ): string {\r\n    return `${ value }${ unit }`;\r\n  }\r\n\r\n  /**\r\n   * Parses the CSS value into number and unit.\r\n   *\r\n   * @param value - A value to parse.\r\n   *\r\n   * @return An object with value and unit.\r\n   */\r\n  private parseCssValue( value: string | number ): { value: number, unit: string } {\r\n    if ( isString( value ) ) {\r\n      const number = parseFloat( value ) || 0;\r\n      const unit   = value.replace( /\\d*(\\.\\d*)?/, '' ) || 'px';\r\n      return { value: number, unit };\r\n    }\r\n\r\n    return { value, unit: 'px' };\r\n  }\r\n\r\n  /**\r\n   * Parses breakpoints and generate options for each breakpoint.\r\n   */\r\n  private parseBreakpoints(): void {\r\n    const { breakpoints } = this.options;\r\n\r\n    this.breakpoints.push( [ 'default', this.options ] );\r\n\r\n    if ( breakpoints ) {\r\n      forOwn( breakpoints, ( options, width ) => {\r\n        this.breakpoints.push( [ width, merge( merge( {}, this.options ), options ) ] );\r\n      } );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if the slide width is fixed or not.\r\n   *\r\n   * @return `true` if the slide width is fixed, or otherwise `false`.\r\n   */\r\n  private isFixedWidth( options: Options ): boolean {\r\n    return !! options[ this.Direction.resolve( 'fixedWidth' ) ];\r\n  }\r\n\r\n  /**\r\n   * Checks if the slider type is loop or not.\r\n   *\r\n   * @return `true` if the slider type is loop, or otherwise `false`.\r\n   */\r\n  private isLoop(): boolean {\r\n    return this.options.type === LOOP;\r\n  }\r\n\r\n  /**\r\n   * Checks if the active slide should be centered or not.\r\n   *\r\n   * @return `true` if the slide should be centered, or otherwise `false`.\r\n   */\r\n  private isCenter( options: Options ): boolean {\r\n    if( options.focus === 'center' ) {\r\n      if ( this.isLoop() ) {\r\n        return true;\r\n      }\r\n\r\n      if ( this.options.type === SLIDE ) {\r\n        return ! this.options.trimSpace;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Checks if the direction is TTB or not.\r\n   *\r\n   * @return `true` if the direction is TTB, or otherwise `false`.\r\n   */\r\n  private isVertical(): boolean {\r\n    return this.options.direction === TTB;\r\n  }\r\n\r\n  /**\r\n   * Builds classes of the root element.\r\n   *\r\n   * @return Classes for the root element as a single string.\r\n   */\r\n  private buildClasses(): string {\r\n    const { options } = this;\r\n\r\n    return [\r\n      CLASS_ROOT,\r\n      `${ CLASS_ROOT }--${ options.type }`,\r\n      `${ CLASS_ROOT }--${ options.direction }`,\r\n      options.drag && `${ CLASS_ROOT }--draggable`,\r\n      options.isNavigation && `${ CLASS_ROOT }--nav`,\r\n      CLASS_ACTIVE,\r\n      ! this.config.hidden && CLASS_RENDERED,\r\n    ].filter( Boolean ).join( ' ' );\r\n  }\r\n\r\n  /**\r\n   * Converts provided attributes into a single string.\r\n   *\r\n   * @param attrs - An object with attributes.\r\n   *\r\n   * @return A built string.\r\n   */\r\n  private buildAttrs( attrs: Record<string, string | number | boolean> ): string {\r\n    let attr = '';\r\n\r\n    forOwn( attrs, ( value, key ) => {\r\n      attr += value ? ` ${ camelToKebab( key ) }=\"${ value }\"` : '';\r\n    } );\r\n\r\n    return attr.trim();\r\n  }\r\n\r\n  /**\r\n   * Converts provided styles into a single string.\r\n   *\r\n   * @param styles - An object with styles.\r\n   *\r\n   * @return A built string.\r\n   */\r\n  private buildStyles( styles: Record<string, string | number> ): string {\r\n    let style = '';\r\n\r\n    forOwn( styles, ( value, key ) => {\r\n      style += ` ${ camelToKebab( key ) }:${ value };`;\r\n    } );\r\n\r\n    return style.trim();\r\n  }\r\n\r\n  /**\r\n   * Generates HTML of slides with inserting provided contents.\r\n   *\r\n   * @return The HTML for all slides and clones.\r\n   */\r\n  private renderSlides(): string {\r\n    const { slideTag: tag } = this.config;\r\n\r\n    return this.slides.map( content => {\r\n      return `<${ tag } ${ this.buildAttrs( content.attrs ) }>${ content.html || '' }</${ tag }>`;\r\n    } ).join( '' );\r\n  }\r\n\r\n  /**\r\n   * Add the `background` style for the cover mode.\r\n   *\r\n   * @param content - A slide content.\r\n   */\r\n  private cover( content: SlideContent ): void {\r\n    const { styles, html = '' } = content;\r\n\r\n    if ( this.options.cover && ! this.options.lazyLoad ) {\r\n      const src = html.match( /<img.*?src\\s*=\\s*(['\"])(.+?)\\1.*?>/ );\r\n\r\n      if ( src && src[ 2 ] ) {\r\n        styles.background = `center/cover no-repeat url('${ src[ 2 ] }')`;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates clones.\r\n   *\r\n   * @param contents - An array with SlideContent objects.\r\n   */\r\n  private generateClones( contents: SlideContent[] ): void {\r\n    const { classes } = this.options;\r\n    const count  = this.getCloneCount();\r\n    const slides = contents.slice();\r\n\r\n    while ( slides.length < count ) {\r\n      push( slides, slides );\r\n    }\r\n\r\n    push( slides.slice( -count ).reverse(), slides.slice( 0, count ) ).forEach( ( content, index ) => {\r\n      const attrs = assign( {}, content.attrs, { class: `${ content.attrs.class } ${ classes.clone }` } );\r\n      const clone = assign( {}, content, { attrs } );\r\n      index < count ? contents.unshift( clone ) : contents.push( clone );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Returns the number of clones to generate.\r\n   *\r\n   * @return A number of clones.\r\n   */\r\n  private getCloneCount(): number {\r\n    if ( this.isLoop() ) {\r\n      const { options } = this;\r\n\r\n      if ( options.clones ) {\r\n        return options.clones;\r\n      }\r\n\r\n      const perPage = max( ...this.breakpoints.map( ( [ , options ] ) => options.perPage ) );\r\n      return perPage * ( ( options.flickMaxPages || 1 ) + 1 );\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Generates arrows and the wrapper element.\r\n   *\r\n   * @return The HTML for arrows.\r\n   */\r\n  private renderArrows(): string {\r\n    let html = '';\r\n\r\n    html += `<div class=\"${ this.options.classes.arrows }\">`;\r\n    html += this.renderArrow( true );\r\n    html += this.renderArrow( false );\r\n    html += `</div>`;\r\n\r\n    return html;\r\n  }\r\n\r\n  /**\r\n   * Generates an arrow HTML.\r\n   * Some attributes are temporary, and Splide changes them after mount.\r\n   *\r\n   * @param prev - Options for each breakpoint.\r\n   *\r\n   * @return The HTML for the prev or next arrow.\r\n   */\r\n  private renderArrow( prev: boolean ): string {\r\n    const { classes, i18n } = this.options;\r\n    const attrs = {\r\n      class    : `${ classes.arrow } ${ prev ? classes.prev : classes.next }`,\r\n      type     : 'button',\r\n      ariaLabel: prev ? i18n.prev : i18n.next,\r\n    };\r\n\r\n    return `<button ${ this.buildAttrs( attrs ) }>`\r\n      +\t`<svg xmlns=\"${ XML_NAME_SPACE }\" viewBox=\"0 0 ${ SIZE } ${ SIZE }\" width=\"${ SIZE }\" height=\"${ SIZE }\">`\r\n      + `<path d=\"${ this.options.arrowPath || PATH }\" />`\r\n      + `</svg>`\r\n      + `</button>`;\r\n  }\r\n\r\n  /**\r\n   * Returns the HTML of the slider.\r\n   *\r\n   * @return The generated HTML.\r\n   */\r\n  html(): string {\r\n    const { rootClass, listTag, arrows, beforeTrack, afterTrack, slider, beforeSlider, afterSlider } = this.config;\r\n\r\n    let html = '';\r\n\r\n    html += `<div id=\"${ this.id }\" class=\"${ this.buildClasses() } ${ rootClass || '' }\">`;\r\n    html += `<style>${ this.Style.build() }</style>`;\r\n\r\n    if ( slider ) {\r\n      html += beforeSlider || '';\r\n      html += `<div class=\"splide__slider\">`;\r\n    }\r\n\r\n    html += beforeTrack || '';\r\n\r\n    if ( arrows ) {\r\n      html += this.renderArrows();\r\n    }\r\n\r\n    html += `<div class=\"splide__track\">`;\r\n    html += `<${ listTag } class=\"splide__list\">`;\r\n\r\n    html += this.renderSlides();\r\n\r\n    html += `</${ listTag }>`;\r\n    html += `</div>`; // .track\r\n\r\n    html += afterTrack || '';\r\n\r\n    if ( slider ) {\r\n      html += `</div>`;\r\n      html += afterSlider || '';\r\n    }\r\n\r\n    html += `</div>`; // .splide\r\n\r\n    return html;\r\n  }\r\n}\r\n","export const EVENT_MOUNTED            = 'mounted';\r\nexport const EVENT_READY              = 'ready';\r\nexport const EVENT_MOVE               = 'move';\r\nexport const EVENT_MOVED              = 'moved';\r\nexport const EVENT_CLICK              = 'click';\r\nexport const EVENT_ACTIVE             = 'active';\r\nexport const EVENT_INACTIVE           = 'inactive';\r\nexport const EVENT_VISIBLE            = 'visible';\r\nexport const EVENT_HIDDEN             = 'hidden';\r\nexport const EVENT_REFRESH            = 'refresh';\r\nexport const EVENT_UPDATED            = 'updated';\r\nexport const EVENT_RESIZE             = 'resize';\r\nexport const EVENT_RESIZED            = 'resized';\r\nexport const EVENT_DRAG               = 'drag';\r\nexport const EVENT_DRAGGING           = 'dragging';\r\nexport const EVENT_DRAGGED            = 'dragged';\r\nexport const EVENT_SCROLL             = 'scroll';\r\nexport const EVENT_SCROLLED           = 'scrolled';\r\nexport const EVENT_OVERFLOW           = 'overflow';\r\nexport const EVENT_DESTROY            = 'destroy';\r\nexport const EVENT_ARROWS_MOUNTED     = 'arrows:mounted';\r\nexport const EVENT_ARROWS_UPDATED     = 'arrows:updated';\r\nexport const EVENT_PAGINATION_MOUNTED = 'pagination:mounted';\r\nexport const EVENT_PAGINATION_UPDATED = 'pagination:updated';\r\nexport const EVENT_NAVIGATION_MOUNTED = 'navigation:mounted';\r\nexport const EVENT_AUTOPLAY_PLAY      = 'autoplay:play';\r\nexport const EVENT_AUTOPLAY_PLAYING   = 'autoplay:playing';\r\nexport const EVENT_AUTOPLAY_PAUSE     = 'autoplay:pause';\r\nexport const EVENT_LAZYLOAD_LOADED    = 'lazyload:loaded';\r\nexport const EVENT_LAZYLOAD_ERROR     = 'lazyload:error';\r\n\r\n/** @internal */\r\nexport const EVENT_SLIDE_KEYDOWN     = '_sk';\r\nexport const EVENT_SHIFTED           = '_sh';\r\nexport const EVENT_END_INDEX_CHANGED = '_ei';\r\n","/**\r\n * The type for the regular slider.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const SLIDE = 'slide';\r\n\r\n/**\r\n * The type for the carousel slider.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const LOOP = 'loop';\r\n\r\n/**\r\n * The type for the fade slider that can not have multiple slides in a page.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const FADE = 'fade';\r\n","/**\r\n * The namespace for SVG elements.\r\n */\r\nexport const XML_NAME_SPACE = 'http://www.w3.org/2000/svg';\r\n\r\n/**\r\n * The arrow path.\r\n */\r\nexport const PATH = 'm15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z';\r\n\r\n/**\r\n * SVG width and height.\r\n */\r\nexport const SIZE = 40;\r\n"],"names":["ORIENTATION_MAP","width","left","right","x","X","Y","ArrowLeft","ArrowRight","Direction","Splide","Components","options","resolve","prop","axisOnly","direction","index","replace","match","offset","replacement","toLowerCase","charAt","toUpperCase","slice","orient","value","PROJECT_CODE","CLASS_PREFIX","CLASS_ROOT","CLASS_SLIDE","CLASS_CLONE","CLASS_ARROW","CLASS_PAGINATION","CLASS_ACTIVE","DEFAULTS","type","speed","perPage","easing","drag","trimSpace","focusableNodes","classes","slide","clone","arrows","arrow","prev","next","pagination","page","spinner","i18n","first","last","slideX","pageX","play","pause","carousel","select","slideLabel","reducedMotion","rewindSpeed","autoplay","apply","func","args","bind","typeOf","subject","isObject","isArray","Array","isString","toArray","push","array","items","arrayProto","prototype","arrayLike","start","end","call","matches","elm","selector","ownerDocument","defaultView","window","HTMLElement","e","child","parent","children2","children","filter","child2","firstElementChild","assign","Object","ownKeys","keys","forOwn","object","iteratee","reverse","forEach","key","merge","sources","source","removeNode","nodes","node","parentNode","removeChild","unit","max","Math","camelToKebab","string","ids","RENDERER_DEFAULT_CONFIG","listTag","slideTag","Style","styles","id","constructor","this","rule","breakpoint","selectors","build","let","css","default","buildSelectors","sort","n","m","mediaQuery","trim","assert","condition","message","Error","clean","splide","on","event","root","clones","querySelectorAll","contents","slides","config","breakpoints","defaults","prefix","padStart","length","init","parseBreakpoints","initSlides","registerRootStyles","registerTrackStyles","registerSlideStyles","registerListStyles","map","content","html","attrs","cover","class","style","buildStyles","isLoop","generateClones","cssPadding","cssTrackHeight","buildTranslate","cssSlideHeight","cssAspectRatio","cssSlideWidth","gap","values","cssOffsetClones","cssOffsetGaps","isCenter","buildCssValue","cssOffsetCenter","Boolean","join","percent","cloneCount","getCloneCount","isFixedWidth","parseCssValue","padding","height","isVertical","cssHeight","autoWidth","fixedWidth","cssSlideSize","fixedHeight","autoHeight","heightRatio","parseFloat","focus","buildClasses","isNavigation","hidden","buildAttrs","attr","renderSlides","tag","lazyLoad","src","background","count","unshift","flickMaxPages","renderArrows","renderArrow","ariaLabel","arrowPath","rootClass","beforeTrack","afterTrack","slider","beforeSlider","afterSlider"],"mappings":"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"}