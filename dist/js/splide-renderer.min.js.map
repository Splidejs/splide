{"version":3,"file":"splide-renderer.min.js","sources":["../../src/js/constants/directions.ts","../../src/js/components/Direction/Direction.ts","../../src/js/constants/arrows.ts","../../src/js/constants/project.ts","../../src/js/constants/classes.ts","../../src/js/constants/defaults.ts","../../src/js/constants/i18n.ts","../../src/js/utils/arrayLike/slice/slice.ts","../../src/js/utils/function/apply/apply.ts","../../src/js/utils/type/type.ts","../../src/js/utils/array/toArray/toArray.ts","../../src/js/utils/array/push/push.ts","../../src/js/utils/dom/matches/matches.ts","../../src/js/utils/dom/child/child.ts","../../src/js/utils/dom/children/children.ts","../../src/js/utils/object/ownKeys/ownKeys.ts","../../src/js/utils/object/forOwn/forOwn.ts","../../src/js/utils/object/assign/assign.ts","../../src/js/utils/object/merge/merge.ts","../../src/js/utils/dom/remove/remove.ts","../../src/js/utils/array/forEach/forEach.ts","../../src/js/utils/dom/unit/unit.ts","../../src/js/utils/error/assert/assert.ts","../../src/js/utils/math/math/math.ts","../../src/js/utils/string/camelToKebab/camelToKebab.ts","../../src/js/utils/string/uniqueId/uniqueId.ts","../../src/js/renderer/constants/classes.ts","../../src/js/renderer/constants/defaults.ts","../../src/js/renderer/Style/Style.ts","../../src/js/renderer/SplideRenderer/SplideRenderer.ts","../../src/js/utils/dom/queryAll/queryAll.ts","../../src/js/constants/events.ts","../../src/js/utils/string/pad/pad.ts","../../src/js/constants/types.ts","../../src/js/components/Arrows/path.ts"],"sourcesContent":["/**\r\n * Enumerates slides from left to right.\r\n */\r\nexport const LTR = 'ltr';\r\n\r\n/**\r\n * Enumerates slides from right to left.\r\n */\r\nexport const RTL = 'rtl';\r\n\r\n/**\r\n * Enumerates slides in a col.\r\n */\r\nexport const TTB = 'ttb';\r\n","import { ARROW_DOWN, ARROW_LEFT, ARROW_RIGHT, ARROW_UP } from '../../constants/arrows';\r\nimport { RTL, TTB } from '../../constants/directions';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\n\r\n\r\n/**\r\n * The interface for the Direction component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface DirectionComponent extends BaseComponent {\r\n  resolve( prop: string, axisOnly?: boolean, direction?: Options['direction'] ): string;\r\n  orient( value: number ): number;\r\n}\r\n\r\n/**\r\n * The translation map for directions.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const ORIENTATION_MAP = {\r\n  width     : [ 'height' ],\r\n  left      : [ 'top', 'right' ],\r\n  right     : [ 'bottom', 'left' ],\r\n  x         : [ 'y' ],\r\n  X         : [ 'Y' ],\r\n  Y         : [ 'X' ],\r\n  ArrowLeft : [ ARROW_UP, ARROW_RIGHT ],\r\n  ArrowRight: [ ARROW_DOWN, ARROW_LEFT ],\r\n};\r\n\r\n/**\r\n * The component that absorbs the difference among directions.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Direction component object.\r\n */\r\nexport function Direction( Splide: Splide, Components: Components, options: Options ): DirectionComponent {\r\n  /**\r\n   * Resolves the provided property name.\r\n   *\r\n   * @param prop      - A property name to translate.\r\n   * @param axisOnly  - Optional. If `ture`, returns the same property for LTR and RTL.\r\n   * @param direction - Optional. Specify the direction. The default value is the `direction` option.\r\n   */\r\n  function resolve( prop: string, axisOnly?: boolean, direction?: Options['direction'] ): string {\r\n    direction = direction || options.direction;\r\n    const index = direction === RTL && ! axisOnly ? 1 : direction === TTB ? 0 : -1;\r\n\r\n    return ORIENTATION_MAP[ prop ] && ORIENTATION_MAP[ prop ][ index ]\r\n      || prop.replace( /width|left|right/i, ( match, offset ) => {\r\n        const replacement = ORIENTATION_MAP[ match.toLowerCase() ][ index ] || match;\r\n        return offset > 0 ? replacement.charAt( 0 ).toUpperCase() + replacement.slice( 1 ) : replacement;\r\n      } );\r\n  }\r\n\r\n  /**\r\n   * Orients the value towards the current direction.\r\n   *\r\n   * @param value - A value to orient.\r\n   *\r\n   * @return The oriented value.\r\n   */\r\n  function orient( value: number ): number {\r\n    return value * ( options.direction === RTL ? 1 : -1 );\r\n  }\r\n\r\n  return {\r\n    resolve,\r\n    orient,\r\n  };\r\n}\r\n","const ARROW = 'Arrow';\r\nexport const ARROW_LEFT  = `${ ARROW }Left`;\r\nexport const ARROW_RIGHT = `${ ARROW }Right`;\r\nexport const ARROW_UP    = `${ ARROW }Up`;\r\nexport const ARROW_DOWN  = `${ ARROW }Down`;","/**\r\n * The project code.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const PROJECT_CODE = 'splide';\r\n\r\n/**\r\n * The data attribute prefix.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const DATA_ATTRIBUTE = `data-${ PROJECT_CODE }`;\r\n","import { PROJECT_CODE } from './project';\r\n\r\n/**\r\n * The prefix for classes.\r\n *\r\n * @since 4.1.0\r\n */\r\nconst CLASS_PREFIX = `${ PROJECT_CODE }__`;\r\n\r\n/**\r\n * The prefix for status classes.\r\n *\r\n * @since 4.1.0\r\n */\r\nconst STATUS_CLASS_PREFIX = 'is-';\r\n\r\n/**\r\n * All classes as constants.\r\n */\r\nexport const CLASS_ROOT            = PROJECT_CODE;\r\nexport const CLASS_TRACK           = `${ CLASS_PREFIX }track`;\r\nexport const CLASS_LIST            = `${ CLASS_PREFIX }list`;\r\nexport const CLASS_SLIDE           = `${ CLASS_PREFIX }slide`;\r\nexport const CLASS_CLONE           = `${ CLASS_SLIDE }--clone`;\r\nexport const CLASS_CONTAINER       = `${ CLASS_SLIDE }__container`;\r\nexport const CLASS_ARROWS          = `${ CLASS_PREFIX }arrows`;\r\nexport const CLASS_ARROW           = `${ CLASS_PREFIX }arrow`;\r\nexport const CLASS_ARROW_PREV      = `${ CLASS_ARROW }--prev`;\r\nexport const CLASS_ARROW_NEXT      = `${ CLASS_ARROW }--next`;\r\nexport const CLASS_PAGINATION      = `${ CLASS_PREFIX }pagination`;\r\nexport const CLASS_PAGINATION_PAGE = `${ CLASS_PAGINATION }__page`;\r\nexport const CLASS_PROGRESS        = `${ CLASS_PREFIX }progress`;\r\nexport const CLASS_PROGRESS_BAR    = `${ CLASS_PROGRESS }__bar`;\r\nexport const CLASS_TOGGLE          = `${ CLASS_PREFIX }toggle`;\r\nexport const CLASS_TOGGLE_PLAY     = `${ CLASS_TOGGLE }__play`;\r\nexport const CLASS_TOGGLE_PAUSE    = `${ CLASS_TOGGLE }__pause`;\r\nexport const CLASS_SPINNER         = `${ CLASS_PREFIX }spinner`;\r\nexport const CLASS_SR              = `${ CLASS_PREFIX }sr`;\r\nexport const CLASS_INITIALIZED     = `${ STATUS_CLASS_PREFIX }initialized`;\r\nexport const CLASS_ACTIVE          = `${ STATUS_CLASS_PREFIX }active`;\r\nexport const CLASS_PREV            = `${ STATUS_CLASS_PREFIX }prev`;\r\nexport const CLASS_NEXT            = `${ STATUS_CLASS_PREFIX }next`;\r\nexport const CLASS_VISIBLE         = `${ STATUS_CLASS_PREFIX }visible`;\r\nexport const CLASS_LOADING         = `${ STATUS_CLASS_PREFIX }loading`;\r\nexport const CLASS_FOCUS_IN        = `${ STATUS_CLASS_PREFIX }focus-in`;\r\nexport const CLASS_OVERFLOW        = `${ STATUS_CLASS_PREFIX }overflow`;\r\n\r\n/**\r\n * The array with all status classes except for `is-initialized`.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const STATUS_CLASSES = [\r\n  CLASS_ACTIVE,\r\n  CLASS_VISIBLE,\r\n  CLASS_PREV,\r\n  CLASS_NEXT,\r\n  CLASS_LOADING,\r\n  CLASS_FOCUS_IN,\r\n  CLASS_OVERFLOW,\r\n];\r\n\r\n/**\r\n * The collection of classes for elements that Splide dynamically creates.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const CLASSES = {\r\n  slide     : CLASS_SLIDE,\r\n  clone     : CLASS_CLONE,\r\n  arrows    : CLASS_ARROWS,\r\n  arrow     : CLASS_ARROW,\r\n  prev      : CLASS_ARROW_PREV,\r\n  next      : CLASS_ARROW_NEXT,\r\n  pagination: CLASS_PAGINATION,\r\n  page      : CLASS_PAGINATION_PAGE,\r\n  spinner   : CLASS_SPINNER,\r\n};\r\n","import { Options } from '../types';\r\nimport { CLASSES } from './classes';\r\nimport { I18N } from './i18n';\r\n\r\n\r\n/**\r\n * The collection of default options.\r\n * Note that this collection does not contain all options.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const DEFAULTS: Options = {\r\n  type              : 'slide',\r\n  role              : 'region',\r\n  speed             : 400,\r\n  perPage           : 1,\r\n  cloneStatus       : true,\r\n  arrows            : true,\r\n  pagination        : true,\r\n  paginationKeyboard: true,\r\n  interval          : 5000,\r\n  pauseOnHover      : true,\r\n  pauseOnFocus      : true,\r\n  resetProgress     : true,\r\n  easing            : 'cubic-bezier(0.25, 1, 0.5, 1)',\r\n  drag              : true,\r\n  direction         : 'ltr',\r\n  trimSpace         : true,\r\n  focusableNodes    : 'a, button, textarea, input, select, iframe',\r\n  live              : true,\r\n  classes           : CLASSES,\r\n  i18n              : I18N,\r\n  reducedMotion: {\r\n    speed      : 0,\r\n    rewindSpeed: 0,\r\n    autoplay   : 'pause',\r\n  },\r\n};","/**\r\n * The collection of i18n strings.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const I18N = {\r\n  prev      : 'Previous slide',\r\n  next      : 'Next slide',\r\n  first     : 'Go to first slide',\r\n  last      : 'Go to last slide',\r\n  slideX    : 'Go to slide %s',\r\n  pageX     : 'Go to page %s',\r\n  play      : 'Start autoplay',\r\n  pause     : 'Pause autoplay',\r\n  carousel  : 'carousel',\r\n  slide     : 'slide',\r\n  select    : 'Select a slide to show',\r\n  slideLabel: '%s of %s', // [ slide number ] / [ slide size ]\r\n};\r\n","/**\r\n * The slice method for an array-like object.\r\n *\r\n * @param arrayLike - An array-like object.\r\n * @param start     - Optional. A start index.\r\n * @param end       - Optional. A end index.\r\n *\r\n * @return An array with sliced elements.\r\n */\r\nexport function slice<T>( arrayLike: ArrayLike<T>, start?: number, end?: number ): T[] {\r\n  return Array.prototype.slice.call( arrayLike, start, end );\r\n}\r\n","import { AnyFunction, ShiftN } from '../../../types';\r\nimport { slice } from '../../arrayLike';\r\n\r\n\r\n/**\r\n * Create a function where provided arguments are bound.\r\n * `this` parameter will be always null.\r\n *\r\n * @param func - A function.\r\n * @param args - Arguments to bind to the function.\r\n *\r\n * @return A function where arguments are bound.\r\n */\r\nexport function apply<F extends AnyFunction, A extends any[] = any[]>(\r\n  func: F,\r\n  ...args: A\r\n): ( ...args: ShiftN<Parameters<F>, A[\"length\"]> ) => ReturnType<F>;\r\n\r\n/**\r\n * Create a function where provided arguments are bound.\r\n * `this` parameter will be always null.\r\n *\r\n * @param func - A function.\r\n */\r\nexport function apply( func: AnyFunction ): any {\r\n  // eslint-disable-next-line prefer-rest-params, prefer-spread\r\n  return func.bind( null, ...slice( arguments, 1 ) );\r\n}\r\n","import { AnyFunction } from '../../types';\r\nimport { apply } from '../function';\r\n\r\n\r\n/**\r\n * The alias of the type check function.\r\n *\r\n * @param type    - A type.\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is the specified type.\r\n */\r\nfunction typeOf( type: string, subject: unknown ): boolean {\r\n  return typeof subject === type;\r\n}\r\n\r\n/**\r\n * Checks if the given subject is an object or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an object, or otherwise `false`.\r\n */\r\nexport function isObject( subject: unknown ): subject is object {\r\n  return ! isNull( subject ) && typeOf( 'object', subject );\r\n}\r\n\r\n/**\r\n * Checks if the given subject is an array or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an array, or otherwise `false`.\r\n */\r\nexport const isArray: <T>( subject: unknown ) => subject is T[] = Array.isArray;\r\n\r\n/**\r\n * Checks if the given subject is a function or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is a function, or otherwise `false`.\r\n */\r\nexport const isFunction = <( subject: unknown ) => subject is AnyFunction>apply( typeOf, 'function' );\r\n\r\n/**\r\n * Checks if the given subject is a string or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is a string, or otherwise `false`.\r\n */\r\nexport const isString = <( subject: unknown ) => subject is string>apply( typeOf, 'string' );\r\n\r\n/**\r\n * Checks if the given subject is `undefined` or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is `undefined`, or otherwise `false`.\r\n */\r\nexport const isUndefined = <( subject: unknown ) => subject is undefined>apply( typeOf, 'undefined' );\r\n\r\n/**\r\n * Checks if the given subject is `null` or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is `null`, or otherwise `false`.\r\n */\r\nexport function isNull( subject: unknown ): subject is null {\r\n  return subject === null;\r\n}\r\n\r\n/**\r\n * Checks if the given subject is an HTMLElement instance or not.\r\n * This method takes into account which `window` the node belongs to.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an HTMLElement instance, or otherwise `false`.\r\n */\r\nexport function isHTMLElement( subject: unknown ): subject is HTMLElement {\r\n  try {\r\n    return subject instanceof ( ( subject as Node ).ownerDocument.defaultView || window ).HTMLElement;\r\n  } catch ( e ) {\r\n    return false;\r\n  }\r\n}","import { isArray } from '../../type/type';\r\n\r\n\r\n/**\r\n * Push the provided value to an array if the value is not an array.\r\n *\r\n * @param value - A value to push.\r\n *\r\n * @return An array containing the value, or the value itself if it is already an array.\r\n */\r\nexport function toArray<T>( value: T | T[] ): T[] {\r\n  return isArray( value ) ? value : [ value ];\r\n}\r\n","import { toArray } from '../toArray/toArray';\r\n\r\n\r\n/**\r\n * Extended `Array#push()` that accepts an item or an array with items.\r\n *\r\n * @param array - An array to push items.\r\n * @param items - An item or items to push.\r\n *\r\n * @return A provided array itself.\r\n */\r\nexport function push<T>( array: T[], items: T | T[] ): T[] {\r\n  array.push( ...toArray( items ) );\r\n  return array;\r\n}\r\n","import { isHTMLElement } from '../../type/type';\r\n\r\n\r\n/**\r\n * Checks if the element can be selected by the provided selector or not.\r\n *\r\n * @param elm      - An element to check.\r\n * @param selector - A selector to test.\r\n *\r\n * @return `true` if the selector matches the element, or otherwise `false`.\r\n */\r\nexport function matches( elm: Element | EventTarget, selector: string ): boolean {\r\n  return isHTMLElement( elm ) && ( elm[ 'msMatchesSelector' ] || elm.matches ).call( elm, selector );\r\n}\r\n","import { children } from '../children/children';\r\n\r\n\r\n/**\r\n * Returns a child element that matches the specified tag or class name.\r\n *\r\n * @param parent   - A parent element.\r\n * @param selector - A selector to filter children.\r\n *\r\n * @return A matched child element if available, or otherwise `undefined`.\r\n */\r\nexport function child<E extends HTMLElement>( parent: HTMLElement, selector?: string ): E | undefined {\r\n  return selector ? children<E>( parent, selector )[ 0 ] : parent.firstElementChild as E;\r\n}\r\n","import { slice } from '../../arrayLike';\r\nimport { matches } from '../matches/matches';\r\n\r\n\r\n/**\r\n * Finds children that has the specified tag or class name.\r\n *\r\n * @param parent   - A parent element.\r\n * @param selector - Optional. A selector to filter children.\r\n *\r\n * @return An array with filtered children.\r\n */\r\nexport function children<E extends HTMLElement>( parent: HTMLElement, selector?: string ): E[] {\r\n  const children = parent ? slice( parent.children ) as E[] : [];\r\n  return selector ? children.filter( child => matches( child, selector ) ) : children;\r\n}\r\n","/**\r\n * An alias of `Object.keys()`\r\n */\r\nexport const ownKeys = Object.keys;","import { ownKeys } from '../ownKeys/ownKeys';\r\n\r\n\r\n/**\r\n * Iterates over the provided object by own enumerable keys with calling the iteratee function.\r\n *\r\n * @param object   - An object to iterate over.\r\n * @param iteratee - An iteratee function that takes `value` and `key` as arguments.\r\n * @param right    - If `true`, the method iterates over the object from the end like `forEachRight()`.\r\n *\r\n * @return A provided object itself.\r\n */\r\nexport function forOwn<T extends object>(\r\n  object: T,\r\n  iteratee: ( value: T[ keyof T ], key: string ) => boolean | void,\r\n  right?: boolean\r\n): T {\r\n  if ( object ) {\r\n    ( right ? ownKeys( object ).reverse() : ownKeys( object ) ).forEach( key => {\r\n      key !== '__proto__' && iteratee( object[ key ], key );\r\n    } );\r\n  }\r\n\r\n  return object;\r\n}\r\n","import { Cast, Head, Push, Resolve, Shift } from '../../../types';\r\nimport { slice } from '../../arrayLike';\r\nimport { forOwn } from '../forOwn/forOwn';\r\n\r\n\r\n/**\r\n * Assigns U to T.\r\n *\r\n * @typeParam T - An object to assign to.\r\n * @typeParam U - An object to assign.\r\n *\r\n * @return An assigned object type.\r\n */\r\nexport type Assign<T, U> = Omit<T, keyof U> & U;\r\n\r\n/**\r\n * Recursively assigns U[] to T.\r\n *\r\n * @typeParam T - An object to assign to.\r\n * @typeParam U - A tuple contains objects.\r\n *\r\n * @return An assigned object type.\r\n */\r\nexport type Assigned<T extends object, U extends object[], N extends number, C extends any[] = []> = {\r\n  0: T,\r\n  1: Assigned<Assign<T, Head<U>>, Shift<U>, N, Push<C>>,\r\n}[ C['length'] extends N ? 0 : 1 ] extends infer A ? Cast<A, any> : never;\r\n\r\nexport function assign<T extends object>( object: T ): T;\r\n\r\nexport function assign<T extends object, U extends object[]>(\r\n  object: T,\r\n  ...sources: U\r\n): Resolve<Assigned<T, U, U['length']>>\r\n\r\n/**\r\n * Assigns all own enumerable properties of all source objects to the provided object.\r\n *\r\n * @param object - An object to assign properties to.\r\n *\r\n * @return An object assigned properties of the sources to.\r\n */\r\nexport function assign<T extends object>( object: T ): any {\r\n  // eslint-disable-next-line prefer-rest-params, prefer-spread\r\n  slice( arguments, 1 ).forEach( source => {\r\n    forOwn( source, ( value, key ) => {\r\n      object[ key ] = source[ key ];\r\n    } );\r\n  } );\r\n\r\n  return object;\r\n}\r\n","import { Cast, Head, Push, Resolve, Shift } from '../../../types';\r\nimport { slice } from '../../arrayLike';\r\nimport { isArray, isObject } from '../../type/type';\r\nimport { forOwn } from '../forOwn/forOwn';\r\n\r\n\r\n/**\r\n * Merges U to T.\r\n *\r\n * @typeParam T - An object to merge U into.\r\n * @typeParam U - An object to merge properties from.\r\n *\r\n * @return A merged object type.\r\n */\r\nexport type Merge<T extends object, U extends object> = Omit<T, keyof U> & {\r\n  [ K in ( keyof T & keyof U ) ]: U[ K ] extends object\r\n    ? U[ K ] extends any[]\r\n      ? U[ K ]\r\n      : T[ K ] extends object\r\n        ? Merge<T[ K ], U[ K ]> extends infer A ? Resolve<Cast<A, object>> : never\r\n        : U[ K ]\r\n    : U[ K ];\r\n} & Omit<U, keyof T>;\r\n\r\n/**\r\n * Recursively merges U[] to T.\r\n *\r\n * @typeParam T - An object to assign to.\r\n * @typeParam U - A tuple contains objects.\r\n *\r\n * @return An assigned object type.\r\n */\r\nexport type Merged<T extends object, U extends object[], N extends number, C extends any[] = []> = {\r\n  0: T,\r\n  1: Merged<Merge<T, Head<U>>, Shift<U>, N, Push<C>>,\r\n}[ C['length'] extends N ? 0 : 1 ] extends infer A ? Cast<A, any> : never;\r\n\r\nexport function merge<T extends object>( object: T ): T;\r\n\r\nexport function merge<T extends object, U extends object[]>(\r\n  object: T,\r\n  ...sources: U\r\n): Resolve<Merged<T, U, U['length']>>\r\n\r\n/**\r\n * Recursively merges source properties to the object.\r\n * Be aware that this method does not merge arrays. They are just duplicated by `slice()`.\r\n *\r\n * @param object - An object to merge properties to.\r\n *\r\n * @return A new object with merged properties.\r\n */\r\nexport function merge<T extends object>( object: T ): any {\r\n  // eslint-disable-next-line prefer-rest-params\r\n  slice( arguments, 1 ).forEach( source => {\r\n    forOwn( source, ( value, key ) => {\r\n      if ( isArray( value ) ) {\r\n        object[ key ] = value.slice();\r\n      } else if ( isObject( value ) ) {\r\n        object[ key ] = merge( {}, isObject( object[ key ] ) ? object[ key ] : {}, value );\r\n      } else {\r\n        object[ key ] = value;\r\n      }\r\n    } );\r\n  } );\r\n\r\n  return object;\r\n}\r\n","import { forEach } from '../../array';\r\n\r\n\r\n/**\r\n * Removes the provided node from its parent.\r\n *\r\n * @param nodes - A node or nodes to remove.\r\n */\r\nexport function remove( nodes: Node | Node[] ): void {\r\n  forEach( nodes, node => {\r\n    if ( node && node.parentNode ) {\r\n      node.parentNode.removeChild( node );\r\n    }\r\n  } );\r\n}\r\n","import { toArray } from '../toArray/toArray';\r\n\r\n\r\n/**\r\n * The extended `Array#forEach` method that accepts a single value as an argument.\r\n *\r\n * @param values   - A value or values to iterate over.\r\n * @param iteratee - An iteratee function.\r\n */\r\nexport function forEach<T>( values: T | T[], iteratee: ( value: T, index: number, array: T[] ) => void ): void {\r\n  toArray( values ).forEach( iteratee );\r\n}\r\n","import { isString } from '../../type/type';\r\n\r\n\r\n/**\r\n * Appends `px` to the provided number.\r\n * If the value is already string, just returns it.\r\n *\r\n * @param value - A value to append `px` to.\r\n *\r\n * @return A string with the CSS unit.\r\n */\r\nexport function unit( value: number | string ): string {\r\n  return isString( value ) ? value : value ? `${ value }px` : '';\r\n}\r\n","import { PROJECT_CODE } from '../../../constants/project';\r\n\r\n\r\n/**\r\n * Throws an error if the provided condition is falsy.\r\n *\r\n * @param condition - If falsy, an error is thrown.\r\n * @param message   - Optional. A message to display.\r\n */\r\nexport function assert( condition: any, message?: string ): void {\r\n  if ( ! condition ) {\r\n    throw new Error( `[${ PROJECT_CODE }] ${ message || '' }` );\r\n  }\r\n}\r\n","export const { min, max, floor, ceil, abs } = Math;\r\n","/**\r\n * Converts the provided string in the camel case to the kebab case.\r\n *\r\n * @param string - A string to convert.\r\n */\r\nexport function camelToKebab( string: string ): string {\r\n  return string.replace( /([a-z0-9])([A-Z])/g, '$1-$2' ).toLowerCase();\r\n}\r\n","import { pad } from '../pad/pad';\r\n\r\n\r\n/**\r\n * Stores unique IDs.\r\n *\r\n * @since 3.0.0\r\n */\r\nconst ids: Record<string, number> = {};\r\n\r\n/**\r\n * Returns a sequential unique ID as \"{ prefix }-{ number }\".\r\n *\r\n * @param prefix - A prefix for the ID.\r\n */\r\nexport function uniqueId( prefix: string ): string {\r\n  return `${ prefix }${ pad( ( ids[ prefix ] = ( ids[ prefix ] || 0 ) + 1 ) ) }`;\r\n}\r\n","export const CLASS_RENDERED = 'is-rendered';\r\n","import { RendererConfig } from '../types/types';\r\n\r\n\r\n/**\r\n * Default options for generating static HTML.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const RENDERER_DEFAULT_CONFIG: RendererConfig = {\r\n  listTag : 'ul',\r\n  slideTag: 'li',\r\n};\r\n","import { Options } from '../../types';\r\nimport { forOwn } from '../../utils';\r\n\r\n\r\ninterface Styles {\r\n  [ breakpoint: string ]: {\r\n    [ selector: string ]: Record<string, string | number>\r\n  };\r\n}\r\n\r\n/**\r\n * The class for generating styles as a string.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport class Style {\r\n  /**\r\n   * The collection of registered styles categorized by each breakpoint.\r\n   */\r\n  private readonly styles: Styles = {};\r\n\r\n  /**\r\n   * The ID of the slider.\r\n   */\r\n  private readonly id: string;\r\n\r\n  /**\r\n   * Holds options.\r\n   */\r\n  private readonly options: Options;\r\n\r\n  /**\r\n   * The Style constructor.\r\n   *\r\n   * @param id      - A slider ID.\r\n   * @param options - Options.\r\n   */\r\n  constructor( id: string, options: Options ) {\r\n    this.id      = id;\r\n    this.options = options;\r\n  }\r\n\r\n  /**\r\n   * Registers a CSS rule.\r\n   *\r\n   * @param selector - A selector.\r\n   * @param prop\r\n   * @param value\r\n   * @param breakpoint\r\n   */\r\n  rule( selector: string, prop: string, value: string | number, breakpoint?: string ): void {\r\n    breakpoint = breakpoint || 'default';\r\n    const selectors = ( this.styles[ breakpoint ] = this.styles[ breakpoint ] || {} );\r\n    const styles    = ( selectors[ selector ] = selectors[ selector ] || {} );\r\n    styles[ prop ] = value;\r\n  }\r\n\r\n  /**\r\n   * Builds styles as a single string.\r\n   *\r\n   * @return Built styles.\r\n   */\r\n  build(): string {\r\n    let css = '';\r\n\r\n    if ( this.styles.default ) {\r\n      css += this.buildSelectors( this.styles.default );\r\n    }\r\n\r\n    Object.keys( this.styles )\r\n      .sort( ( n, m ) => this.options.mediaQuery === 'min' ? +n - +m : +m - +n )\r\n      .forEach( breakpoint => {\r\n        if ( breakpoint !== 'default' ) {\r\n          css += `@media screen and (max-width: ${ breakpoint }px) {`;\r\n          css += this.buildSelectors( this.styles[ breakpoint ] );\r\n          css += `}`;\r\n        }\r\n      } );\r\n\r\n    return css;\r\n  }\r\n\r\n  /**\r\n   * Builds styles for each breakpoint.\r\n   *\r\n   * @param selectors - An object with styles.\r\n   *\r\n   * @return Built styles.\r\n   */\r\n  private buildSelectors( selectors: Record<string, Record<string, string | number>> ): string {\r\n    let css = '';\r\n\r\n    forOwn( selectors, ( styles, selector ) => {\r\n      selector = `#${ this.id } ${ selector }`.trim();\r\n      css += `${ selector } {`;\r\n\r\n      forOwn( styles, ( value, prop ) => {\r\n        if ( value || value === 0 ) {\r\n          css += `${ prop }: ${ value };`;\r\n        }\r\n      } );\r\n\r\n      css += '}';\r\n    } );\r\n\r\n    return css;\r\n  }\r\n}\r\n","import { PATH, SIZE, XML_NAME_SPACE } from '../../components/Arrows/path';\r\nimport { Direction, DirectionComponent } from '../../components/Direction/Direction';\r\nimport { CLASS_ACTIVE, CLASS_CLONE, CLASS_LIST, CLASS_ROOT, CLASS_SLIDE, CLASS_TRACK } from '../../constants/classes';\r\nimport { DEFAULTS } from '../../constants/defaults';\r\nimport { TTB } from '../../constants/directions';\r\nimport { EVENT_MOUNTED } from '../../constants/events';\r\nimport { LOOP, SLIDE } from '../../constants/types';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { Options } from '../../types';\r\nimport {\r\n  assert,\r\n  assign,\r\n  camelToKebab,\r\n  child,\r\n  forOwn,\r\n  isObject,\r\n  isString,\r\n  max,\r\n  merge,\r\n  push,\r\n  queryAll,\r\n  remove,\r\n  uniqueId,\r\n  unit,\r\n} from '../../utils';\r\nimport { CLASS_RENDERED } from '../constants/classes';\r\nimport { RENDERER_DEFAULT_CONFIG } from '../constants/defaults';\r\nimport { Style } from '../Style/Style';\r\nimport { RendererConfig, SlideContent } from '../types/types';\r\n\r\n\r\n/**\r\n * The class to generate static HTML of the slider for the first view.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport class SplideRenderer {\r\n  /**\r\n   * Removes a style element and clones.\r\n   *\r\n   * @param splide - A Splide instance.\r\n   */\r\n  static clean( splide: Splide ): void {\r\n    const { on } = splide.event;\r\n    const { root } = splide;\r\n    const clones = queryAll( root, `.${ CLASS_CLONE }` );\r\n\r\n    on( EVENT_MOUNTED, () => {\r\n      remove( child( root, 'style' ) );\r\n    } );\r\n\r\n    remove( clones );\r\n  }\r\n\r\n  /**\r\n   * Holds slide contents.\r\n   */\r\n  private readonly contents: string[] | SlideContent[];\r\n\r\n  /**\r\n   * Stores data of slides.\r\n   */\r\n  private readonly slides: SlideContent[] = [];\r\n\r\n  /**\r\n   * The Direction component.\r\n   */\r\n  private readonly Direction: DirectionComponent;\r\n\r\n  /**\r\n   * Holds the Style instance.\r\n   */\r\n  private readonly Style: Style;\r\n\r\n  /**\r\n   * Holds options.\r\n   */\r\n  private readonly options: Options = {};\r\n\r\n  /**\r\n   * Holds options for this instance.\r\n   */\r\n  private readonly config: RendererConfig;\r\n\r\n  /**\r\n   * The slider ID.\r\n   */\r\n  private readonly id: string;\r\n\r\n  /**\r\n   * An array with options for each breakpoint.\r\n   */\r\n  private readonly breakpoints: [ string, Options ][] = [];\r\n\r\n  /**\r\n   * The SplideRenderer constructor.\r\n   *\r\n   * @param contents - An array with slide contents. Each item must be an HTML or a plain text.\r\n   * @param options  - Optional. Slider options.\r\n   * @param config   - Static default options.\r\n   * @param defaults - Default options for the slider. Pass `Splide.defaults` if you are using it.\r\n   */\r\n  constructor( contents: string[] | SlideContent[], options?: Options, config?: RendererConfig, defaults?: Options ) {\r\n    merge( DEFAULTS, defaults || {} );\r\n    merge( merge( this.options, DEFAULTS ), options || {} );\r\n\r\n    this.contents  = contents;\r\n    this.config    = assign( {}, RENDERER_DEFAULT_CONFIG, config || {} );\r\n    this.id        = this.config.id || uniqueId( 'splide' );\r\n    this.Style     = new Style( this.id, this.options );\r\n    this.Direction = Direction( null, null, this.options );\r\n\r\n    assert( this.contents.length, 'Provide at least 1 content.' );\r\n\r\n    this.init();\r\n  }\r\n\r\n  /**\r\n   * Initializes the instance.\r\n   */\r\n  private init(): void {\r\n    this.parseBreakpoints();\r\n    this.initSlides();\r\n    this.registerRootStyles();\r\n    this.registerTrackStyles();\r\n    this.registerSlideStyles();\r\n    this.registerListStyles();\r\n  }\r\n\r\n  /**\r\n   * Initializes slides.\r\n   */\r\n  private initSlides(): void {\r\n    push( this.slides, this.contents.map( ( content, index ) => {\r\n      content = isString( content ) ? { html: content } : content;\r\n      content.styles = content.styles || {};\r\n      content.attrs  = content.attrs || {};\r\n\r\n      this.cover( content );\r\n\r\n      const classes = `${ this.options.classes.slide } ${ index === 0 ? CLASS_ACTIVE : '' }`;\r\n\r\n      assign( content.attrs, {\r\n        class: `${ classes } ${ content.attrs.class || '' }`.trim(),\r\n        style: this.buildStyles( content.styles ),\r\n      } );\r\n\r\n      return content;\r\n    } ) );\r\n\r\n    if ( this.isLoop() ) {\r\n      this.generateClones( this.slides );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registers styles for the root element.\r\n   */\r\n  private registerRootStyles(): void {\r\n    this.breakpoints.forEach( ( [ width, options ] ) => {\r\n      this.Style.rule( ' ', 'max-width', unit( options.width ), width );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Registers styles for the track element.\r\n   */\r\n  private registerTrackStyles(): void {\r\n    const { Style } = this;\r\n    const selector = `.${ CLASS_TRACK }`;\r\n\r\n    this.breakpoints.forEach( ( [ width, options ] ) => {\r\n      Style.rule( selector, this.resolve( 'paddingLeft' ), this.cssPadding( options, false ), width );\r\n      Style.rule( selector, this.resolve( 'paddingRight' ), this.cssPadding( options, true ), width );\r\n      Style.rule( selector, 'height', this.cssTrackHeight( options ), width );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Registers styles for the list element.\r\n   */\r\n  private registerListStyles(): void {\r\n    const { Style } = this;\r\n    const selector = `.${ CLASS_LIST }`;\r\n\r\n    this.breakpoints.forEach( ( [ width, options ] ) => {\r\n      Style.rule( selector, 'transform', this.buildTranslate( options ), width );\r\n\r\n      if ( ! this.cssSlideHeight( options ) ) {\r\n        Style.rule( selector, 'aspect-ratio', this.cssAspectRatio( options ), width );\r\n      }\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Registers styles for slides and clones.\r\n   */\r\n  private registerSlideStyles(): void {\r\n    const { Style } = this;\r\n    const selector = `.${ CLASS_SLIDE }`;\r\n\r\n    this.breakpoints.forEach( ( [ width, options ] ) => {\r\n      Style.rule( selector, 'width', this.cssSlideWidth( options ), width );\r\n      Style.rule( selector, 'height', this.cssSlideHeight( options ) || '100%', width );\r\n      Style.rule( selector, this.resolve( 'marginRight' ), unit( options.gap ) || '0px', width );\r\n      Style.rule( `${ selector } > img`, 'display', options.cover ? 'none' : 'inline', width );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Builds multiple `translateX` for the list element.\r\n   *\r\n   * @param options - Options for each breakpoint.\r\n   *\r\n   * @return A string with multiple translate functions.\r\n   */\r\n  private buildTranslate( options: Options ): string {\r\n    const { resolve, orient } = this.Direction;\r\n    const values = [];\r\n\r\n    values.push( this.cssOffsetClones( options ) );\r\n    values.push( this.cssOffsetGaps( options ) );\r\n\r\n    if ( this.isCenter( options ) ) {\r\n      values.push( this.buildCssValue( orient( -50 ), '%' ) );\r\n      values.push( ...this.cssOffsetCenter( options ) );\r\n    }\r\n\r\n    return values\r\n      .filter( Boolean )\r\n      .map( value => `translate${ resolve( 'X' ) }(${ value })` )\r\n      .join( ' ' );\r\n  }\r\n\r\n  /**\r\n   * Returns offset for the list element.\r\n   * This does not include gaps because it can not be converted into percent.\r\n   *\r\n   * @param options - Options for each breakpoint.\r\n   *\r\n   * @return The offset.\r\n   */\r\n  private cssOffsetClones( options: Options ): string {\r\n    const { resolve, orient } = this.Direction;\r\n    const cloneCount = this.getCloneCount();\r\n\r\n    if ( this.isFixedWidth( options ) ) {\r\n      const { value, unit } = this.parseCssValue( options[ resolve( 'fixedWidth' ) ] );\r\n      return this.buildCssValue( orient( value ) * cloneCount, unit );\r\n    }\r\n\r\n    const percent = 100 * cloneCount / options.perPage;\r\n    return `${ orient( percent ) }%`;\r\n  }\r\n\r\n  /**\r\n   * Returns offset for centering the active slide.\r\n   *\r\n   * Note:\r\n   * ( 100% + gap ) / perPage - gap\r\n   * 100% / perPage + gap / perPage - gap;\r\n   * 50% / perPage + ( gap / perPage - gap ) / 2;\r\n   *\r\n   * @param options - Options for each breakpoint.\r\n   *\r\n   * @return The offset.\r\n   */\r\n  private cssOffsetCenter( options: Options ): string[] {\r\n    const { resolve, orient } = this.Direction;\r\n\r\n    if ( this.isFixedWidth( options ) ) {\r\n      const { value, unit } = this.parseCssValue( options[ resolve( 'fixedWidth' ) ] );\r\n      return [ this.buildCssValue( orient( value / 2 ), unit ) ];\r\n    }\r\n\r\n    const values = [];\r\n    const { perPage, gap } = options;\r\n\r\n    values.push( `${ orient( 50 / perPage ) }%` );\r\n\r\n    if ( gap ) {\r\n      const { value, unit } = this.parseCssValue( gap );\r\n      const gapOffset = ( value / perPage - value ) / 2;\r\n      values.push( this.buildCssValue( orient( gapOffset ), unit ) );\r\n    }\r\n\r\n    return values;\r\n  }\r\n\r\n  /**\r\n   * Returns offset for gaps.\r\n   *\r\n   * @param options - Options for each breakpoint.\r\n   *\r\n   * @return The offset as `calc()`.\r\n   */\r\n  private cssOffsetGaps( options: Options ): string {\r\n    const cloneCount = this.getCloneCount();\r\n\r\n    if ( cloneCount && options.gap ) {\r\n      const { orient } = this.Direction;\r\n      const { value, unit } = this.parseCssValue( options.gap );\r\n\r\n      if ( this.isFixedWidth( options ) ) {\r\n        return this.buildCssValue( orient( value * cloneCount ), unit );\r\n      }\r\n\r\n      const { perPage } = options;\r\n      const gaps = cloneCount / perPage;\r\n      return this.buildCssValue( orient( gaps * value ), unit );\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  /**\r\n   * Resolves the prop for the current direction and converts it into the Kebab case.\r\n   *\r\n   * @param prop - A property name to resolve.\r\n   *\r\n   * @return A resolved property name in the Kebab case.\r\n   */\r\n  private resolve( prop: string ): string {\r\n    return camelToKebab( this.Direction.resolve( prop ) );\r\n  }\r\n\r\n  /**\r\n   * Returns padding in the CSS format.\r\n   *\r\n   * @param options - Options.\r\n   * @param right   - Determines whether to get padding right or left.\r\n   *\r\n   * @return Padding in the CSS format.\r\n   */\r\n  private cssPadding( options: Options, right: boolean ): string {\r\n    const { padding } = options;\r\n    const prop = this.Direction.resolve( right ? 'right' : 'left', true );\r\n    return padding && unit( padding[ prop ] || ( isObject( padding ) ? 0 : padding ) ) || '0px';\r\n  }\r\n\r\n  /**\r\n   * Returns height of the track element in the CSS format.\r\n   *\r\n   * @param options - Options.\r\n   *\r\n   * @return Height in the CSS format.\r\n   */\r\n  private cssTrackHeight( options: Options ): string {\r\n    let height = '';\r\n\r\n    if ( this.isVertical() ) {\r\n      height = this.cssHeight( options );\r\n      assert( height, '\"height\" is missing.' );\r\n      height = `calc(${ height } - ${ this.cssPadding( options, false ) } - ${ this.cssPadding( options, true ) })`;\r\n    }\r\n\r\n    return height;\r\n  }\r\n\r\n  /**\r\n   * Returns height provided though options in the CSS format.\r\n   *\r\n   * @param options - Options.\r\n   *\r\n   * @return Height in the CSS format.\r\n   */\r\n  private cssHeight( options: Options ): string {\r\n    return unit( options.height );\r\n  }\r\n\r\n  /**\r\n   * Returns width of each slide in the CSS format.\r\n   *\r\n   * @param options - Options.\r\n   *\r\n   * @return Width in the CSS format.\r\n   */\r\n  private cssSlideWidth( options: Options ): string {\r\n    return options.autoWidth\r\n      ? ''\r\n      : unit( options.fixedWidth ) || ( this.isVertical() ? '' : this.cssSlideSize( options ) );\r\n  }\r\n\r\n  /**\r\n   * Returns height of each slide in the CSS format.\r\n   *\r\n   * @param options - Options.\r\n   *\r\n   * @return Height in the CSS format.\r\n   */\r\n  private cssSlideHeight( options: Options ): string {\r\n    return unit( options.fixedHeight )\r\n      || ( this.isVertical()\r\n        ? ( options.autoHeight ? '' : this.cssSlideSize( options ) )\r\n        : this.cssHeight( options )\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Returns width or height of each slide in the CSS format, considering the current direction.\r\n   *\r\n   * @param options - Options.\r\n   *\r\n   * @return Width or height in the CSS format.\r\n   */\r\n  private cssSlideSize( options: Options ): string {\r\n    const gap = unit( options.gap );\r\n    return `calc((100%${ gap && ` + ${ gap }` })/${ options.perPage || 1 }${ gap && ` - ${ gap }` })`;\r\n  }\r\n\r\n  /**\r\n   * Returns the aspectRatio value to simulate the `heightRatio` option.\r\n   *\r\n   * @param options - Options.\r\n   *\r\n   * @return aspectRatio in the CSS format.\r\n   */\r\n  private cssAspectRatio( options: Options ): string {\r\n    const { heightRatio } = options;\r\n    return heightRatio ? `${ 1 / heightRatio }` : '';\r\n  }\r\n\r\n  /**\r\n   * Builds the css value by the provided value and unit.\r\n   *\r\n   * @param value - A value.\r\n   * @param unit  - A CSS unit.\r\n   *\r\n   * @return A built value for a CSS value.\r\n   */\r\n  private buildCssValue( value: number, unit: string ): string {\r\n    return `${ value }${ unit }`;\r\n  }\r\n\r\n  /**\r\n   * Parses the CSS value into number and unit.\r\n   *\r\n   * @param value - A value to parse.\r\n   *\r\n   * @return An object with value and unit.\r\n   */\r\n  private parseCssValue( value: string | number ): { value: number, unit: string } {\r\n    if ( isString( value ) ) {\r\n      const number = parseFloat( value ) || 0;\r\n      const unit   = value.replace( /\\d*(\\.\\d*)?/, '' ) || 'px';\r\n      return { value: number, unit };\r\n    }\r\n\r\n    return { value, unit: 'px' };\r\n  }\r\n\r\n  /**\r\n   * Parses breakpoints and generate options for each breakpoint.\r\n   */\r\n  private parseBreakpoints(): void {\r\n    const { breakpoints } = this.options;\r\n\r\n    this.breakpoints.push( [ 'default', this.options ] );\r\n\r\n    if ( breakpoints ) {\r\n      forOwn( breakpoints, ( options, width ) => {\r\n        this.breakpoints.push( [ width, merge( merge( {}, this.options ), options ) ] );\r\n      } );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if the slide width is fixed or not.\r\n   *\r\n   * @return `true` if the slide width is fixed, or otherwise `false`.\r\n   */\r\n  private isFixedWidth( options: Options ): boolean {\r\n    return !! options[ this.Direction.resolve( 'fixedWidth' ) ];\r\n  }\r\n\r\n  /**\r\n   * Checks if the slider type is loop or not.\r\n   *\r\n   * @return `true` if the slider type is loop, or otherwise `false`.\r\n   */\r\n  private isLoop(): boolean {\r\n    return this.options.type === LOOP;\r\n  }\r\n\r\n  /**\r\n   * Checks if the active slide should be centered or not.\r\n   *\r\n   * @return `true` if the slide should be centered, or otherwise `false`.\r\n   */\r\n  private isCenter( options: Options ): boolean {\r\n    if( options.focus === 'center' ) {\r\n      if ( this.isLoop() ) {\r\n        return true;\r\n      }\r\n\r\n      if ( this.options.type === SLIDE ) {\r\n        return ! this.options.trimSpace;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Checks if the direction is TTB or not.\r\n   *\r\n   * @return `true` if the direction is TTB, or otherwise `false`.\r\n   */\r\n  private isVertical(): boolean {\r\n    return this.options.direction === TTB;\r\n  }\r\n\r\n  /**\r\n   * Builds classes of the root element.\r\n   *\r\n   * @return Classes for the root element as a single string.\r\n   */\r\n  private buildClasses(): string {\r\n    const { options } = this;\r\n\r\n    return [\r\n      CLASS_ROOT,\r\n      `${ CLASS_ROOT }--${ options.type }`,\r\n      `${ CLASS_ROOT }--${ options.direction }`,\r\n      options.drag && `${ CLASS_ROOT }--draggable`,\r\n      options.isNavigation && `${ CLASS_ROOT }--nav`,\r\n      CLASS_ACTIVE,\r\n      ! this.config.hidden && CLASS_RENDERED,\r\n    ].filter( Boolean ).join( ' ' );\r\n  }\r\n\r\n  /**\r\n   * Converts provided attributes into a single string.\r\n   *\r\n   * @param attrs - An object with attributes.\r\n   *\r\n   * @return A built string.\r\n   */\r\n  private buildAttrs( attrs: Record<string, string | number | boolean> ): string {\r\n    let attr = '';\r\n\r\n    forOwn( attrs, ( value, key ) => {\r\n      attr += value ? ` ${ camelToKebab( key ) }=\"${ value }\"` : '';\r\n    } );\r\n\r\n    return attr.trim();\r\n  }\r\n\r\n  /**\r\n   * Converts provided styles into a single string.\r\n   *\r\n   * @param styles - An object with styles.\r\n   *\r\n   * @return A built string.\r\n   */\r\n  private buildStyles( styles: Record<string, string | number> ): string {\r\n    let style = '';\r\n\r\n    forOwn( styles, ( value, key ) => {\r\n      style += ` ${ camelToKebab( key ) }:${ value };`;\r\n    } );\r\n\r\n    return style.trim();\r\n  }\r\n\r\n  /**\r\n   * Generates HTML of slides with inserting provided contents.\r\n   *\r\n   * @return The HTML for all slides and clones.\r\n   */\r\n  private renderSlides(): string {\r\n    const { slideTag: tag } = this.config;\r\n\r\n    return this.slides.map( content => {\r\n      return `<${ tag } ${ this.buildAttrs( content.attrs ) }>${ content.html || '' }</${ tag }>`;\r\n    } ).join( '' );\r\n  }\r\n\r\n  /**\r\n   * Add the `background` style for the cover mode.\r\n   *\r\n   * @param content - A slide content.\r\n   */\r\n  private cover( content: SlideContent ): void {\r\n    const { styles, html = '' } = content;\r\n\r\n    if ( this.options.cover && ! this.options.lazyLoad ) {\r\n      const src = html.match( /<img.*?src\\s*=\\s*(['\"])(.+?)\\1.*?>/ );\r\n\r\n      if ( src && src[ 2 ] ) {\r\n        styles.background = `center/cover no-repeat url('${ src[ 2 ] }')`;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates clones.\r\n   *\r\n   * @param contents - An array with SlideContent objects.\r\n   */\r\n  private generateClones( contents: SlideContent[] ): void {\r\n    const { classes } = this.options;\r\n    const count  = this.getCloneCount();\r\n    const slides = contents.slice();\r\n\r\n    while ( slides.length < count ) {\r\n      push( slides, slides );\r\n    }\r\n\r\n    push( slides.slice( -count ).reverse(), slides.slice( 0, count ) ).forEach( ( content, index ) => {\r\n      const attrs = assign( {}, content.attrs, { class: `${ content.attrs.class } ${ classes.clone }` } );\r\n      const clone = assign( {}, content, { attrs } );\r\n      index < count ? contents.unshift( clone ) : contents.push( clone );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Returns the number of clones to generate.\r\n   *\r\n   * @return A number of clones.\r\n   */\r\n  private getCloneCount(): number {\r\n    if ( this.isLoop() ) {\r\n      const { options } = this;\r\n\r\n      if ( options.clones ) {\r\n        return options.clones;\r\n      }\r\n\r\n      const perPage = max( ...this.breakpoints.map( ( [ , options ] ) => options.perPage ) );\r\n      return perPage * ( ( options.flickMaxPages || 1 ) + 1 );\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Generates arrows and the wrapper element.\r\n   *\r\n   * @return The HTML for arrows.\r\n   */\r\n  private renderArrows(): string {\r\n    let html = '';\r\n\r\n    html += `<div class=\"${ this.options.classes.arrows }\">`;\r\n    html += this.renderArrow( true );\r\n    html += this.renderArrow( false );\r\n    html += `</div>`;\r\n\r\n    return html;\r\n  }\r\n\r\n  /**\r\n   * Generates an arrow HTML.\r\n   * Some attributes are temporary, and Splide changes them after mount.\r\n   *\r\n   * @param prev - Options for each breakpoint.\r\n   *\r\n   * @return The HTML for the prev or next arrow.\r\n   */\r\n  private renderArrow( prev: boolean ): string {\r\n    const { classes, i18n } = this.options;\r\n    const attrs = {\r\n      class    : `${ classes.arrow } ${ prev ? classes.prev : classes.next }`,\r\n      type     : 'button',\r\n      ariaLabel: prev ? i18n.prev : i18n.next,\r\n    };\r\n\r\n    return `<button ${ this.buildAttrs( attrs ) }>`\r\n      +\t`<svg xmlns=\"${ XML_NAME_SPACE }\" viewBox=\"0 0 ${ SIZE } ${ SIZE }\" width=\"${ SIZE }\" height=\"${ SIZE }\">`\r\n      + `<path d=\"${ this.options.arrowPath || PATH }\" />`\r\n      + `</svg>`\r\n      + `</button>`;\r\n  }\r\n\r\n  /**\r\n   * Returns the HTML of the slider.\r\n   *\r\n   * @return The generated HTML.\r\n   */\r\n  html(): string {\r\n    const { rootClass, listTag, arrows, beforeTrack, afterTrack, slider, beforeSlider, afterSlider } = this.config;\r\n\r\n    let html = '';\r\n\r\n    html += `<div id=\"${ this.id }\" class=\"${ this.buildClasses() } ${ rootClass || '' }\">`;\r\n    html += `<style>${ this.Style.build() }</style>`;\r\n\r\n    if ( slider ) {\r\n      html += beforeSlider || '';\r\n      html += `<div class=\"splide__slider\">`;\r\n    }\r\n\r\n    html += beforeTrack || '';\r\n\r\n    if ( arrows ) {\r\n      html += this.renderArrows();\r\n    }\r\n\r\n    html += `<div class=\"splide__track\">`;\r\n    html += `<${ listTag } class=\"splide__list\">`;\r\n\r\n    html += this.renderSlides();\r\n\r\n    html += `</${ listTag }>`;\r\n    html += `</div>`; // .track\r\n\r\n    html += afterTrack || '';\r\n\r\n    if ( slider ) {\r\n      html += `</div>`;\r\n      html += afterSlider || '';\r\n    }\r\n\r\n    html += `</div>`; // .splide\r\n\r\n    return html;\r\n  }\r\n}\r\n","import { slice } from '../../arrayLike';\r\n\r\n\r\n/**\r\n * Returns elements that match the provided selector.\r\n *\r\n * @param parent   - A parent element to start searching from.\r\n * @param selector - A selector to query.\r\n *\r\n * @return An array with matched elements.\r\n */\r\nexport function queryAll<E extends Element = Element>( parent: Element | Document, selector?: string ): E[] {\r\n  return selector ? slice<E>( parent.querySelectorAll( selector ) ) : [];\r\n}\r\n","export const EVENT_MOUNTED            = 'mounted';\r\nexport const EVENT_READY              = 'ready';\r\nexport const EVENT_MOVE               = 'move';\r\nexport const EVENT_MOVED              = 'moved';\r\nexport const EVENT_CLICK              = 'click';\r\nexport const EVENT_ACTIVE             = 'active';\r\nexport const EVENT_INACTIVE           = 'inactive';\r\nexport const EVENT_VISIBLE            = 'visible';\r\nexport const EVENT_HIDDEN             = 'hidden';\r\nexport const EVENT_REFRESH            = 'refresh';\r\nexport const EVENT_UPDATED            = 'updated';\r\nexport const EVENT_RESIZE             = 'resize';\r\nexport const EVENT_RESIZED            = 'resized';\r\nexport const EVENT_DRAG               = 'drag';\r\nexport const EVENT_DRAGGING           = 'dragging';\r\nexport const EVENT_DRAGGED            = 'dragged';\r\nexport const EVENT_SCROLL             = 'scroll';\r\nexport const EVENT_SCROLLED           = 'scrolled';\r\nexport const EVENT_OVERFLOW           = 'overflow';\r\nexport const EVENT_DESTROY            = 'destroy';\r\nexport const EVENT_ARROWS_MOUNTED     = 'arrows:mounted';\r\nexport const EVENT_ARROWS_UPDATED     = 'arrows:updated';\r\nexport const EVENT_PAGINATION_MOUNTED = 'pagination:mounted';\r\nexport const EVENT_PAGINATION_UPDATED = 'pagination:updated';\r\nexport const EVENT_NAVIGATION_MOUNTED = 'navigation:mounted';\r\nexport const EVENT_AUTOPLAY_PLAY      = 'autoplay:play';\r\nexport const EVENT_AUTOPLAY_PLAYING   = 'autoplay:playing';\r\nexport const EVENT_AUTOPLAY_PAUSE     = 'autoplay:pause';\r\nexport const EVENT_LAZYLOAD_LOADED    = 'lazyload:loaded';\r\n\r\n/** @internal */\r\nexport const EVENT_SLIDE_KEYDOWN     = 'sk';\r\nexport const EVENT_SHIFTED           = 'sh';\r\nexport const EVENT_END_INDEX_CHANGED = 'ei';\r\n","/**\r\n * Pads the number with 0.\r\n *\r\n * @param number - A number to pad.\r\n *\r\n * @return string - Padded number.\r\n */\r\nexport function pad( number: number ): string {\r\n  return number < 10 ? `0${ number }` : `${ number }`;\r\n}\r\n","/**\r\n * The type for the regular slider.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const SLIDE = 'slide';\r\n\r\n/**\r\n * The type for the carousel slider.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const LOOP = 'loop';\r\n\r\n/**\r\n * The type for the fade slider that can not have multiple slides in a page.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const FADE = 'fade';\r\n","/**\r\n * The namespace for SVG elements.\r\n */\r\nexport const XML_NAME_SPACE = 'http://www.w3.org/2000/svg';\r\n\r\n/**\r\n * The arrow path.\r\n */\r\nexport const PATH = 'm15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z';\r\n\r\n/**\r\n * SVG width and height.\r\n */\r\nexport const SIZE = 40;\r\n"],"names":["ORIENTATION_MAP","width","left","right","x","X","Y","ArrowLeft","ArrowRight","Direction","Splide","Components","options","resolve","prop","axisOnly","direction","index","replace","match","offset","replacement","toLowerCase","charAt","toUpperCase","slice","orient","value","PROJECT_CODE","CLASS_PREFIX","CLASS_ROOT","CLASS_SLIDE","CLASS_CLONE","CLASS_ARROW","CLASS_PAGINATION","CLASS_ACTIVE","DEFAULTS","type","role","speed","perPage","cloneStatus","arrows","pagination","paginationKeyboard","interval","pauseOnHover","pauseOnFocus","resetProgress","easing","drag","trimSpace","focusableNodes","live","classes","slide","clone","arrow","prev","next","page","spinner","i18n","first","last","slideX","pageX","play","pause","carousel","select","slideLabel","reducedMotion","rewindSpeed","autoplay","arrayLike","start","end","Array","prototype","call","apply","func","bind","arguments","typeOf","subject","isObject","isArray","isString","toArray","push","array","items","matches","elm","selector","ownerDocument","defaultView","window","HTMLElement","e","child","parent","children","filter","firstElementChild","ownKeys","Object","keys","forOwn","object","iteratee","reverse","forEach","key","assign","source","merge","remove","nodes","node","parentNode","removeChild","unit","assert","condition","message","Error","max","Math","camelToKebab","string","ids","RENDERER_DEFAULT_CONFIG","listTag","slideTag","Style","styles","id","constructor","this","rule","breakpoint","selectors","build","let","css","default","buildSelectors","sort","n","m","mediaQuery","trim","clean","splide","on","event","root","clones","querySelectorAll","contents","slides","config","breakpoints","defaults","prefix","number","length","init","parseBreakpoints","initSlides","registerRootStyles","registerTrackStyles","registerSlideStyles","registerListStyles","map","content","html","attrs","cover","class","style","buildStyles","isLoop","generateClones","cssPadding","cssTrackHeight","buildTranslate","cssSlideHeight","cssAspectRatio","cssSlideWidth","gap","values","cssOffsetClones","cssOffsetGaps","isCenter","buildCssValue","cssOffsetCenter","Boolean","join","percent","cloneCount","getCloneCount","isFixedWidth","parseCssValue","padding","height","isVertical","cssHeight","autoWidth","fixedWidth","cssSlideSize","fixedHeight","autoHeight","heightRatio","parseFloat","focus","buildClasses","isNavigation","hidden","buildAttrs","attr","renderSlides","tag","lazyLoad","src","background","count","unshift","flickMaxPages","renderArrows","renderArrow","ariaLabel","arrowPath","rootClass","beforeTrack","afterTrack","slider","beforeSlider","afterSlider"],"mappings":"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"}