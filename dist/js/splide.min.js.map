{"version":3,"file":"splide.min.js","sources":["../../src/js/constants/media.ts","../../src/js/constants/states.ts","../../../utils/dist/splide-utils.esm.js","../../src/js/constants/events.ts","../../src/js/components/Breakpoints/Breakpoints.ts","../../src/js/constants/arrows.ts","../../src/js/constants/directions.ts","../../src/js/components/Direction/Direction.ts","../../src/js/constants/attributes.ts","../../src/js/constants/project.ts","../../src/js/constants/classes.ts","../../src/js/utils/error/assert/assert.ts","../../src/js/components/Drag/constants.ts","../../src/js/constants/types.ts","../../src/js/components/Slides/Slide.ts","../../src/js/components/Autoplay/constants.ts","../../src/js/constants/listener-options.ts","../../src/js/components/LazyLoad/constants.ts","../../src/js/components/Sync/Sync.ts","../../src/js/components/index.ts","../../src/js/components/Elements/Elements.ts","../../src/js/components/Slides/Slides.ts","../../src/js/components/Layout/Layout.ts","../../src/js/components/Clones/Clones.ts","../../src/js/components/Move/Move.ts","../../src/js/components/Scroll/Scroll.ts","../../src/js/components/Scroll/constants.ts","../../src/js/components/Controller/Controller.ts","../../src/js/components/Arrows/Arrows.ts","../../src/js/components/Arrows/path.ts","../../src/js/components/Autoplay/Autoplay.ts","../../src/js/components/Drag/Drag.ts","../../src/js/components/Keyboard/Keyboard.ts","../../src/js/components/LazyLoad/LazyLoad.ts","../../src/js/components/Pagination/Pagination.ts","../../src/js/components/Wheel/Wheel.ts","../../src/js/components/Live/Live.ts","../../src/js/constants/defaults.ts","../../src/js/constants/i18n.ts","../../src/js/transitions/Fade/Fade.ts","../../src/js/transitions/Slide/Slide.ts","../../src/js/core/Splide/Splide.ts"],"sourcesContent":["/**\r\n * Matches when users request reducing non-essential animations.\r\n *\r\n * @link https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion\r\n */\r\nexport const MEDIA_PREFERS_REDUCED_MOTION = '(prefers-reduced-motion: reduce)';","/**\r\n * Splide has been just created.\r\n */\r\nexport const CREATED = 1;\r\n\r\n/**\r\n * Splide has mounted components.\r\n */\r\nexport const MOUNTED = 2;\r\n\r\n/**\r\n * Splide is ready.\r\n */\r\nexport const IDLE = 3;\r\n\r\n/**\r\n * Splide is moving.\r\n */\r\nexport const MOVING = 4;\r\n\r\n/**\r\n * Splide is moving.\r\n */\r\nexport const SCROLLING = 5;\r\n\r\n/**\r\n * The user is dragging the slider.\r\n */\r\nexport const DRAGGING = 6;\r\n\r\n/**\r\n * Splide has been destroyed.\r\n */\r\nexport const DESTROYED = 7;\r\n\r\n/**\r\n * The collection of all states.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const STATES = {\r\n  CREATED,\r\n  MOUNTED,\r\n  IDLE,\r\n  MOVING,\r\n  SCROLLING,\r\n  DRAGGING,\r\n  DESTROYED,\r\n};\r\n","function empty(array) {\n  array.length = 0;\n}\nfunction apply(func, ...args) {\n  return func.bind(null, ...args);\n}\nconst nextTick = setTimeout;\nconst noop = () => {\n};\nfunction raf(func) {\n  return requestAnimationFrame(func);\n}\nfunction typeOf(type, subject) {\n  return typeof subject === type;\n}\nfunction isObject(subject) {\n  return !isNull(subject) && typeOf(\"object\", subject);\n}\nconst isArray = Array.isArray;\nconst isFunction = apply(typeOf, \"function\");\nconst isString = apply(typeOf, \"string\");\nconst isBoolean = apply(typeOf, \"boolean\");\nconst isUndefined = apply(typeOf, \"undefined\");\nfunction isNull(subject) {\n  return subject === null;\n}\nfunction isHTMLElement(subject) {\n  try {\n    return subject instanceof (subject.ownerDocument.defaultView || window).HTMLElement;\n  } catch (e) {\n    return false;\n  }\n}\nfunction toArray(value) {\n  return isArray(value) ? value : [value];\n}\nfunction forEach(values, iteratee) {\n  toArray(values).forEach(iteratee);\n}\nfunction push(array, items) {\n  array.push(...toArray(items));\n  return array;\n}\nconst arrayProto = Array.prototype;\nfunction slice(arrayLike, start, end) {\n  return arrayProto.slice.call(arrayLike, start, end);\n}\nfunction includes(arrayLike, value) {\n  return arrayProto.includes.call(arrayLike, value);\n}\nfunction find(arrayLike, predicate) {\n  return arrayProto.find.call(arrayLike, predicate);\n}\nfunction toggleClass(elm, classes, force) {\n  if (elm) {\n    forEach(isString(classes) ? classes.split(\" \") : classes, (className) => {\n      className && elm.classList.toggle(className, force);\n    });\n  }\n}\nfunction addClass(elm, classes) {\n  toggleClass(elm, classes, true);\n}\nfunction append(parent, ...children2) {\n  parent && parent.append(...children2);\n}\nfunction before(ref, ...nodes) {\n  ref && ref.before(...nodes);\n}\nfunction matches(elm, selector) {\n  return isHTMLElement(elm) && elm.matches(selector);\n}\nfunction children(parent, selector) {\n  const children2 = parent ? slice(parent.children) : [];\n  return selector ? children2.filter((child2) => matches(child2, selector)) : children2;\n}\nfunction child(parent, selector) {\n  return selector ? children(parent, selector)[0] : parent.firstElementChild;\n}\nfunction closest(from, selector) {\n  return from.closest(selector);\n}\nconst assign = Object.assign;\nconst ownKeys = Object.keys;\nfunction forOwn(object, iteratee, right) {\n  if (object) {\n    (right ? ownKeys(object).reverse() : ownKeys(object)).forEach((key) => {\n      key !== \"__proto__\" && iteratee(object[key], key);\n    });\n  }\n  return object;\n}\nfunction merge(object, ...sources) {\n  sources.forEach((source) => {\n    forOwn(source, (value, key) => {\n      if (isArray(value)) {\n        value = value.slice();\n      } else if (isObject(value)) {\n        value = merge({}, isObject(object[key]) ? object[key] : {}, value);\n      }\n      object[key] = value;\n    });\n  });\n  return object;\n}\nfunction omit(object, keys) {\n  forEach(keys || ownKeys(object), (key) => {\n    delete object[key];\n  });\n  return object;\n}\nfunction removeAttribute(elms, attrs) {\n  forEach(elms, (elm) => {\n    forEach(attrs, (attr) => {\n      elm && elm.removeAttribute(attr);\n    });\n  });\n}\nfunction setAttribute(elms, attrs, value) {\n  if (isObject(attrs)) {\n    forOwn(attrs, (value2, name) => {\n      setAttribute(elms, name, value2);\n    });\n  } else {\n    forEach(elms, (elm) => {\n      isNull(value) || value === \"\" ? removeAttribute(elm, attrs) : elm.setAttribute(attrs, String(value));\n    });\n  }\n}\nfunction create(tag2, attrs, parent) {\n  const elm = document.createElement(tag2);\n  if (attrs) {\n    isString(attrs) ? addClass(elm, attrs) : setAttribute(elm, attrs);\n  }\n  parent && append(parent, elm);\n  return elm;\n}\nfunction style(elm, prop, value) {\n  if (isUndefined(value)) {\n    return getComputedStyle(elm)[prop];\n  }\n  if (!isNull(value)) {\n    elm.style[prop] = `${value}`;\n  }\n}\nfunction display(elm, display2) {\n  style(elm, \"display\", display2);\n}\nfunction focus(elm) {\n  isHTMLElement(elm) && elm.focus({ preventScroll: true });\n}\nfunction getAttribute(elm, attr) {\n  return elm.getAttribute(attr);\n}\nfunction hasClass(elm, className) {\n  return !!elm && elm.classList.contains(className);\n}\nfunction rect(target) {\n  return target.getBoundingClientRect();\n}\nfunction removeNode(nodes) {\n  forEach(nodes, (node) => {\n    if (node && node.parentNode) {\n      node.parentNode.removeChild(node);\n    }\n  });\n}\nfunction measure(parent, value) {\n  if (isString(value)) {\n    const div2 = create(\"div\", { style: `width: ${value}; position: absolute;` }, parent);\n    value = rect(div2).width;\n    removeNode(div2);\n  }\n  return value;\n}\nfunction parseHtml(html) {\n  return child(new DOMParser().parseFromString(html, \"text/html\").body);\n}\nfunction prevent(e, stopPropagation) {\n  e.preventDefault();\n  if (stopPropagation) {\n    e.stopPropagation();\n    e.stopImmediatePropagation();\n  }\n}\nfunction query(parent, selector) {\n  return parent && parent.querySelector(selector);\n}\nfunction queryAll(parent, selector) {\n  return selector && parent ? slice(parent.querySelectorAll(selector)) : [];\n}\nfunction removeClass(elm, classes) {\n  toggleClass(elm, classes, false);\n}\nfunction timeOf(e) {\n  return e.timeStamp;\n}\nfunction unit(value) {\n  return isString(value) ? value : value ? `${value}px` : \"\";\n}\nfunction buildAttrs(attrs) {\n  let result = \"\";\n  forOwn(attrs, (value, key) => {\n    result += value || value === 0 ? ` ${key}${value !== true ? `=\"${value}\"` : \"\"}` : \"\";\n  });\n  return result.trim();\n}\nfunction classNames(...args) {\n  return args.reduce((classes, value) => {\n    return `${classes} ${isArray(value) ? classNames(...value) : value || \"\"}`.trim();\n  }, \"\");\n}\nfunction tag(tag2, attrs) {\n  attrs = isArray(attrs) || !isObject(attrs) ? { class: classNames(attrs) } : attrs;\n  return `<${`${tag2} ${attrs ? buildAttrs(attrs) : \"\"}`.trim()}>`;\n}\nfunction div(attrs) {\n  return tag(\"div\", attrs);\n}\nconst { min, max, floor, ceil, abs, sign } = Math;\nfunction approximatelyEqual(x, y, epsilon) {\n  return abs(x - y) < epsilon;\n}\nfunction between(number, x, y, exclusive) {\n  const minimum = min(x, y);\n  const maximum = max(x, y);\n  return exclusive ? minimum < number && number < maximum : minimum <= number && number <= maximum;\n}\nfunction clamp(number, x, y) {\n  const minimum = min(x, y);\n  const maximum = max(x, y);\n  return min(max(minimum, number), maximum);\n}\nfunction camelToKebab(string) {\n  return string.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\nfunction format(string, ...replacements) {\n  return replacements.reduce((prev, curr) => prev.replace(\"%s\", `${curr}`), string);\n}\nfunction pad(number, length = 2) {\n  return `${number}`.padStart(length, \"0\");\n}\nconst ids = {};\nfunction uniqueId(prefix) {\n  return `${prefix}${pad(ids[prefix] = (ids[prefix] || 0) + 1)}`;\n}\nfunction forEachEvent(events, iteratee) {\n  forEach(events, (event) => {\n    isString(event) && event.split(\" \").forEach(iteratee);\n  });\n}\nfunction arrayRemove(array, predicate) {\n  const removed = [];\n  for (let i = array.length - 1; i >= 0; i--) {\n    if (predicate(array[i])) {\n      removed.push(...array.splice(i, 1));\n    }\n  }\n  return removed;\n}\nfunction EventBinder(removersRef) {\n  const removers = removersRef || [];\n  const key = removersRef ? {} : void 0;\n  function bind(target, events, callback, options) {\n    forEachEvent(events, (event) => {\n      target.addEventListener(event, callback, options);\n      removers.push([target.removeEventListener.bind(target, event, callback, options), key]);\n    });\n  }\n  function destroy() {\n    if (key) {\n      arrayRemove(removers, (remover) => remover[1] === key).forEach((remover) => {\n        remover[0]();\n      });\n    } else {\n      removers.forEach((remover) => {\n        remover[0]();\n      });\n      empty(removers);\n    }\n  }\n  return {\n    bind,\n    create: apply(EventBinder, removers),\n    destroy\n  };\n}\nfunction EventBus(listenersRef) {\n  const listeners = listenersRef || [];\n  const key = listenersRef ? {} : void 0;\n  function on(events, callback) {\n    forEachEvent(events, (event) => {\n      listeners.push([event, callback, key]);\n    });\n  }\n  function off(events, callback) {\n    forEachEvent(events, (event) => {\n      arrayRemove(listeners, (listener) => {\n        return listener[0] === event && (!callback || listener[1] === callback) && listener[2] === key;\n      }).forEach(empty);\n    });\n  }\n  function emit(event, ...args) {\n    listeners.slice().forEach((listener) => {\n      listener[0] === event && listener[1](...args);\n    });\n  }\n  function destroy() {\n    if (key) {\n      arrayRemove(listeners, (listener) => listener[2] === key).forEach(empty);\n    } else {\n      listeners.forEach(empty);\n      empty(listeners);\n    }\n  }\n  return {\n    on,\n    off,\n    emit,\n    create: apply(EventBus, listeners),\n    destroy\n  };\n}\nfunction EventInterface(binder = EventBinder(), bus = EventBus()) {\n  function create2() {\n    return EventInterface(binder.create(), bus.create());\n  }\n  function destroy() {\n    binder.destroy();\n    bus.destroy();\n  }\n  return assign({}, binder, bus, { create: create2, destroy });\n}\nfunction RequestInterval(interval, onInterval, onUpdate, limit) {\n  const { now } = Date;\n  let startTime;\n  let rate = 0;\n  let id;\n  let paused = true;\n  let count = 0;\n  function update() {\n    if (!paused) {\n      rate = interval ? min((now() - startTime) / interval, 1) : 1;\n      onUpdate && onUpdate(rate);\n      if (rate >= 1) {\n        onInterval();\n        startTime = now();\n        if (limit && ++count >= limit) {\n          return pause();\n        }\n      }\n      id = raf(update);\n    }\n  }\n  function start(resume) {\n    resume || cancel();\n    startTime = now() - (resume ? rate * interval : 0);\n    paused = false;\n    id = raf(update);\n  }\n  function pause() {\n    paused = true;\n  }\n  function rewind() {\n    startTime = now();\n    rate = 0;\n    if (onUpdate) {\n      onUpdate(rate);\n    }\n  }\n  function cancel() {\n    id && cancelAnimationFrame(id);\n    rate = 0;\n    id = 0;\n    paused = true;\n  }\n  function set(time) {\n    interval = time;\n  }\n  function isPaused() {\n    return paused;\n  }\n  return {\n    start,\n    rewind,\n    pause,\n    cancel,\n    set,\n    isPaused\n  };\n}\nfunction State(initialState) {\n  let state = initialState;\n  function set(value) {\n    state = value;\n  }\n  function is(states) {\n    return includes(toArray(states), state);\n  }\n  return { set, is };\n}\nfunction Throttle(func, duration) {\n  const interval = RequestInterval(duration || 0, func, void 0, 1);\n  return () => {\n    interval.isPaused() && interval.start();\n  };\n}\nexport {\n  EventBinder,\n  EventBus,\n  EventInterface,\n  RequestInterval,\n  State,\n  Throttle,\n  abs,\n  addClass,\n  append,\n  apply,\n  approximatelyEqual,\n  assign,\n  before,\n  between,\n  buildAttrs,\n  camelToKebab,\n  ceil,\n  child,\n  children,\n  clamp,\n  classNames,\n  closest,\n  create,\n  display,\n  div,\n  empty,\n  find,\n  floor,\n  focus,\n  forEach,\n  forOwn,\n  format,\n  getAttribute,\n  hasClass,\n  includes,\n  isArray,\n  isBoolean,\n  isFunction,\n  isHTMLElement,\n  isNull,\n  isObject,\n  isString,\n  isUndefined,\n  matches,\n  max,\n  measure,\n  merge,\n  min,\n  nextTick,\n  noop,\n  omit,\n  ownKeys,\n  pad,\n  parseHtml,\n  prevent,\n  push,\n  query,\n  queryAll,\n  raf,\n  rect,\n  removeAttribute,\n  removeClass,\n  removeNode,\n  setAttribute,\n  sign,\n  slice,\n  style,\n  tag,\n  timeOf,\n  toArray,\n  toggleClass,\n  uniqueId,\n  unit\n};\n","export const EVENT_MOUNTED            = 'mounted';\r\nexport const EVENT_READY              = 'ready';\r\nexport const EVENT_MOVE               = 'move';\r\nexport const EVENT_MOVED              = 'moved';\r\nexport const EVENT_CLICK              = 'click';\r\nexport const EVENT_ACTIVE             = 'active';\r\nexport const EVENT_INACTIVE           = 'inactive';\r\nexport const EVENT_VISIBLE            = 'visible';\r\nexport const EVENT_HIDDEN             = 'hidden';\r\nexport const EVENT_REFRESH            = 'refresh';\r\nexport const EVENT_UPDATED            = 'updated';\r\nexport const EVENT_RESIZE             = 'resize';\r\nexport const EVENT_RESIZED            = 'resized';\r\nexport const EVENT_DRAG               = 'drag';\r\nexport const EVENT_DRAGGING           = 'dragging';\r\nexport const EVENT_DRAGGED            = 'dragged';\r\nexport const EVENT_SCROLL             = 'scroll';\r\nexport const EVENT_SCROLLING          = 'scrolling';\r\nexport const EVENT_SCROLLED           = 'scrolled';\r\nexport const EVENT_OVERFLOW           = 'overflow';\r\nexport const EVENT_DESTROY            = 'destroy';\r\nexport const EVENT_ARROWS_MOUNTED     = 'arrows:mounted';\r\nexport const EVENT_ARROWS_UPDATED     = 'arrows:updated';\r\nexport const EVENT_PAGINATION_MOUNTED = 'pagination:mounted';\r\nexport const EVENT_PAGINATION_UPDATED = 'pagination:updated';\r\nexport const EVENT_NAVIGATION_MOUNTED = 'navigation:mounted';\r\nexport const EVENT_AUTOPLAY_PLAY      = 'autoplay:play';\r\nexport const EVENT_AUTOPLAY_PLAYING   = 'autoplay:playing';\r\nexport const EVENT_AUTOPLAY_PAUSE     = 'autoplay:pause';\r\nexport const EVENT_LAZYLOAD_LOADED    = 'lazyload:loaded';\r\nexport const EVENT_LAZYLOAD_ERROR     = 'lazyload:error';\r\n\r\n/** @internal */\r\nexport const EVENT_SLIDE_KEYDOWN     = '_sk';\r\nexport const EVENT_SHIFTED           = '_sh';\r\nexport const EVENT_END_INDEX_CHANGED = '_ei';\r\n","import { MEDIA_PREFERS_REDUCED_MOTION } from '../../constants/media';\r\nimport { CREATED, DESTROYED } from '../../constants/states';\r\nimport { EventBinder, merge, omit, ownKeys } from '@splidejs/utils';\r\nimport { BaseComponent, ComponentConstructor, Options } from '../../types';\r\nimport { EVENT_OVERFLOW, EVENT_UPDATED } from '../../constants/events';\r\n\r\n\r\n/**\r\n * The interface for the Media component.\r\n *\r\n * @since 4.0.0\r\n */\r\nexport interface BreakpointsComponent extends BaseComponent {\r\n  /** @internal */\r\n  reduce( reduced: boolean ): void;\r\n  set( options: Options, base?: boolean, notify?: boolean ): void;\r\n}\r\n\r\n/**\r\n * The special breakpoints key when the number of slides are not enough for the list.\r\n *\r\n * @since 5.0.0\r\n */\r\nconst NOT_OVERFLOW_KEY = '!overflow';\r\n\r\n/**\r\n * The component for observing media queries and updating options if necessary.\r\n * This used to be the Options component.\r\n *\r\n * @since 4.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Media component object.\r\n */\r\nexport const Breakpoints: ComponentConstructor<BreakpointsComponent> = ( Splide, Components, options, event ) => {\r\n  const { state } = Splide;\r\n  const breakpoints   = options.breakpoints || {};\r\n  const reducedMotion = options.reducedMotion || {};\r\n  const binder        = EventBinder();\r\n\r\n  /**\r\n   * Stores options and a predicate function.\r\n   */\r\n  const entries: Array<[ Options, () => boolean ]> = [];\r\n\r\n  /**\r\n   * Called when the component is constructed.\r\n   */\r\n  function setup(): void {\r\n    const isMin = options.mediaQuery === 'min';\r\n\r\n    ownKeys( breakpoints )\r\n      .sort( ( n, m ) => isMin ? +n - +m : +m - +n )\r\n      .forEach( key => {\r\n        if ( key !== NOT_OVERFLOW_KEY ) {\r\n          register( breakpoints[ key ], `(${ isMin ? 'min' : 'max' }-width:${ key }px)` );\r\n        }\r\n      } );\r\n\r\n    if ( breakpoints[ NOT_OVERFLOW_KEY ] ) {\r\n      entries.push( [ breakpoints[ NOT_OVERFLOW_KEY ], () => Components.Layout && ! Components.Layout.isOverflow() ] );\r\n      event.on( EVENT_OVERFLOW, update );\r\n    }\r\n\r\n    register( reducedMotion, MEDIA_PREFERS_REDUCED_MOTION );\r\n    update();\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   *\r\n   * @param completely - Will be `true` for complete destruction.\r\n   */\r\n  function destroy( completely: boolean ): void {\r\n    if ( completely ) {\r\n      binder.destroy();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registers entries as `[ Options, media query string ]`.\r\n   *\r\n   * @param options - Options merged to current options when the document matches the query.\r\n   * @param query   - A query string.\r\n   */\r\n  function register( options: Options, query: string ): void {\r\n    const queryList = matchMedia( query );\r\n    binder.bind( queryList, 'change', update );\r\n    entries.push( [ options,  () => queryList.matches ] );\r\n  }\r\n\r\n  /**\r\n   * Checks all media queries in entries and updates options.\r\n   */\r\n  function update(): void {\r\n    const destroyed = state.is( DESTROYED );\r\n    const direction = options.direction;\r\n    const merged = entries.reduce<Options>( ( merged, entry ) => {\r\n      return merge( merged, entry[ 1 ]() ? entry[ 0 ] : {} );\r\n    }, {} );\r\n\r\n    omit( options );\r\n    set( merged, false, ! state.is( CREATED ) );\r\n\r\n    if ( options.destroy ) {\r\n      Splide.destroy( options.destroy === 'completely' );\r\n    } else if ( destroyed ) {\r\n      destroy( true );\r\n      Splide.mount();\r\n    } else {\r\n      direction !== options.direction && Splide.refresh();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disables or enables `reducedMotion` options.\r\n   * This method does nothing when the document does not match the query.\r\n   *\r\n   * @internal\r\n   *\r\n   * @param enable - Determines whether to apply `reducedMotion` options or not.\r\n   */\r\n  function reduce( enable: boolean ): void {\r\n    if ( matchMedia( MEDIA_PREFERS_REDUCED_MOTION ).matches ) {\r\n      enable ? merge( options, reducedMotion ) : omit( options, ownKeys( reducedMotion ) );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets current options or base options (prototype).\r\n   * If changing base options, always emits the `updated` event.\r\n   *\r\n   * @internal\r\n   *\r\n   * @param opts   - New options.\r\n   * @param base   - Optional. Determines whether to also update base options or not.\r\n   * @param notify - Optional. If `true`, emits the `update` event.\r\n   */\r\n  function set( opts: Options, base?: boolean, notify?: boolean ): void {\r\n    merge( options, opts );\r\n    base && merge( Object.getPrototypeOf( options ), opts );\r\n\r\n    if ( notify ) {\r\n      Splide.emit( EVENT_UPDATED, options );\r\n    }\r\n  }\r\n\r\n  return {\r\n    setup,\r\n    destroy,\r\n    reduce,\r\n    set,\r\n  };\r\n};\r\n","const ARROW = 'Arrow';\r\nexport const ARROW_LEFT  = `${ ARROW }Left`;\r\nexport const ARROW_RIGHT = `${ ARROW }Right`;\r\nexport const ARROW_UP    = `${ ARROW }Up`;\r\nexport const ARROW_DOWN  = `${ ARROW }Down`;","/**\r\n * Enumerates slides from left to right.\r\n */\r\nexport const LTR = 'ltr';\r\n\r\n/**\r\n * Enumerates slides from right to left.\r\n */\r\nexport const RTL = 'rtl';\r\n\r\n/**\r\n * Enumerates slides in a col.\r\n */\r\nexport const TTB = 'ttb';\r\n","import { ARROW_DOWN, ARROW_LEFT, ARROW_RIGHT, ARROW_UP } from '../../constants/arrows';\r\nimport { RTL, TTB } from '../../constants/directions';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, ComponentConstructor, Components, Options } from '../../types';\r\nimport { apply } from '../../../../../utils';\r\n\r\n\r\n/**\r\n * The interface for the Direction component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface DirectionComponent extends BaseComponent {\r\n  resolve<K extends keyof typeof ORIENTATION_MAP>( prop: K, axisOnly?: boolean, direction?: Options['direction'] ): typeof ORIENTATION_MAP[ K ][ number ] | K;\r\n  resolve<R extends string>( prop: R, axisOnly?: boolean, direction?: Options['direction'] ): R;\r\n\r\n  orient( value: number ): number;\r\n  left(): string;\r\n  right(): string;\r\n  width(): string;\r\n}\r\n\r\n/**\r\n * The translation map for directions.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const ORIENTATION_MAP = {\r\n  width     : [ 'height' ],\r\n  left      : [ 'top', 'right' ],\r\n  right     : [ 'bottom', 'left' ],\r\n  x         : [ 'y' ],\r\n  X         : [ 'Y' ],\r\n  Y         : [ 'X' ],\r\n  ArrowLeft : [ ARROW_UP, ARROW_RIGHT ],\r\n  ArrowRight: [ ARROW_DOWN, ARROW_LEFT ],\r\n} as const;\r\n\r\n/**\r\n * The component that absorbs the difference among directions.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Direction component object.\r\n */\r\nexport const Direction: ComponentConstructor<DirectionComponent> = ( Splide: Splide, Components: Components, options: Options ) => {\r\n  /**\r\n   * Resolves the provided property name.\r\n   *\r\n   * @param prop      - A property name to translate.\r\n   * @param axisOnly  - Optional. If `ture`, returns the same property for LTR and RTL.\r\n   * @param direction - Optional. Specify the direction. The default value is the `direction` option.\r\n   */\r\n  function resolve(\r\n    prop: string,\r\n    axisOnly?: boolean,\r\n    direction: Options[ 'direction' ] = options.direction\r\n  ): string {\r\n    const index = direction === RTL && ! axisOnly ? 1 : direction === TTB ? 0 : -1;\r\n\r\n    return ORIENTATION_MAP[ prop ] && ORIENTATION_MAP[ prop ][ index ]\r\n      || prop.replace( /width|left|right/i, ( match, offset ) => {\r\n        const replacement = ORIENTATION_MAP[ match.toLowerCase() ][ index ] || match;\r\n        return offset > 0 ? replacement.charAt( 0 ).toUpperCase() + replacement.slice( 1 ) : replacement;\r\n      } );\r\n  }\r\n\r\n  /**\r\n   * Orients the value towards the current direction.\r\n   *\r\n   * @param value     - A value to orient.\r\n   * @param direction - Optional. Specify the direction. The default value is the `direction` option.\r\n   *\r\n   * @return The oriented value.\r\n   */\r\n  function orient( value: number, direction: Options[ 'direction' ] = options.direction ): number {\r\n    return value * ( direction === RTL ? 1 : -1 );\r\n  }\r\n\r\n  return {\r\n    resolve,\r\n    orient,\r\n    left: apply( resolve, 'left' ),\r\n    right: apply( resolve, 'right' ),\r\n    width: apply( resolve, 'width' ),\r\n  };\r\n};\r\n","export const ROLE      = 'role';\r\nexport const TAB_INDEX = 'tabindex';\r\nexport const DISABLED  = 'disabled';\r\n\r\nexport const ARIA_PREFIX          = 'aria-';\r\nexport const ARIA_CONTROLS        = `${ ARIA_PREFIX }controls`;\r\nexport const ARIA_CURRENT         = `${ ARIA_PREFIX }current`;\r\nexport const ARIA_SELECTED        = `${ ARIA_PREFIX }selected`;\r\nexport const ARIA_LABEL           = `${ ARIA_PREFIX }label`;\r\nexport const ARIA_LABELLEDBY      = `${ ARIA_PREFIX }labelledby`;\r\nexport const ARIA_HIDDEN          = `${ ARIA_PREFIX }hidden`;\r\nexport const ARIA_ORIENTATION     = `${ ARIA_PREFIX }orientation`;\r\nexport const ARIA_ROLEDESCRIPTION = `${ ARIA_PREFIX }roledescription`;\r\nexport const ARIA_LIVE            = `${ ARIA_PREFIX }live`;\r\nexport const ARIA_BUSY            = `${ ARIA_PREFIX }busy`;\r\nexport const ARIA_ATOMIC          = `${ ARIA_PREFIX }atomic`;\r\n\r\n/**\r\n * The array with all attributes to remove later.\r\n * Need to manually remove attributes that are not in this.\r\n * Note that removing `aria-live` disables the live region until the page reload.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const ALL_ATTRIBUTES = [\r\n  ROLE,\r\n  TAB_INDEX,\r\n  DISABLED,\r\n  ARIA_CONTROLS,\r\n  ARIA_CURRENT,\r\n  ARIA_LABEL,\r\n  ARIA_LABELLEDBY,\r\n  ARIA_HIDDEN,\r\n  ARIA_ORIENTATION,\r\n  ARIA_ROLEDESCRIPTION,\r\n];\r\n","/**\r\n * The project code.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const PROJECT_CODE = 'splide';\r\n\r\n/**\r\n * The data attribute prefix.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const DATA_ATTRIBUTE = `data-${ PROJECT_CODE }`;\r\n","import { PROJECT_CODE } from './project';\r\n\r\n/**\r\n * The prefix for classes.\r\n *\r\n * @since 4.1.0\r\n */\r\nexport const CLASS_PREFIX = `${ PROJECT_CODE }__`;\r\n\r\n/**\r\n * The prefix for status classes.\r\n *\r\n * @since 4.1.0\r\n */\r\nexport const STATUS_CLASS_PREFIX = 'is-';\r\n\r\n/**\r\n * All classes as constants.\r\n */\r\nexport const CLASS_ROOT            = PROJECT_CODE;\r\nexport const CLASS_TRACK           = `${ CLASS_PREFIX }track`;\r\nexport const CLASS_LIST            = `${ CLASS_PREFIX }list`;\r\nexport const CLASS_SLIDE           = `${ CLASS_PREFIX }slide`;\r\nexport const CLASS_CLONE           = `${ CLASS_SLIDE }--clone`;\r\nexport const CLASS_CONTAINER       = `${ CLASS_SLIDE }__container`;\r\nexport const CLASS_ARROWS          = `${ CLASS_PREFIX }arrows`;\r\nexport const CLASS_ARROW           = `${ CLASS_PREFIX }arrow`;\r\nexport const CLASS_ARROW_PREV      = `${ CLASS_ARROW }--prev`;\r\nexport const CLASS_ARROW_NEXT      = `${ CLASS_ARROW }--next`;\r\nexport const CLASS_PAGINATION      = `${ CLASS_PREFIX }pagination`;\r\nexport const CLASS_PAGINATION_PAGE = `${ CLASS_PAGINATION }__page`;\r\nexport const CLASS_PROGRESS        = `${ CLASS_PREFIX }progress`;\r\nexport const CLASS_PROGRESS_BAR    = `${ CLASS_PROGRESS }__bar`;\r\nexport const CLASS_TOGGLE          = `${ CLASS_PREFIX }toggle`;\r\nexport const CLASS_TOGGLE_PLAY     = `${ CLASS_TOGGLE }__play`;\r\nexport const CLASS_TOGGLE_PAUSE    = `${ CLASS_TOGGLE }__pause`;\r\nexport const CLASS_SPINNER         = `${ CLASS_PREFIX }spinner`;\r\nexport const CLASS_SR              = `${ CLASS_PREFIX }sr`;\r\nexport const CLASS_INITIALIZED     = `${ STATUS_CLASS_PREFIX }initialized`;\r\nexport const CLASS_ACTIVE          = `${ STATUS_CLASS_PREFIX }active`;\r\nexport const CLASS_PREV            = `${ STATUS_CLASS_PREFIX }prev`;\r\nexport const CLASS_NEXT            = `${ STATUS_CLASS_PREFIX }next`;\r\nexport const CLASS_VISIBLE         = `${ STATUS_CLASS_PREFIX }visible`;\r\nexport const CLASS_LOADING         = `${ STATUS_CLASS_PREFIX }loading`;\r\nexport const CLASS_FOCUS_IN        = `${ STATUS_CLASS_PREFIX }focus-in`;\r\nexport const CLASS_OVERFLOW        = `${ STATUS_CLASS_PREFIX }overflow`;\r\n\r\n/**\r\n * The array with all status classes except for `is-initialized`.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const STATUS_CLASSES = [\r\n  CLASS_ACTIVE,\r\n  CLASS_VISIBLE,\r\n  CLASS_PREV,\r\n  CLASS_NEXT,\r\n  CLASS_LOADING,\r\n  CLASS_FOCUS_IN,\r\n  CLASS_OVERFLOW,\r\n];\r\n\r\n/**\r\n * The collection of classes for elements that Splide dynamically creates.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const CLASSES = {\r\n  slide     : CLASS_SLIDE,\r\n  clone     : CLASS_CLONE,\r\n  arrows    : CLASS_ARROWS,\r\n  arrow     : CLASS_ARROW,\r\n  prev      : CLASS_ARROW_PREV,\r\n  next      : CLASS_ARROW_NEXT,\r\n  pagination: CLASS_PAGINATION,\r\n  page      : CLASS_PAGINATION_PAGE,\r\n  spinner   : CLASS_SPINNER,\r\n};\r\n","import { PROJECT_CODE } from '../../../constants/project';\r\n\r\n\r\n/**\r\n * Throws an error if the provided condition is falsy.\r\n *\r\n * @param condition - If falsy, an error is thrown.\r\n * @param message   - Optional. A message to display.\r\n */\r\nexport function assert( condition: any, message?: string ): void {\r\n  if ( ! condition ) {\r\n    throw new Error( `[${ PROJECT_CODE }] ${ message || '' }` );\r\n  }\r\n}\r\n","/**\r\n * The power of the friction.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const FRICTION = 5;\r\n\r\n/**\r\n * If the user stops dragging for this duration with keeping the pointer down, updates the base coord and time.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const LOG_INTERVAL = 200;\r\n\r\n/**\r\n * Start events for dragging.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const POINTER_DOWN_EVENTS = 'touchstart mousedown';\r\n\r\n/**\r\n * Update events for dragging.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const POINTER_MOVE_EVENTS = 'touchmove mousemove';\r\n\r\n/**\r\n * End events for dragging.\r\n * The `click` event is required because the browser sometimes dispatches `drag` events instead of `mouse`.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const POINTER_UP_EVENTS = 'touchend touchcancel mouseup click';\r\n","/**\r\n * The type for the regular slider.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const SLIDE = 'slide';\r\n\r\n/**\r\n * The type for the carousel slider.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const LOOP = 'loop';\r\n\r\n/**\r\n * The type for the fade slider that can not have multiple slides in a page.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const FADE = 'fade';\r\n","import {\r\n  ALL_ATTRIBUTES,\r\n  ARIA_CONTROLS,\r\n  ARIA_CURRENT,\r\n  ARIA_HIDDEN,\r\n  ARIA_LABEL,\r\n  ARIA_ROLEDESCRIPTION,\r\n  ROLE,\r\n  TAB_INDEX,\r\n} from '../../constants/attributes';\r\nimport {\r\n  CLASS_ACTIVE,\r\n  CLASS_CONTAINER,\r\n  CLASS_NEXT,\r\n  CLASS_PREV,\r\n  CLASS_VISIBLE,\r\n  STATUS_CLASSES,\r\n} from '../../constants/classes';\r\nimport {\r\n  EVENT_ACTIVE,\r\n  EVENT_CLICK,\r\n  EVENT_HIDDEN,\r\n  EVENT_INACTIVE,\r\n  EVENT_MOVE,\r\n  EVENT_MOVED,\r\n  EVENT_NAVIGATION_MOUNTED,\r\n  EVENT_SCROLLED,\r\n  EVENT_SHIFTED,\r\n  EVENT_SLIDE_KEYDOWN,\r\n  EVENT_VISIBLE,\r\n} from '../../constants/events';\r\nimport { MOVING, SCROLLING } from '../../constants/states';\r\nimport { FADE, LOOP } from '../../constants/types';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent } from '../../types';\r\nimport {\r\n  abs,\r\n  apply,\r\n  ceil,\r\n  child,\r\n  CSSProperties,\r\n  floor,\r\n  focus,\r\n  format,\r\n  getAttribute,\r\n  hasClass,\r\n  min,\r\n  pad,\r\n  queryAll,\r\n  rect,\r\n  removeAttribute,\r\n  removeClass,\r\n  setAttribute,\r\n  style as _style,\r\n  toggleClass,\r\n} from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The interface for the Slide sub component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface  SlideComponent extends BaseComponent {\r\n  readonly index: number;\r\n  readonly slideIndex: number;\r\n  readonly slide: HTMLElement;\r\n  readonly container: HTMLElement;\r\n  readonly isClone: boolean;\r\n\r\n  update(): void;\r\n  style( prop: CSSProperties, value: string | number, useContainer?: boolean ): void\r\n  isWithin( from: number, distance: number ): boolean;\r\n  isVisible( partial?: boolean ): boolean;\r\n}\r\n\r\n/**\r\n * The subcomponent for managing each slide.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param index      - A slide index.\r\n * @param slideIndex - A slide index for clones. This must be `-1` if the slide is not a clone.\r\n * @param slide      - A slide element.\r\n *\r\n * @return A Slide subcomponent.\r\n */\r\nexport const Slide = ( Splide: Splide, index: number, slideIndex: number, slide: HTMLElement ): SlideComponent => {\r\n  const event = Splide.event.create();\r\n  const { on, emit, bind } = event;\r\n  const { Components, root, options } = Splide;\r\n  const { isNavigation, updateOnMove, i18n, pagination, slideFocus } = options;\r\n  const { Elements } = Components;\r\n  const { resolve } = Components.Direction;\r\n  const styles    = getAttribute( slide, 'style' );\r\n  const label     = getAttribute( slide, ARIA_LABEL );\r\n  const isClone   = slideIndex > -1;\r\n  const container = child( slide, `.${ CLASS_CONTAINER }` );\r\n\r\n  /**\r\n   * Turns into `true` when the component is destroyed.\r\n   */\r\n  let destroyed: boolean;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount( this: SlideComponent ): void {\r\n    if ( ! isClone ) {\r\n      slide.id = `${ root.id }-slide${ pad( index + 1 ) }`;\r\n      setAttribute( slide, ROLE, pagination ? 'tabpanel' : 'group' );\r\n      setAttribute( slide, ARIA_ROLEDESCRIPTION, i18n.slide );\r\n      setAttribute( slide, ARIA_LABEL, label || format( i18n.slideLabel, index + 1, Splide.length ) );\r\n    }\r\n\r\n    listen();\r\n  }\r\n\r\n  /**\r\n   * Listens to some events.\r\n   */\r\n  function listen(): void {\r\n    bind( slide, 'click', apply( emit, EVENT_CLICK, self ) );\r\n    bind( slide, 'keydown', apply( emit, EVENT_SLIDE_KEYDOWN, self ) );\r\n    on( [ EVENT_MOVED, EVENT_SHIFTED, EVENT_SCROLLED ], update );\r\n    on( EVENT_NAVIGATION_MOUNTED, initNavigation );\r\n\r\n    if ( updateOnMove ) {\r\n      on( EVENT_MOVE, onMove );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    destroyed = true;\r\n    event.destroy();\r\n    removeClass( slide, STATUS_CLASSES );\r\n    removeAttribute( slide, ALL_ATTRIBUTES );\r\n    setAttribute( slide, 'style', styles );\r\n    setAttribute( slide, ARIA_LABEL, label || '' );\r\n  }\r\n\r\n  /**\r\n   * Initializes slides as navigation.\r\n   */\r\n  function initNavigation(): void {\r\n    const controls = Splide.splides.map( target => {\r\n      const Slide = target.splide.Components.Slides.getAt( index );\r\n      return Slide ? Slide.slide.id : '';\r\n    } ).join( ' ' );\r\n\r\n    setAttribute( slide, ARIA_LABEL, format( i18n.slideX, ( isClone ? slideIndex : index ) + 1 ) );\r\n    setAttribute( slide, ARIA_CONTROLS, controls );\r\n    setAttribute( slide, ROLE, slideFocus ? 'button' : '' );\r\n    slideFocus && removeAttribute( slide, ARIA_ROLEDESCRIPTION );\r\n  }\r\n\r\n  /**\r\n   * If the `updateOnMove` option is `true`, called when the slider starts moving.\r\n   */\r\n  function onMove(): void {\r\n    if ( ! destroyed ) {\r\n      update();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates attribute and classes of the slide.\r\n   */\r\n  function update(): void {\r\n    if ( ! destroyed ) {\r\n      const { index: curr } = Splide;\r\n\r\n      updateActivity();\r\n      updateVisibility();\r\n      toggleClass( slide, CLASS_PREV, index === curr - 1 );\r\n      toggleClass( slide, CLASS_NEXT, index === curr + 1 );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the status related with activity.\r\n   */\r\n  function updateActivity(): void {\r\n    const active = isActive();\r\n\r\n    if ( active !== hasClass( slide, CLASS_ACTIVE ) ) {\r\n      toggleClass( slide, CLASS_ACTIVE, active );\r\n      setAttribute( slide, ARIA_CURRENT, isNavigation && active || '' );\r\n      emit( active ? EVENT_ACTIVE : EVENT_INACTIVE, self );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates classes and attributes related with visibility.\r\n   * - Do not update aria-hidden on shifting to avoid Window Narrator from start reading contents.\r\n   * - If the slide has focus and gets hidden, moves focus to the active slide.\r\n   */\r\n  function updateVisibility(): void {\r\n    const visible = isVisible();\r\n    const hidden = ! visible && ( ! isActive() || isClone );\r\n\r\n    if ( ! Splide.state.is( [ MOVING, SCROLLING ] ) ) {\r\n      setAttribute( slide, ARIA_HIDDEN, hidden || '' );\r\n    }\r\n\r\n    setAttribute( queryAll( slide, options.focusableNodes || '' ), TAB_INDEX, hidden ? -1 : '' );\r\n\r\n    if ( slideFocus ) {\r\n      setAttribute( slide, TAB_INDEX, hidden ? -1 : 0 );\r\n    }\r\n\r\n    if ( visible !== hasClass( slide, CLASS_VISIBLE ) ) {\r\n      toggleClass( slide, CLASS_VISIBLE, visible );\r\n      emit( visible ? EVENT_VISIBLE : EVENT_HIDDEN, self );\r\n    }\r\n\r\n    if ( ! visible && document.activeElement === slide ) {\r\n      const Slide = Components.Slides.getAt( Splide.index );\r\n      Slide && focus( Slide.slide );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds a CSS rule to the slider or the container.\r\n   *\r\n   * @param prop         - A property name.\r\n   * @param value        - A CSS value to add.\r\n   * @param useContainer - Optional. Determines whether to apply the rule to the container or not.\r\n   */\r\n  function style( prop: CSSProperties, value: string | number, useContainer?: boolean ): void {\r\n    _style( ( useContainer && container ) || slide, prop, value );\r\n  }\r\n\r\n  /**\r\n   * Checks if the slide is active or not.\r\n   *\r\n   * @return `true` if the slide is active.\r\n   */\r\n  function isActive(): boolean {\r\n    const { index: curr } = Splide;\r\n    const { cloneStatus = true } = options;\r\n    return curr === index || ( cloneStatus && curr === slideIndex );\r\n  }\r\n\r\n  /**\r\n   * Checks if the slide is visible or not.\r\n   */\r\n  function isVisible( partial?: boolean ): boolean {\r\n    if ( Splide.is( FADE ) ) {\r\n      return isActive();\r\n    }\r\n\r\n    const trackRect = rect( Elements.track );\r\n    const slideRect = rect( slide );\r\n    const left      = resolve( 'left', true );\r\n    const right     = resolve( 'right', true );\r\n\r\n    return floor( trackRect[ left ] ) <= ceil( slideRect[ partial ? right : left ] )\r\n      && floor( slideRect[ partial ? left : right ] ) <= ceil( trackRect[ right ] );\r\n  }\r\n\r\n  /**\r\n   * Calculates how far this slide is from another slide and\r\n   * returns `true` if the distance is within the given number.\r\n   *\r\n   * @param from     - An index of a base slide.\r\n   * @param distance - `true` if the slide is within this number.\r\n   *\r\n   * @return `true` if the slide is within the `distance` from the base slide, or otherwise `false`.\r\n   */\r\n  function isWithin( from: number, distance: number ): boolean {\r\n    let diff = abs( from - index );\r\n\r\n    if ( ! isClone && ( options.rewind || Splide.is( LOOP ) ) ) {\r\n      diff = min( diff, Splide.length - diff );\r\n    }\r\n\r\n    return diff <= distance;\r\n  }\r\n\r\n  const self = {\r\n    index,\r\n    slideIndex,\r\n    slide,\r\n    container,\r\n    isClone,\r\n    mount,\r\n    destroy,\r\n    update,\r\n    style,\r\n    isVisible,\r\n    isWithin,\r\n  };\r\n\r\n  return self;\r\n};\r\n","import { DATA_ATTRIBUTE } from '../../constants/project';\r\n\r\n\r\n/**\r\n * The data attribute for the autoplay interval duration.\r\n *\r\n * @since 3.5.0\r\n */\r\nexport const INTERVAL_DATA_ATTRIBUTE = `${ DATA_ATTRIBUTE }-interval`;\r\n","/**\r\n * AddEventListenerOptions for listeners that may prevent the browser scroll.\r\n *\r\n * @since 3.4.1\r\n */\r\nexport const SCROLL_LISTENER_OPTIONS = { passive: false, capture: true };\r\n","import { DATA_ATTRIBUTE } from '../../constants/project';\r\n\r\n\r\n/**\r\n * The data attribute for the src value.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const SRC_DATA_ATTRIBUTE = `${ DATA_ATTRIBUTE }-lazy`;\r\n\r\n/**\r\n * The data attribute for the srcset value.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const SRCSET_DATA_ATTRIBUTE = `${ SRC_DATA_ATTRIBUTE }-srcset`;\r\n\r\n/**\r\n * The selector string for images to load.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const IMAGE_SELECTOR = `[${ SRC_DATA_ATTRIBUTE }], [${ SRCSET_DATA_ATTRIBUTE }]`;\r\n","import { ARIA_ORIENTATION } from '../../constants/attributes';\r\nimport { TTB } from '../../constants/directions';\r\nimport {\r\n  EVENT_CLICK,\r\n  EVENT_MOUNTED,\r\n  EVENT_MOVE,\r\n  EVENT_NAVIGATION_MOUNTED,\r\n  EVENT_SLIDE_KEYDOWN,\r\n  EVENT_UPDATED,\r\n} from '../../constants/events';\r\nimport { LOOP } from '../../constants/types';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, ComponentConstructor, EventInterface } from '../../types';\r\nimport { apply, empty, includes, isUndefined, prevent, setAttribute } from '@splidejs/utils';\r\nimport { SlideComponent } from '../Slides/Slide';\r\n\r\n\r\n/**\r\n * The interface for the Sync component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface SyncComponent extends BaseComponent {\r\n  remount(): void;\r\n}\r\n\r\n/**\r\n * The keys for triggering the navigation slide.\r\n *\r\n * @since 3.0.0\r\n */\r\nconst TRIGGER_KEYS = [ ' ', 'Enter' ];\r\n\r\n/**\r\n * The component for syncing multiple sliders.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface object.\r\n *\r\n * @return A Sync component object.\r\n */\r\nexport const Sync: ComponentConstructor<SyncComponent> = ( Splide, Components, options, event ) => {\r\n  const { isNavigation, slideFocus } = options;\r\n\r\n  /**\r\n   * Stores event objects.\r\n   */\r\n  const events: EventInterface[] = [];\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    Splide.splides.forEach( target => {\r\n      if ( ! target.isParent ) {\r\n        sync( Splide, target.splide );\r\n        sync( target.splide, Splide );\r\n      }\r\n    } );\r\n\r\n    if ( isNavigation ) {\r\n      navigate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    events.forEach( event => { event.destroy() } );\r\n    empty( events );\r\n  }\r\n\r\n  /**\r\n   * Remounts the component.\r\n   *\r\n   * @internal\r\n   */\r\n  function remount(): void {\r\n    destroy();\r\n    mount();\r\n  }\r\n\r\n  /**\r\n   * Syncs the current index with a provided child splide instance.\r\n   *\r\n   * @param splide - A splide instance to sync with.\r\n   * @param target - A target splide instance.\r\n   */\r\n  function sync( splide: Splide, target: Splide ): void {\r\n    const event = splide.event.create();\r\n\r\n    event.on( EVENT_MOVE, ( index, prev, dest ) => {\r\n      target.index !== index && target.go( target.is( LOOP ) ? dest : index );\r\n    } );\r\n\r\n    events.push( event );\r\n  }\r\n\r\n  /**\r\n   * Makes slides clickable and moves the slider to the index of clicked slide.\r\n   * Note that the direction of `menu` is implicitly `vertical` as default.\r\n   */\r\n  function navigate(): void {\r\n    const ev = event.create();\r\n    const { on } = ev;\r\n\r\n    on( EVENT_CLICK, onClick );\r\n    on( EVENT_SLIDE_KEYDOWN, onKeydown );\r\n    on( [ EVENT_MOUNTED, EVENT_UPDATED ], update );\r\n\r\n    events.push( ev );\r\n    ev.emit( EVENT_NAVIGATION_MOUNTED, Splide.splides );\r\n  }\r\n\r\n  /**\r\n   * Update attributes.\r\n   */\r\n  function update(): void {\r\n    setAttribute(\r\n      Components.Elements.list,\r\n      ARIA_ORIENTATION,\r\n      options.direction === TTB ? 'vertical' : ''\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Called when the navigation slide is clicked.\r\n   *\r\n   * @param Slide - A clicked Slide component.\r\n   */\r\n  function onClick( Slide: SlideComponent ): void {\r\n    Splide.go( Slide.index );\r\n  }\r\n\r\n  /**\r\n   * Called when any key is pressed on the navigation slide.\r\n   *\r\n   * @param Slide - A Slide component.\r\n   * @param e     - A KeyboardEvent object.\r\n   */\r\n  function onKeydown( Slide: SlideComponent, e: KeyboardEvent ): void {\r\n    if ( includes( TRIGGER_KEYS, e.key ) ) {\r\n      onClick( Slide );\r\n      prevent( e );\r\n    }\r\n  }\r\n\r\n  return {\r\n    setup: apply(\r\n      Components.Breakpoints.set,\r\n      { slideFocus: isUndefined( slideFocus ) ? isNavigation : slideFocus },\r\n      true\r\n    ),\r\n    mount,\r\n    destroy,\r\n    remount,\r\n  };\r\n};\r\n","import { ComponentConstructor } from '../types';\r\n\r\nimport { Breakpoints } from './Breakpoints/Breakpoints';\r\nimport { Direction } from './Direction/Direction';\r\nimport { Elements } from './Elements/Elements';\r\nimport { Slides } from './Slides/Slides';\r\nimport { Layout } from './Layout/Layout';\r\nimport { Clones } from './Clones/Clones';\r\nimport { Move } from './Move/Move';\r\nimport { Controller } from './Controller/Controller';\r\nimport { Arrows } from './Arrows/Arrows';\r\nimport { Autoplay } from './Autoplay/Autoplay';\r\nimport { Scroll } from './Scroll/Scroll';\r\nimport { Drag } from './Drag/Drag';\r\nimport { Keyboard } from './Keyboard/Keyboard';\r\nimport { LazyLoad } from './LazyLoad/LazyLoad';\r\nimport { Pagination } from './Pagination/Pagination';\r\nimport { Sync } from './Sync/Sync';\r\nimport { Wheel } from './Wheel/Wheel';\r\nimport { Live } from './Live/Live';\r\n\r\nexport { Breakpoints } from './Breakpoints/Breakpoints';\r\nexport { Direction }   from './Direction/Direction';\r\nexport { Elements }    from './Elements/Elements';\r\nexport { Slides }      from './Slides/Slides';\r\nexport { Layout }      from './Layout/Layout';\r\nexport { Clones }      from './Clones/Clones';\r\nexport { Move }        from './Move/Move';\r\nexport { Controller }  from './Controller/Controller';\r\nexport { Arrows }      from './Arrows/Arrows';\r\nexport { Autoplay }    from './Autoplay/Autoplay';\r\nexport { Scroll }      from './Scroll/Scroll';\r\nexport { Drag }        from './Drag/Drag';\r\nexport { Keyboard }    from './Keyboard/Keyboard';\r\nexport { LazyLoad }    from './LazyLoad/LazyLoad';\r\nexport { Pagination }  from './Pagination/Pagination';\r\nexport { Sync }        from './Sync/Sync';\r\nexport { Wheel }       from './Wheel/Wheel';\r\nexport { Live }        from './Live/Live';\r\n\r\n\r\n/**\r\n * The collection of core component constructors.\r\n *\r\n * @since 5.0.0\r\n */\r\nexport const COMPONENTS: Record<string, ComponentConstructor> = {\r\n  Breakpoints,\r\n  Direction,\r\n  Elements,\r\n  Slides,\r\n  Layout,\r\n  Clones,\r\n  Move,\r\n  Scroll,\r\n  Controller,\r\n  Arrows,\r\n  Autoplay,\r\n  Drag,\r\n  Keyboard,\r\n  LazyLoad,\r\n  Pagination,\r\n  Sync,\r\n  Wheel,\r\n  Live,\r\n};","import { ALL_ATTRIBUTES, ARIA_LABEL, ARIA_LABELLEDBY, ARIA_ROLEDESCRIPTION, ROLE } from '../../constants/attributes';\r\nimport {\r\n  CLASS_ACTIVE,\r\n  CLASS_ARROW_NEXT,\r\n  CLASS_ARROW_PREV,\r\n  CLASS_ARROWS,\r\n  CLASS_CLONE,\r\n  CLASS_FOCUS_IN,\r\n  CLASS_LIST,\r\n  CLASS_PAGINATION,\r\n  CLASS_PROGRESS_BAR,\r\n  CLASS_ROOT,\r\n  CLASS_SLIDE,\r\n  CLASS_TOGGLE,\r\n  CLASS_TRACK,\r\n} from '../../constants/classes';\r\nimport { EVENT_REFRESH, EVENT_UPDATED } from '../../constants/events';\r\nimport { PROJECT_CODE } from '../../constants/project';\r\nimport { BaseComponent, ComponentConstructor } from '../../types';\r\nimport {\r\n  addClass,\r\n  assign,\r\n  child,\r\n  children,\r\n  closest,\r\n  empty,\r\n  getAttribute,\r\n  push,\r\n  query,\r\n  removeAttribute,\r\n  removeClass,\r\n  setAttribute,\r\n  toggleClass,\r\n  uniqueId,\r\n} from '@splidejs/utils';\r\nimport { assert } from '../../utils';\r\nimport { POINTER_DOWN_EVENTS } from '../Drag/constants';\r\n\r\n\r\n/**\r\n * The interface for elements which the slider consists of.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ElementCollection {\r\n  root: HTMLElement;\r\n  track: HTMLElement;\r\n  list: HTMLElement;\r\n  slides: HTMLElement[];\r\n  arrows?: HTMLElement;\r\n  pagination?: HTMLUListElement;\r\n  prev?: HTMLButtonElement;\r\n  next?: HTMLButtonElement;\r\n  bar?: HTMLElement;\r\n  toggle?: HTMLElement;\r\n}\r\n\r\n/**\r\n * The interface for the Elements component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ElementsComponent extends BaseComponent, Readonly<ElementCollection> {\r\n}\r\n\r\n/**\r\n * The component that collects and handles elements which the slider consists of.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return An Elements component object.\r\n */\r\nexport const Elements: ComponentConstructor<ElementsComponent> = ( Splide, Components, options, event ) => {\r\n  const { on, bind } = event;\r\n  const { root } = Splide;\r\n  const { i18n } = options;\r\n  const elements: ElementCollection = {} as ElementCollection;\r\n\r\n  /**\r\n   * Stores all slide elements.\r\n   */\r\n  const slides: HTMLElement[] = [];\r\n\r\n  /**\r\n   * Stores all root classes.\r\n   */\r\n  let rootClasses: string[] = [];\r\n\r\n  /**\r\n   * Stores all list classes.\r\n   */\r\n  let trackClasses: string[] = [];\r\n\r\n  /**\r\n   * The track element.\r\n   */\r\n  let track: HTMLElement;\r\n\r\n  /**\r\n   * The list element.\r\n   */\r\n  let list: HTMLElement;\r\n\r\n  /**\r\n   * Turns into `true` when detecting keydown, and `false` when detecting pointerdown.\r\n   */\r\n  let isUsingKey: boolean;\r\n\r\n  /**\r\n   * Called when the component is constructed.\r\n   */\r\n  function setup(): void {\r\n    collect();\r\n    init();\r\n    update();\r\n  }\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    on( EVENT_REFRESH, destroy );\r\n    on( EVENT_REFRESH, setup );\r\n    on( EVENT_UPDATED, update );\r\n\r\n    bind( document, `${ POINTER_DOWN_EVENTS } keydown`, e => {\r\n      isUsingKey = e.type === 'keydown';\r\n    }, { capture: true } );\r\n\r\n    bind( root, 'focusin', () => {\r\n      toggleClass( root, CLASS_FOCUS_IN, !! isUsingKey );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   *\r\n   * @param completely - Whether to destroy the component completely or not.\r\n   */\r\n  function destroy( completely?: boolean ): void {\r\n    const attrs = ALL_ATTRIBUTES.concat( 'style' );\r\n\r\n    empty( slides );\r\n    removeClass( root, rootClasses );\r\n    removeClass( track, trackClasses );\r\n    removeAttribute( [ track, list ], attrs );\r\n    removeAttribute( root, completely ? attrs : [ 'style', ARIA_ROLEDESCRIPTION ] );\r\n  }\r\n\r\n  /**\r\n   * Updates the status of elements.\r\n   */\r\n  function update(): void {\r\n    removeClass( root, rootClasses );\r\n    removeClass( track, trackClasses );\r\n\r\n    rootClasses  = getClasses( CLASS_ROOT );\r\n    trackClasses = getClasses( CLASS_TRACK );\r\n\r\n    addClass( root, rootClasses );\r\n    addClass( track, trackClasses );\r\n\r\n    setAttribute( root, ARIA_LABEL, options.label );\r\n    setAttribute( root, ARIA_LABELLEDBY, options.labelledby );\r\n  }\r\n\r\n  /**\r\n   * Collects elements which the slider consists of.\r\n   */\r\n  function collect(): void {\r\n    track = find( CLASS_TRACK );\r\n    list  = child( track, `.${ CLASS_LIST }` );\r\n\r\n    assert( track && list, 'A track/list element is missing.' );\r\n    push( slides, children( list, `.${ CLASS_SLIDE }:not(.${ CLASS_CLONE })` ) );\r\n\r\n    assign( elements, {\r\n      root,\r\n      track,\r\n      list,\r\n      slides,\r\n      arrows    : find( CLASS_ARROWS ),\r\n      pagination: find( CLASS_PAGINATION ),\r\n      prev      : find( CLASS_ARROW_PREV ),\r\n      next      : find( CLASS_ARROW_NEXT ),\r\n      bar       : find( CLASS_PROGRESS_BAR ),\r\n      toggle    : find( CLASS_TOGGLE ),\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Initializes essential elements.\r\n   * Note that do not change the role of the root element,\r\n   * which removes the region from the accessibility tree.\r\n   */\r\n  function init(): void {\r\n    const { role = 'region' } = options;\r\n    const id = root.id || uniqueId( PROJECT_CODE );\r\n\r\n    root.id  = id;\r\n    track.id = track.id || `${ id }-track`;\r\n    list.id  = list.id || `${ id }-list`;\r\n\r\n    if ( ! getAttribute( root, ROLE ) && root.tagName !== 'SECTION' && role ) {\r\n      setAttribute( root, ROLE, role );\r\n    }\r\n\r\n    setAttribute( root, ARIA_ROLEDESCRIPTION, i18n.carousel );\r\n    setAttribute( list, ROLE, 'presentation' );\r\n  }\r\n\r\n  /**\r\n   * Finds an element only in this slider, ignoring elements in a nested slider.\r\n   *\r\n   * @param className - A class name.\r\n   *\r\n   * @return A found element or null.\r\n   */\r\n  function find( className: string ): HTMLElement | undefined {\r\n    const elm = query<HTMLElement>( root, `.${ className }` );\r\n    return elm && closest( elm, `.${ CLASS_ROOT }` ) === root ? elm : undefined;\r\n  }\r\n\r\n  /**\r\n   * Return an array with modifier classes.\r\n   *\r\n   * @param base - A base class name.\r\n   *\r\n   * @return An array with classes.\r\n   */\r\n  function getClasses( base: string ): string[] {\r\n    return [\r\n      `${ base }--${ options.type }`,\r\n      `${ base }--${ options.direction }`,\r\n      options.drag && `${ base }--draggable`,\r\n      options.isNavigation && `${ base }--nav`,\r\n      base === CLASS_ROOT && CLASS_ACTIVE,\r\n    ];\r\n  }\r\n\r\n  return assign( elements, {\r\n    setup,\r\n    mount,\r\n    destroy,\r\n  } );\r\n};\r\n","import { EVENT_REFRESH, EVENT_RESIZE } from '../../constants/events';\r\nimport { AnyFunction, BaseComponent, ComponentConstructor } from '../../types';\r\nimport {\r\n  addClass,\r\n  append,\r\n  apply,\r\n  before,\r\n  between,\r\n  CSSProperties,\r\n  empty,\r\n  forEach as forEachItem,\r\n  includes,\r\n  isFunction,\r\n  isHTMLElement,\r\n  isString,\r\n  matches,\r\n  parseHtml,\r\n  queryAll,\r\n  removeNode,\r\n  toArray,\r\n} from '@splidejs/utils';\r\nimport { Slide, SlideComponent } from './Slide';\r\n\r\n\r\n/**\r\n * The interface for the Slides component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface SlidesComponent extends BaseComponent {\r\n  update(): void;\r\n  register( slide: HTMLElement, index: number, slideIndex: number ): void;\r\n  get( excludeClones?: boolean ): SlideComponent[];\r\n  getIn( page: number ): SlideComponent[];\r\n  getAt( index: number ): SlideComponent | undefined;\r\n  add( slide: string | Element | Array<string | Element>, index?: number ): void;\r\n  remove( selector: SlideMatcher ): void;\r\n  forEach( iteratee: SlidesIteratee, excludeClones?: boolean ): void;\r\n  filter( matcher: SlideMatcher ): SlideComponent[];\r\n  style( prop: string, value: string | number, useContainer?: boolean ): void\r\n  getLength( excludeClones?: boolean ): number;\r\n  isEnough(): boolean;\r\n}\r\n\r\n/**\r\n * The iteratee function for Slides.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport type SlidesIteratee = ( Slide: SlideComponent, index: number, Slides: SlideComponent[] ) => void\r\n\r\n/**\r\n * The predicate function for Slides.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport type SlidesPredicate = ( Slide: SlideComponent, index: number, Slides: SlideComponent[] ) => any\r\n\r\n/**\r\n * The type for filtering SlideComponent objects.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport type SlideMatcher = number | number[] | string | SlidesPredicate;\r\n\r\n/**\r\n * The component for managing all slides include clones.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return An Slides component object.\r\n */\r\nexport const Slides: ComponentConstructor<SlidesComponent> = ( Splide, Components, options, event ) => {\r\n  const { on, emit, bind } = event;\r\n  const { slides, list } = Components.Elements;\r\n\r\n  /**\r\n   * Stores all SlideComponent objects.\r\n   */\r\n  const Slides: SlideComponent[] = [];\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on( EVENT_REFRESH, destroy );\r\n    on( EVENT_REFRESH, init );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   */\r\n  function init(): void {\r\n    slides.forEach( ( slide, index ) => { register( slide, index, -1 ) } );\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    forEach( Slide => { Slide.destroy() } );\r\n    empty( Slides );\r\n  }\r\n\r\n  /**\r\n   * Manually updates the status of all slides.\r\n   */\r\n  function update(): void {\r\n    forEach( Slide => { Slide.update() } );\r\n  }\r\n\r\n  /**\r\n   * Registers a slide element and creates a Slide object.\r\n   * Needs to sort every time when a new slide is registered especially for clones.\r\n   *\r\n   * @param slide      - A slide element to register.\r\n   * @param index      - A slide index.\r\n   * @param slideIndex - A slide index for clones. This must be `-1` for regular slides.\r\n   */\r\n  function register( slide: HTMLElement, index: number, slideIndex: number ): void {\r\n    const object = Slide( Splide, index, slideIndex, slide );\r\n    object.mount();\r\n    Slides.push( object );\r\n    Slides.sort( ( Slide1, Slide2 ) => Slide1.index - Slide2.index );\r\n  }\r\n\r\n  /**\r\n   * Returns all Slide objects.\r\n   *\r\n   * @param excludeClones - Optional. Determines whether to exclude clones or not.\r\n   *\r\n   * @return An array with Slide objects.\r\n   */\r\n  function get( excludeClones?: boolean ): SlideComponent[] {\r\n    return excludeClones ? filter( Slide => ! Slide.isClone ) : Slides;\r\n  }\r\n\r\n  /**\r\n   * Returns slides in the specified page.\r\n   *\r\n   * @param page - A page index.\r\n   *\r\n   * @return An array with slides that belong to the page.\r\n   */\r\n  function getIn( page: number ): SlideComponent[] {\r\n    const { Controller } = Components;\r\n    const index = Controller.toIndex( page );\r\n    const max   = Controller.hasFocus() ? 1 : options.perPage;\r\n    return filter( Slide => between( Slide.index, index, index + max - 1 ) );\r\n  }\r\n\r\n  /**\r\n   * Returns a Slide object at the specified index.\r\n   *\r\n   * @param index - A slide index.\r\n   *\r\n   * @return A Slide object if available, or otherwise `undefined`.\r\n   */\r\n  function getAt( index: number ): SlideComponent | undefined {\r\n    return filter( index )[ 0 ];\r\n  }\r\n\r\n  /**\r\n   * Inserts a slide or slides at a specified index.\r\n   *\r\n   * @param items - A slide element, an HTML string or an array with them.\r\n   * @param index - Optional. An index to insert the slide at. If omitted, appends it to the list.\r\n   */\r\n  function add( items: string | Element | Array<string | Element>, index?: number ): void {\r\n    forEachItem( items, slide => {\r\n      if ( isString( slide ) ) {\r\n        slide = parseHtml( slide );\r\n      }\r\n\r\n      if ( isHTMLElement( slide ) ) {\r\n        const ref = slides[ index ];\r\n        ref ? before( ref, slide ) : append( list, slide );\r\n        addClass( slide, options.classes.slide );\r\n        observeImages( slide, apply( emit, EVENT_RESIZE ) );\r\n      }\r\n    } );\r\n\r\n    emit( EVENT_REFRESH );\r\n  }\r\n\r\n  /**\r\n   * Removes slides that match the matcher\r\n   * that can be an index, an array with indices, a selector, or an iteratee function.\r\n   *\r\n   * @param matcher - An index, an array with indices, a selector string, or an iteratee function.\r\n   */\r\n  function remove( matcher: SlideMatcher ): void {\r\n    removeNode( filter( matcher ).map( Slide => Slide.slide ) );\r\n    emit( EVENT_REFRESH );\r\n  }\r\n\r\n  /**\r\n   * Iterates over Slide objects by the iteratee function.\r\n   *\r\n   * @param iteratee      - An iteratee function that takes a Slide object, an index and an array with Slides.\r\n   * @param excludeClones - Optional. Determines whether to exclude clones or not.\r\n   */\r\n  function forEach( iteratee: SlidesIteratee, excludeClones?: boolean ): void {\r\n    get( excludeClones ).forEach( iteratee );\r\n  }\r\n\r\n  /**\r\n   * Filters Slides by the matcher\r\n   * that can be an index, an array with indices, a selector, or a predicate function.\r\n   *\r\n   * @param matcher - An index, an array with indices, a selector string, or a predicate function.\r\n   *\r\n   * @return An array with SlideComponent objects.\r\n   */\r\n  function filter( matcher: SlideMatcher ): SlideComponent[] {\r\n    return Slides.filter( isFunction( matcher )\r\n      ? matcher\r\n      : Slide => isString( matcher )\r\n        ? matches( Slide.slide, matcher )\r\n        : includes( toArray( matcher ), Slide.index )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Adds a CSS rule to all slides or containers.\r\n   *\r\n   * @param prop         - A property name.\r\n   * @param value        - A CSS value to add.\r\n   * @param useContainer - Optional. Determines whether to apply the rule to the container or not.\r\n   */\r\n  function style( prop: CSSProperties, value: string | number, useContainer?: boolean ): void {\r\n    forEach( Slide => { Slide.style( prop, value, useContainer ) } );\r\n  }\r\n\r\n  /**\r\n   * Invokes the callback after all images in the element are loaded.\r\n   *\r\n   * @param elm      - An element that may contain images.\r\n   * @param callback - A callback function.\r\n   */\r\n  function observeImages( elm: Element, callback: AnyFunction ): void {\r\n    const images = queryAll( elm, 'img' );\r\n    let { length } = images;\r\n\r\n    if ( length ) {\r\n      images.forEach( img => {\r\n        bind( img, 'load error', () => {\r\n          if ( ! --length ) {\r\n            callback();\r\n          }\r\n        } );\r\n      } );\r\n    } else {\r\n      callback();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the length of slides.\r\n   *\r\n   * @param excludeClones - Optional. Determines whether to exclude clones or not.\r\n   *\r\n   * @return The length of slides.\r\n   */\r\n  function getLength( excludeClones?: boolean ): number {\r\n    return excludeClones ? slides.length : Slides.length;\r\n  }\r\n\r\n  /**\r\n   * Checks if the number of slides is over than the `perPage` option, including clones.\r\n   *\r\n   * @return `true` if there are enough slides, or otherwise `false`.\r\n   */\r\n  function isEnough(): boolean {\r\n    return Slides.length > options.perPage;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy,\r\n    update,\r\n    register,\r\n    get,\r\n    getIn,\r\n    getAt,\r\n    add,\r\n    remove,\r\n    forEach,\r\n    filter,\r\n    style,\r\n    getLength,\r\n    isEnough,\r\n  };\r\n};\r\n","import { TTB } from '../../constants/directions';\r\nimport { EVENT_OVERFLOW, EVENT_REFRESH, EVENT_RESIZE, EVENT_RESIZED, EVENT_UPDATED } from '../../constants/events';\r\nimport { BaseComponent, ComponentConstructor } from '../../types';\r\nimport { abs, apply, isObject, rect, style, Throttle, toggleClass, unit } from '@splidejs/utils';\r\nimport { assert } from '../../utils';\r\nimport { FADE } from '../../constants/types';\r\nimport { CLASS_OVERFLOW } from '../../constants/classes';\r\n\r\n\r\n/**\r\n * The interface for the Layout component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface LayoutComponent extends BaseComponent {\r\n  trackSize(): number;\r\n  listSize( full?: boolean ): number;\r\n  slideSize( index: number, withoutGap?: boolean ): number;\r\n  sliderSize( withoutGap?: boolean ): number;\r\n  totalSize( index?: number, withoutGap?: boolean ): number;\r\n  getPadding( right: boolean ): number;\r\n  isOverflow(): boolean;\r\n\r\n  /** @internal */\r\n  resize( force?: boolean ): void;\r\n}\r\n\r\n/**\r\n * The component that adjusts slider styles and provides methods for dimensions.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return An Layout component object.\r\n */\r\nexport const Layout: ComponentConstructor<LayoutComponent> = ( Splide, Components, options, event ) => {\r\n  const { on, bind, emit } = event;\r\n  const { Slides } = Components;\r\n  const { resolve, left, right, width } = Components.Direction;\r\n  const { root, track, list } = Components.Elements;\r\n  const { getAt, style: styleSlides } = Slides;\r\n\r\n  /**\r\n   * Indicates whether the slider direction is vertical or not.\r\n   */\r\n  let vertical: boolean;\r\n\r\n  /**\r\n   * Keeps the DOMRect object of the root element.\r\n   */\r\n  let rootRect: DOMRect;\r\n\r\n  /**\r\n   * Turns into `true` when the carousel is wider than the list.\r\n   */\r\n  let overflow: boolean;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    bind( window, 'resize load', Throttle( apply( emit, EVENT_RESIZE ) ) );\r\n    on( [ EVENT_UPDATED, EVENT_REFRESH ], init );\r\n    on( EVENT_RESIZE, resize );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component on `mount` or `updated`.\r\n   * Uses `max-width` for the root to prevent the slider from exceeding the parent element.\r\n   */\r\n  function init(): void {\r\n    vertical = options.direction === TTB;\r\n\r\n    style( root, 'maxWidth', unit( options.width ) );\r\n    style( track, resolve( 'paddingLeft' ), cssPadding( false ) );\r\n    style( track, resolve( 'paddingRight' ), cssPadding( true ) );\r\n\r\n    resize( true );\r\n  }\r\n\r\n  /**\r\n   * Updates dimensions of some elements when the carousel is resized.\r\n   * Also checks the carousel size and emits `overflow` events when it exceeds the list width.\r\n   *\r\n   * @param force - Skips checking the root dimension change and always performs the resizing process.\r\n   */\r\n  function resize( force?: boolean ): void {\r\n    const newRect = rect( root );\r\n\r\n    if ( force || rootRect.width !== newRect.width || rootRect.height !== newRect.height ) {\r\n      style( track, 'height', cssTrackHeight() );\r\n\r\n      styleSlides( resolve( 'marginRight' ), unit( options.gap ) );\r\n      styleSlides( 'width', cssSlideWidth() );\r\n      styleSlides( 'height', cssSlideHeight(), true );\r\n\r\n      rootRect = newRect;\r\n      emit( EVENT_RESIZED );\r\n\r\n      if ( overflow !== ( overflow = isOverflow() ) ) {\r\n        toggleClass( root, CLASS_OVERFLOW, overflow );\r\n        emit( EVENT_OVERFLOW, overflow );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses the padding option and returns the value for each side.\r\n   * This method returns `paddingTop` or `paddingBottom` for the vertical slider.\r\n   *\r\n   * @param rightPadding - Determines whether to get `paddingRight/Bottom` or `paddingLeft/Top`.\r\n   *\r\n   * @return The padding value as a CSS string.\r\n   */\r\n  function cssPadding( rightPadding: boolean ): string {\r\n    const { padding } = options;\r\n    const prop = rightPadding ? right() : left();\r\n    return padding\r\n      && unit( padding[ prop ] || ( isObject( padding ) ? 0 : padding ) )\r\n      || '0px';\r\n  }\r\n\r\n  /**\r\n   * Returns the height of the track element as a CSS string.\r\n   *\r\n   * @return The height of the track.\r\n   */\r\n  function cssTrackHeight(): string {\r\n    let height = '';\r\n\r\n    if ( vertical ) {\r\n      height = cssHeight();\r\n      assert( height, 'height or heightRatio is missing.' );\r\n      height = `calc(${ height } - ${ cssPadding( false ) } - ${ cssPadding( true ) })`;\r\n    }\r\n\r\n    return height;\r\n  }\r\n\r\n  /**\r\n   * Converts options related with height to a CSS string.\r\n   *\r\n   * @return The height as a CSS string if available, or otherwise an empty string.\r\n   */\r\n  function cssHeight(): string {\r\n    return unit( options.height || rect( list ).width * options.heightRatio );\r\n  }\r\n\r\n  /**\r\n   * Returns the width of the slide as a CSS string.\r\n   *\r\n   * @return The width of the slide.\r\n   */\r\n  function cssSlideWidth(): string | null {\r\n    return options.autoWidth\r\n      ? null\r\n      : unit( options.fixedWidth ) || ( vertical ? '' : cssSlideSize() );\r\n  }\r\n\r\n  /**\r\n   * Returns the height of the slide as a CSS string.\r\n   *\r\n   * @return The height of the slide.\r\n   */\r\n  function cssSlideHeight(): string | null {\r\n    return unit( options.fixedHeight )\r\n      || ( vertical ? ( options.autoHeight ? null : cssSlideSize() ) : cssHeight() );\r\n  }\r\n\r\n  /**\r\n   * Returns the CSS string for slide width or height without gap.\r\n   *\r\n   * @return The CSS string for slide width or height.\r\n   */\r\n  function cssSlideSize(): string {\r\n    const gap = unit( options.gap );\r\n    return `calc((100%${ gap && ` + ${ gap }` })/${ options.perPage || 1 }${ gap && ` - ${ gap }` })`;\r\n  }\r\n\r\n  /**\r\n   * Returns the track width for the horizontal carousel, or the height for the vertical one.\r\n   *\r\n   * @return The size of the track element in pixel.\r\n   */\r\n  function trackSize(): number {\r\n    return rect( track )[ width() ];\r\n  }\r\n\r\n  /**\r\n   * Returns the list width for the horizontal carousel, or the height for the vertical one.\r\n   *\r\n   * @param full - Optional. If `true`, returns the width includes overflowed elements.\r\n   *\r\n   * @return The size of the list element in pixel.\r\n   */\r\n  function listSize( full?: boolean ): number {\r\n    return full ? list[ resolve( 'scrollWidth' ) ] : rect( list )[ width() ];\r\n  }\r\n\r\n  /**\r\n   * Returns the slide width for the horizontal slider, or the height for the vertical slider.\r\n   *\r\n   * @param index      - Optional. A slide index.\r\n   * @param withoutGap - Optional. Determines whether to exclude the gap amount or not.\r\n   *\r\n   * @return The size of the specified slide element in pixel.\r\n   */\r\n  function slideSize( index = 0, withoutGap?: boolean ): number {\r\n    const slide = getAt( index );\r\n    return ( slide ? rect( slide.slide )[ width() ] : 0 ) + ( withoutGap ? 0 : getGap() );\r\n  }\r\n\r\n  /**\r\n   * Returns the total width or height of slides from the head of the slider to the specified index.\r\n   * This includes sizes of clones before the first slide.\r\n   *\r\n   * @param index      - A slide index. If omitted, uses the last index.\r\n   * @param withoutGap - Optional. Determines whether to exclude the last gap or not.\r\n   *\r\n   * @return The total width of slides in the horizontal slider, or the height in the vertical one.\r\n   */\r\n  function totalSize( index: number, withoutGap?: boolean ): number {\r\n    const first  = Components.Slides.get()[ 0 ];\r\n    const target = getAt( index );\r\n    return first && target\r\n      ? abs( rect( target.slide )[ right() ] - rect( first.slide )[ left() ] ) + ( withoutGap ? 0 : getGap() )\r\n      : 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the slider size without clones before the first slide.\r\n   * Do not use the clone's size because it's unstable while initializing and refreshing process.\r\n   *\r\n   * @param withoutGap - Optional. Determines whether to exclude the last gap or not.\r\n   *\r\n   * @return The width or height of the slider without clones.\r\n   */\r\n  function sliderSize( withoutGap?: boolean ): number {\r\n    return totalSize( Splide.length - 1 ) - totalSize( 0 ) + slideSize( 0, withoutGap );\r\n  }\r\n\r\n  /**\r\n   * Computes the gap by the first and second slides,\r\n   * without using `margin` for the CSS grid `gap`.\r\n   * This always returns 0 if the number of slides is less than 2.\r\n   *\r\n   * @return The gap value in pixel.\r\n   */\r\n  function getGap(): number {\r\n    const first  = getAt( 0 );\r\n    const second = getAt( 1 );\r\n\r\n    if ( first && second ) {\r\n      const firstRect = rect( first.slide );\r\n      return abs( rect( second.slide )[ left() ] - firstRect[ left() ] ) - firstRect[ width() ];\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the padding value.\r\n   * This method resolves the difference of the direction.\r\n   *\r\n   * @param right - Determines whether to get `paddingRight/Bottom` or `paddingLeft/Top`.\r\n   *\r\n   * @return The padding value in pixel.\r\n   */\r\n  function getPadding( right: boolean ): number {\r\n    return parseFloat( style(\r\n      track,\r\n      resolve( `padding${ right ? 'Right' : 'Left' }` )\r\n    ) ) || 0;\r\n  }\r\n\r\n  /**\r\n   * Checks if the carousel is wider than the list.\r\n   * This method always returns `true` for a fade carousel.\r\n   *\r\n   * @return `true` if the carousel is wider than the list, or otherwise `false`.\r\n   */\r\n  function isOverflow(): boolean {\r\n    return Splide.is( FADE ) || sliderSize( true ) > listSize();\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    resize,\r\n    trackSize,\r\n    listSize,\r\n    slideSize,\r\n    sliderSize,\r\n    totalSize,\r\n    getPadding,\r\n    isOverflow,\r\n  };\r\n};\r\n","import { EVENT_REFRESH, EVENT_RESIZE, EVENT_UPDATED } from '../../constants/events';\r\nimport { LOOP } from '../../constants/types';\r\nimport { BaseComponent, ComponentConstructor } from '../../types';\r\nimport { addClass, append, before, ceil, empty, isUndefined, pad, push, removeNode } from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The interface for the Clone component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ClonesComponent extends BaseComponent {\r\n}\r\n\r\n/**\r\n * The multiplier to determine the number of clones.\r\n *\r\n * @since 4.0.0\r\n */\r\nexport const MULTIPLIER = 2;\r\n\r\n/**\r\n * The component that generates clones for the loop slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Clones component object.\r\n */\r\nexport const Clones: ComponentConstructor<ClonesComponent> = ( Splide, Components, options, event ) => {\r\n  const { on } = event;\r\n  const { Elements, Slides, Layout: { resize, trackSize } } = Components;\r\n  const { resolve } = Components.Direction;\r\n\r\n  /**\r\n   * Stores all cloned elements.\r\n   */\r\n  const clones: HTMLElement[] = [];\r\n\r\n  /**\r\n   * Keeps the current number of clones.\r\n   */\r\n  let cloneCount: number;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   * Needs to remount the component on refresh, otherwise `refresh` event will be triggered again while refreshing.\r\n   */\r\n  function mount(): void {\r\n    on( EVENT_REFRESH, remount );\r\n    on( [ EVENT_UPDATED, EVENT_RESIZE ], observe );\r\n\r\n    if ( ( cloneCount = computeCloneCount() ) ) {\r\n      generate( cloneCount );\r\n      resize( true );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remounts the component.\r\n   */\r\n  function remount(): void {\r\n    destroy();\r\n    mount();\r\n    resize( true );\r\n  }\r\n\r\n  /**\r\n   * Destroys clones.\r\n   */\r\n  function destroy(): void {\r\n    removeNode( clones );\r\n    empty( clones );\r\n    event.destroy();\r\n  }\r\n\r\n  /**\r\n   * Observes the required clone count and refreshes the slider if necessary.\r\n   * If clones are disabled by `0`, moves the carousel to the first slide.\r\n   */\r\n  function observe(): void {\r\n    const count = computeCloneCount();\r\n\r\n    if ( cloneCount !== count ) {\r\n      if ( cloneCount < count || ! count ) {\r\n        ! count && Splide.go( 0 );\r\n        event.emit( EVENT_REFRESH );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates the specified number of clones.\r\n   *\r\n   * @param count - The number of clones to generate for each side.\r\n   */\r\n  function generate( count: number ): void {\r\n    const slides = Slides.get().slice();\r\n    const { length } = slides;\r\n\r\n    if ( length ) {\r\n      while ( slides.length < count ) {\r\n        push( slides, slides );\r\n      }\r\n\r\n      push( slides.slice( -count ), slides.slice( 0, count ) ).forEach( ( Slide, index ) => {\r\n        const isHead = index < count;\r\n        const clone  = cloneDeep( Slide.slide, index );\r\n        isHead ? before( slides[ 0 ].slide, clone ) : append( Elements.list, clone );\r\n        push( clones, clone );\r\n        Slides.register( clone, index - count + ( isHead ? 0 : length ), Slide.index );\r\n      } );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deeply clones the provided element with removing the ID attribute.\r\n   *\r\n   * @param elm   - An element to clone.\r\n   * @param index - An index of the clone.\r\n   *\r\n   * @return A cloned element.\r\n   */\r\n  function cloneDeep( elm: HTMLElement, index: number ): HTMLElement {\r\n    const clone = elm.cloneNode( true ) as HTMLElement;\r\n    addClass( clone, options.classes.clone );\r\n    clone.id = `${ Splide.root.id }-clone${ pad( index + 1 ) }`;\r\n    return clone;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of elements to generate.\r\n   * This always returns 0 if the slider type is not `'loop'`.\r\n   *\r\n   * @return The number of clones.\r\n   */\r\n  function computeCloneCount(): number {\r\n    let { clones } = options;\r\n\r\n    if ( ! Splide.is( LOOP ) ) {\r\n      clones = 0;\r\n    } else if ( isUndefined( clones ) ) {\r\n      const fixedSize  = options[ resolve( 'fixedWidth' ) ] && Components.Layout.slideSize( 0 );\r\n      const fixedCount = fixedSize && ceil( trackSize() / fixedSize );\r\n      clones = fixedCount || ( options[ resolve( 'autoWidth' ) ] && Splide.length ) || options.perPage * MULTIPLIER;\r\n    }\r\n\r\n    return clones;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy,\r\n  };\r\n};\r\n","import {\r\n  EVENT_MOUNTED,\r\n  EVENT_MOVE,\r\n  EVENT_MOVED,\r\n  EVENT_REFRESH,\r\n  EVENT_RESIZED,\r\n  EVENT_SHIFTED,\r\n  EVENT_UPDATED,\r\n} from '../../constants/events';\r\nimport { IDLE, MOVING } from '../../constants/states';\r\nimport { FADE, LOOP, SLIDE } from '../../constants/types';\r\nimport { AnyFunction, BaseComponent, ComponentConstructor, TransitionComponent } from '../../types';\r\nimport { abs, ceil, clamp, isUndefined, rect, style } from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The interface for the Move component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface MoveComponent extends BaseComponent {\r\n  move( dest: number, index: number, prev: number, forwards: boolean, callback?: AnyFunction ): void;\r\n  jump( index: number ): void;\r\n  translate( position: number, preventLoop?: boolean ): void;\r\n  shift( position: number, backwards: boolean ): number;\r\n  cancel(): void;\r\n  toIndex( position: number ): number;\r\n  toPosition( index: number ): number;\r\n  getPosition(): number;\r\n  getRate( index?: number ): number;\r\n  getLimit( max: boolean ): number;\r\n  exceededLimit( max?: boolean | undefined, position?: number ): boolean;\r\n\r\n  /** @internal */\r\n  reposition(): void;\r\n  canShift( backwards: boolean ): boolean;\r\n}\r\n\r\n/**\r\n * The component for moving the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Move component object.\r\n */\r\nexport const Move: ComponentConstructor<MoveComponent> = ( Splide, Components, options, event ) => {\r\n  const { on, emit } = event;\r\n  const { set, is } = Splide.state;\r\n  const { Slides } = Components;\r\n  const { slideSize, getPadding, listSize, sliderSize, totalSize, trackSize } = Components.Layout;\r\n  const { resolve, orient } = Components.Direction;\r\n  const { list, track } = Components.Elements;\r\n\r\n  /**\r\n   * Holds the Transition component.\r\n   */\r\n  let Transition: TransitionComponent;\r\n\r\n  /**\r\n   * Keeps the latest indices.\r\n   */\r\n  let indices: [ number, number, number ];\r\n\r\n  let callback: AnyFunction;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    Transition = Components.Transition;\r\n    on( [ EVENT_MOUNTED, EVENT_RESIZED, EVENT_UPDATED, EVENT_REFRESH ], reposition );\r\n  }\r\n\r\n  /**\r\n   * Repositions the slider.\r\n   * - Do not call `cancel()` here because LazyLoad may emit resize while transitioning.\r\n   * - iOS Safari emits window resize event while the user swipes the slider because of the bottom bar.\r\n   */\r\n  function reposition(): void {\r\n    if ( ! Components.Controller.isBusy() ) {\r\n      Components.Scroll.cancel();\r\n      jump( Splide.index );\r\n      Slides.update();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Moves the slider to the dest index with the Transition component.\r\n   * Needs to shift the carousel when:\r\n   * - Crossing bounds (dest !== index)\r\n   * - The destination is further than the opposite destination.\r\n   *\r\n   * @param dest     - A destination index to go to, including clones'.\r\n   * @param index    - A slide index.\r\n   * @param prev     - A previous index.\r\n   * @param forwards - Specifies the move direction.\r\n   * @param onMoved  - Optional. A callback function invoked after transition ends.\r\n   */\r\n  function move( dest: number, index: number, prev: number, forwards: boolean, onMoved?: AnyFunction ): void {\r\n    cancel();\r\n\r\n    const shiftBackwards = dest !== index ? dest > index : forwards;\r\n    const shouldShift    = ( dest !== index || exceededLimit( forwards ) ) && canShift( shiftBackwards );\r\n\r\n    shouldShift && translate( shift( getPosition(), shiftBackwards ), true );\r\n\r\n    indices  = [ index, prev, dest ];\r\n    callback = onMoved;\r\n\r\n    set( MOVING );\r\n    emit( EVENT_MOVE, index, prev, dest );\r\n    Transition.start( index, onTransitionEnd );\r\n  }\r\n\r\n  /**\r\n   * Called when transition ends or is cancelled.\r\n   */\r\n  function onTransitionEnd(): void {\r\n    set( IDLE );\r\n    emit( EVENT_MOVED, ...indices );\r\n    callback && callback();\r\n  }\r\n\r\n  /**\r\n   * Cancels transition.\r\n   */\r\n  function cancel(): void {\r\n    if ( is( MOVING ) && indices ) {\r\n      translate( getPosition(), true );\r\n      Transition.cancel();\r\n      onTransitionEnd();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Jumps to the slide at the specified index (silently).\r\n   *\r\n   * @param index - An index to jump to.\r\n   */\r\n  function jump( index: number ): void {\r\n    translate( toPosition( index ) );\r\n  }\r\n\r\n  /**\r\n   * Moves the slider to the provided position.\r\n   *\r\n   * @param position    - The position to move to.\r\n   * @param preventLoop - Optional. If `true`, sets the provided position as is.\r\n   */\r\n  function translate( position: number, preventLoop?: boolean ): void {\r\n    if ( ! Splide.is( FADE ) ) {\r\n      const destination = preventLoop ? position : loop( position );\r\n      style( list, 'transform', `translate${ resolve( 'X' ) }(${ destination }px)` );\r\n      position !== destination && emit( EVENT_SHIFTED );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Loops the provided position if it exceeds bounds (limit indices).\r\n   *\r\n   * @param position - A position to loop.\r\n   *\r\n   * @return A looped position.\r\n   */\r\n  function loop( position: number ): number {\r\n    if ( Splide.is( LOOP ) ) {\r\n      const diff = orient( position ) - orient( getPosition() );\r\n\r\n      if ( diff && exceededLimit( diff > 0, position ) ) {\r\n        position = shift( position, diff > 0 );\r\n      }\r\n    }\r\n\r\n    return position;\r\n  }\r\n\r\n  /**\r\n   * Adds or subtracts the carousel width to the provided position.\r\n   *\r\n   * @param position  - A position to shift.\r\n   * @param backwards - Determines whether to shift the carousel backwards or forwards.\r\n   *\r\n   * @return The shifted position.\r\n   */\r\n  function shift( position: number, backwards: boolean ): number {\r\n    const excess = position - getLimit( backwards );\r\n    const size   = sliderSize();\r\n    position -= orient( size * ( ceil( abs( excess ) / size ) || 1 ) ) * ( backwards ? 1 : -1 );\r\n    return position;\r\n  }\r\n\r\n  /**\r\n   * Returns the closest index to the position.\r\n   *\r\n   * @param position - A position to convert.\r\n   *\r\n   * @return The closest index to the position.\r\n   */\r\n  function toIndex( position: number ): number {\r\n    const slides = Slides.get();\r\n\r\n    let index       = 0;\r\n    let minDistance = Infinity;\r\n\r\n    for ( let i = 0; i < slides.length; i++ ) {\r\n      const slideIndex = slides[ i ].index;\r\n      const distance   = abs( toPosition( slideIndex ) - position );\r\n\r\n      if ( distance <= minDistance ) {\r\n        minDistance = distance;\r\n        index       = slideIndex;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * Converts the slide index to the position.\r\n   *\r\n   * @param index - An index to convert.\r\n   *\r\n   * @return The position corresponding with the index.\r\n   */\r\n  function toPosition( index: number ): number {\r\n    let position = orient( totalSize( index - 1 ) - offset( index ) );\r\n\r\n    if ( options.trimSpace && Splide.is( SLIDE ) ) {\r\n      position = clamp( position, 0, orient( sliderSize( true ) - listSize() ) );\r\n    }\r\n\r\n    return position;\r\n  }\r\n\r\n  /**\r\n   * Returns the current position.\r\n   *\r\n   * @return The position of the list element.\r\n   */\r\n  function getPosition(): number {\r\n    const left = resolve( 'left' );\r\n    return rect( list )[ left ] - rect( track )[ left ] + orient( getPadding( false ) );\r\n  }\r\n\r\n  /**\r\n   * Returns the carousel progress rate.\r\n   *\r\n   * @param index - Optional. If specified, returns the rate of the slide at the index.\r\n   *\r\n   * @return The progress rate.\r\n   */\r\n  function getRate( index?: number ): number {\r\n    const useIndex = ! isUndefined( index );\r\n    let rate;\r\n\r\n    if ( Splide.is( FADE ) ) {\r\n      rate = ( useIndex ? index : Splide.index ) / ( Splide.length - 1 );\r\n    } else {\r\n      const isLoop   = Splide.is( LOOP );\r\n      const position = orient( useIndex ? toPosition( index ) : getPosition() );\r\n      const min      = orient( getLimit( false ) );\r\n      const max      = orient( getLimit( true ) );\r\n      const size     = sliderSize();\r\n      const curr     = ( position - min ) % size;\r\n      const base     = isLoop ? size : max - min;\r\n\r\n      rate = ( curr / base ) || 0;\r\n\r\n      if ( isLoop && rate < 0 ) {\r\n        rate += 1;\r\n      }\r\n    }\r\n\r\n    return clamp( rate, 0, 1 );\r\n  }\r\n\r\n  /**\r\n   * Returns the offset amount.\r\n   *\r\n   * @param index - An index.\r\n   */\r\n  function offset( index: number ): number {\r\n    const { focus } = options;\r\n    return focus === 'center'\r\n      ? ( listSize() - slideSize( index, true ) ) / 2\r\n      : +focus * slideSize( index ) || 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the limit number that the slider can move to.\r\n   *\r\n   * @param max - Determines whether to return the maximum or minimum limit.\r\n   *\r\n   * @return The border number.\r\n   */\r\n  function getLimit( max: boolean ): number {\r\n    return toPosition( max ? Components.Controller.getEnd() : 0 );\r\n  }\r\n\r\n  /**\r\n   * Checks if there is enough width to shift the slider.\r\n   *\r\n   * @param backwards - `true` for checking backwards, or `false` for doing forwards.\r\n   *\r\n   * @return `true` if the slider can be shifted for the specified direction, or otherwise `false`.\r\n   */\r\n  function canShift( backwards: boolean ): boolean {\r\n    const padding = getPadding( false );\r\n    const shifted = orient( shift( getPosition(), backwards ) );\r\n    return backwards ? shifted >= padding : shifted <= listSize( true ) - trackSize() + padding;\r\n  }\r\n\r\n  /**\r\n   * Checks if the provided position exceeds the minimum or maximum limit or not.\r\n   *\r\n   * @param max      - Optional. `true` for testing max, `false` for min, and `undefined` for both.\r\n   * @param position - Optional. A position to test. If omitted, tests the current position.\r\n   *\r\n   * @return `true` if the position exceeds the limit, or otherwise `false`.\r\n   */\r\n  function exceededLimit( max?: boolean | undefined, position = getPosition() ): boolean {\r\n    const exceededMin = max !== true && orient( position ) < orient( getLimit( false ) );\r\n    const exceededMax = max !== false && orient( position ) > orient( getLimit( true ) );\r\n    return exceededMin || exceededMax;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    move,\r\n    jump,\r\n    translate,\r\n    shift,\r\n    cancel,\r\n    toIndex,\r\n    toPosition,\r\n    getPosition,\r\n    getRate,\r\n    getLimit,\r\n    exceededLimit,\r\n    reposition,\r\n    canShift,\r\n  };\r\n};\r\n","import {\r\n  EVENT_MOVE,\r\n  EVENT_REFRESH,\r\n  EVENT_SCROLL,\r\n  EVENT_SCROLLED,\r\n  EVENT_SCROLLING,\r\n  EVENT_UPDATED,\r\n} from '../../constants/events';\r\nimport { IDLE, SCROLLING } from '../../constants/states';\r\nimport { SLIDE } from '../../constants/types';\r\nimport { AnyFunction, BaseComponent, ComponentConstructor } from '../../types';\r\nimport { abs, apply, approximatelyEqual, max, RequestInterval } from '@splidejs/utils';\r\nimport { BASE_VELOCITY, BOUNCE_DIFF_THRESHOLD, BOUNCE_DURATION, FRICTION_FACTOR, MIN_DURATION } from './constants';\r\n\r\n\r\n/**\r\n * The interface for the Scroll component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ScrollComponent extends BaseComponent {\r\n  scroll( position: number, duration?: number, snap?: boolean, callback?: AnyFunction ): void;\r\n  cancel(): void;\r\n}\r\n\r\n/**\r\n * The component for scrolling the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Scroll component object.\r\n */\r\nexport const Scroll: ComponentConstructor<ScrollComponent> = ( Splide, Components, options, event ) => {\r\n  const { on, emit } = event;\r\n  const { state: { set } } = Splide;\r\n  const { Move } = Components;\r\n  const { getPosition, getLimit, exceededLimit, translate } = Move;\r\n  const isSlide = Splide.is( SLIDE );\r\n\r\n  /**\r\n   * Retains the active RequestInterval object.\r\n   */\r\n  let interval: RequestInterval;\r\n\r\n  /**\r\n   * Holds the callback function.\r\n   */\r\n  let callback: AnyFunction;\r\n\r\n  /**\r\n   * The current friction (<= 1).\r\n   */\r\n  let friction = 1;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    on( EVENT_MOVE, clear );\r\n    on( [ EVENT_UPDATED, EVENT_REFRESH ], cancel );\r\n  }\r\n\r\n  /**\r\n   * Scrolls the slider to the provided destination.\r\n   *\r\n   * @param destination - The destination to scroll the slider to.\r\n   * @param duration    - Optional. The scroll duration. If omitted, calculates it by the distance.\r\n   * @param snap        - Optional. Whether to snap the slider to the closest slide or not.\r\n   * @param onScrolled  - Optional. A callback invoked after scroll ends.\r\n   * @param noConstrain - Optional. Whether to suppress constraint process when the slider exceeds bounds.\r\n   */\r\n  function scroll(\r\n    destination: number,\r\n    duration?: number,\r\n    snap?: boolean,\r\n    onScrolled?: AnyFunction,\r\n    noConstrain?: boolean\r\n  ): void {\r\n    clear();\r\n\r\n    const dest        = computeDestination( destination, snap );\r\n    const from        = getPosition();\r\n    const immediately = approximatelyEqual( from, dest, 1 ) || duration === 0;\r\n\r\n    friction = 1;\r\n    duration = immediately ? 0 : duration || max( abs( dest - from ) / BASE_VELOCITY, MIN_DURATION );\r\n    callback = onScrolled;\r\n    interval = RequestInterval( duration, onEnd, apply( update, from, dest, noConstrain ), 1 );\r\n\r\n    set( SCROLLING );\r\n    emit( EVENT_SCROLL );\r\n    interval.start();\r\n  }\r\n\r\n  /**\r\n   * Computes destination.\r\n   *\r\n   * @param destination - A desired destination.\r\n   * @param snap        - Optional. Whether to snap the slider to the closest slide or not.\r\n   *\r\n   * @return A computed destination.\r\n   */\r\n  function computeDestination( destination: number, snap?: boolean ): number {\r\n    if ( snap ) {\r\n      if ( ! isSlide || ! exceededLimit() ) {\r\n        const position = destination % Components.Layout.sliderSize();\r\n        const snapped  = Move.toPosition( Components.Controller.toDest( position ) );\r\n        destination -= position - snapped;\r\n      }\r\n    }\r\n\r\n    return destination;\r\n  }\r\n\r\n  /**\r\n   * Called when scroll ends or has been just canceled.\r\n   */\r\n  function onEnd(): void {\r\n    set( IDLE );\r\n    callback && callback();\r\n    emit( EVENT_SCROLLED );\r\n  }\r\n\r\n  /**\r\n   * Called whenever the interval timer is updated.\r\n   *\r\n   * @param from        - A position where scroll starts.\r\n   * @param to          - A destination where the slider goes.\r\n   * @param noConstrain - Whether to suppress constraint process when the slider exceeds bounds.\r\n   * @param rate        - A current rate.\r\n   */\r\n  function update( from: number, to: number, noConstrain: boolean | undefined, rate: number ): void {\r\n    const { easingFunc = t => 1 - Math.pow( 1 - t, 4 ) } = options;\r\n    const position = getPosition();\r\n    const target   = from + ( to - from ) * easingFunc( rate );\r\n    const diff     = ( target - position ) * friction;\r\n\r\n    translate( position + diff );\r\n    emit( EVENT_SCROLLING );\r\n\r\n    if ( isSlide && ! noConstrain && exceededLimit() ) {\r\n      friction *= FRICTION_FACTOR;\r\n\r\n      if ( abs( diff ) < BOUNCE_DIFF_THRESHOLD ) {\r\n        scroll( getLimit( exceededLimit( true ) ), BOUNCE_DURATION, false, callback, true );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clears the active interval.\r\n   */\r\n  function clear(): void {\r\n    if ( interval ) {\r\n      interval.cancel();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancels the active interval and emits the `scrolled` event.\r\n   */\r\n  function cancel(): void {\r\n    if ( interval && ! interval.isPaused() ) {\r\n      clear();\r\n      onEnd();\r\n    }\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy: clear,\r\n    scroll,\r\n    cancel,\r\n  };\r\n};\r\n","/**\r\n * Triggers the bounce effect when the diff becomes less than this value.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const BOUNCE_DIFF_THRESHOLD = 10;\r\n\r\n/**\r\n * The duration of the bounce effect.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const BOUNCE_DURATION = 600;\r\n\r\n/**\r\n * The friction factor.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const FRICTION_FACTOR = 0.6;\r\n\r\n/**\r\n * The velocity to calculate the scroll duration.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const BASE_VELOCITY = 1.5;\r\n\r\n/**\r\n * The minimum duration of scroll.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const MIN_DURATION = 800;\r\n","import { EVENT_END_INDEX_CHANGED, EVENT_REFRESH, EVENT_RESIZED, EVENT_UPDATED } from '../../constants/events';\r\nimport { MOVING, SCROLLING } from '../../constants/states';\r\nimport { LOOP, SLIDE } from '../../constants/types';\r\nimport { AnyFunction, BaseComponent, ComponentConstructor } from '../../types';\r\nimport {\r\n  apply,\r\n  approximatelyEqual,\r\n  between,\r\n  clamp,\r\n  floor,\r\n  includes,\r\n  isString,\r\n  isUndefined,\r\n  min,\r\n} from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The interface for the Controller component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ControllerComponent extends BaseComponent {\r\n  go( control: number | string, callback?: AnyFunction ): void;\r\n  jump( control: number | string ): void;\r\n  scroll( destination: number, duration?: number, snap?: boolean, callback?: AnyFunction ): void;\r\n  getNext( destination?: boolean ): number;\r\n  getPrev( destination?: boolean ): number;\r\n  getEnd(): number;\r\n  setIndex( index: number ): void;\r\n  getIndex( prev?: boolean ): number;\r\n  toIndex( page: number ): number;\r\n  toPage( index: number ): number;\r\n  toDest( position: number ): number;\r\n  hasFocus(): boolean;\r\n  isBusy(): boolean;\r\n\r\n  /** @internal */\r\n  getAdjacent( prev: boolean, destination?: boolean ): number;\r\n}\r\n\r\n/**\r\n * The component for controlling the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Controller component object.\r\n */\r\nexport const Controller: ComponentConstructor<ControllerComponent> = ( Splide, Components, options, event ) => {\r\n  const { on, emit } = event;\r\n  const { Move, Scroll } = Components;\r\n  const { getPosition, getLimit, toPosition } = Move;\r\n  const { isEnough, getLength } = Components.Slides;\r\n  const { omitEnd } = options;\r\n  const isLoop  = Splide.is( LOOP );\r\n  const isSlide = Splide.is( SLIDE );\r\n  const getNext = apply( getAdjacent, false );\r\n  const getPrev = apply( getAdjacent, true );\r\n\r\n  /**\r\n   * The current index.\r\n   */\r\n  let currIndex = options.start || 0;\r\n\r\n  /**\r\n   * The latest end index.\r\n   */\r\n  let endIndex: number;\r\n\r\n  /**\r\n   * The previous index.\r\n   */\r\n  let prevIndex = currIndex;\r\n\r\n  /**\r\n   * The latest number of slides.\r\n   */\r\n  let slideCount: number;\r\n\r\n  /**\r\n   * The latest `perMove` value.\r\n   */\r\n  let perMove: number;\r\n\r\n  /**\r\n   * The latest `perMove` value.\r\n   */\r\n  let perPage: number;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on( [ EVENT_UPDATED, EVENT_REFRESH, EVENT_END_INDEX_CHANGED ], init );\r\n    on( EVENT_RESIZED, onResized );\r\n  }\r\n\r\n  /**\r\n   * Initializes some parameters.\r\n   * Needs to check the number of slides since the current index may be out of the range after refresh.\r\n   * The process order must be Elements -> Controller -> Move.\r\n   */\r\n  function init(): void {\r\n    slideCount = getLength( true );\r\n    perMove    = options.perMove;\r\n    perPage    = options.perPage;\r\n    endIndex   = getEnd();\r\n\r\n    const end   = omitEnd ? endIndex : slideCount - 1;\r\n    const index = clamp( currIndex, 0, end );\r\n\r\n    prevIndex = index;\r\n\r\n    if ( index !== currIndex ) {\r\n      currIndex = index;\r\n      Move.reposition();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the viewport width is changed.\r\n   * The end index can change if `autoWidth` or `fixedWidth` is enabled.\r\n   */\r\n  function onResized(): void {\r\n    if ( endIndex !== getEnd() ) {\r\n      emit( EVENT_END_INDEX_CHANGED );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Moves the carousel by the control pattern.\r\n   * - `Move.exceededLimit( ! forwards )` checks if the carousel is already shifted\r\n   * - `Move.canShift( forwards )` checks if there is enough space to shift the carousel.\r\n   *\r\n   * @see `Splide#go()`\r\n   *\r\n   * @param control  - A control pattern.\r\n   * @param callback - Optional. A callback function invoked after transition ends.\r\n   */\r\n  function go( control: number | string, callback?: AnyFunction ): void {\r\n    if ( ! isBusy() ) {\r\n      const [ dest, forwards ] = parse( control );\r\n      const index = loop( dest );\r\n      const canGo = dest === index || Move.exceededLimit( ! forwards ) || Move.canShift( forwards );\r\n\r\n      if ( index > -1 && canGo ) {\r\n        Scroll.cancel();\r\n        setIndex( index );\r\n        Move.move( dest, index, prevIndex, forwards, callback );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Immediately jumps to the specified index.\r\n   *\r\n   * @param control - An index where to jump.\r\n   */\r\n  function jump( control: number | string ): void {\r\n    const { set } = Components.Breakpoints;\r\n    const { speed } = options;\r\n\r\n    set( { speed: 0 } );\r\n    go( control );\r\n    set( { speed } );\r\n  }\r\n\r\n  /**\r\n   * Scrolls the slider to the specified destination with updating indices.\r\n   *\r\n   * @param destination - The position to scroll the slider to.\r\n   * @param duration    - Optional. Specifies the scroll duration.\r\n   * @param snap        - Optional. Whether to snap the slider to the closest slide or not.\r\n   * @param callback    - Optional. A callback function invoked after scroll ends.\r\n   */\r\n  function scroll( destination: number, duration?: number, snap?: boolean, callback?: AnyFunction ): void {\r\n    Scroll.scroll( destination, duration, snap, () => {\r\n      const index = loop( Move.toIndex( getPosition() ) );\r\n      setIndex( omitEnd ? min( index, endIndex ) : index );\r\n      callback && callback();\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Parses the control and returns a dest index.\r\n   *\r\n   * @param control - A control pattern to parse.\r\n   *\r\n   * @return A `dest` index.\r\n   */\r\n  function parse( control: number | string ): [ number, boolean ] {\r\n    let dest     = currIndex;\r\n    let forwards = true;\r\n\r\n    if ( isString( control ) ) {\r\n      const [ , indicator, number ] = control.match( /([+-]|>>?|<<?)(-?\\d+)?/ ) || [];\r\n      const oneOf = ( ...indicators: string[] ) => includes( indicators, indicator );\r\n\r\n      forwards = oneOf( '+', '>', '>>' );\r\n\r\n      if ( oneOf( '+', '-' ) ) {\r\n        dest = computeDestIndex( currIndex + +`${ indicator }${ +number || 1 }`, currIndex );\r\n      } else if ( oneOf( '>', '<' ) ) {\r\n        dest = number ? toIndex( +number ) : getAdjacent( ! forwards, true );\r\n      } else if ( oneOf( '>>', '<<' ) ) {\r\n        dest = number ? +number || 0 : forwards ? endIndex : 0;\r\n      }\r\n    } else {\r\n      dest = isLoop ? control : clamp( control, 0, endIndex );\r\n    }\r\n\r\n    return [ dest, forwards ];\r\n  }\r\n\r\n  /**\r\n   * Returns an adjacent destination index.\r\n   *\r\n   * @internal\r\n   *\r\n   * @param prev        - Determines whether to return a previous or next index.\r\n   * @param destination - Optional. Determines whether to get a destination index or a slide one.\r\n   *\r\n   * @return An adjacent index if available, or otherwise `-1`.\r\n   */\r\n  function getAdjacent( prev: boolean, destination?: boolean ): number {\r\n    const number = perMove || ( hasFocus() ? 1 : perPage );\r\n    const dest   = computeDestIndex( currIndex + number * ( prev ? -1 : 1 ), currIndex, ! ( perMove || hasFocus() ) );\r\n\r\n    if ( dest === -1 && isSlide ) {\r\n      if ( ! approximatelyEqual( getPosition(), getLimit( ! prev ), 1 ) ) {\r\n        return prev ? 0 : endIndex;\r\n      }\r\n    }\r\n\r\n    return destination ? dest : loop( dest );\r\n  }\r\n\r\n  /**\r\n   * Converts the desired destination index to the valid one.\r\n   * - If the `move` option is `true`, finds the dest index whose position is different with the current one.\r\n   * - This may return clone indices if the editor is the loop mode,\r\n   *   or `-1` if there is no slide to go.\r\n   * - There are still slides where the carousel can go if borders are between `from` and `dest`.\r\n   * - If `focus` is available, needs to calculate the dest index even if there are enough number of slides.\r\n   *\r\n   * @param dest     - The desired destination index.\r\n   * @param from     - A base index.\r\n   * @param snapPage - Optional. Whether to snap a page or not.\r\n   *\r\n   * @return A converted destination index, including clones.\r\n   */\r\n  function computeDestIndex( dest: number, from: number, snapPage?: boolean ): number {\r\n    if ( isEnough() || hasFocus() ) {\r\n      const index = computeMovableDestIndex( dest );\r\n\r\n      if ( index !== dest ) {\r\n        from     = dest;\r\n        dest     = index;\r\n        snapPage = false;\r\n      }\r\n\r\n      if ( dest < 0 || dest > endIndex ) {\r\n        if ( ! perMove && ( between( 0, dest, from, true ) || between( endIndex, from, dest, true ) ) ) {\r\n          dest = toIndex( toPage( dest ) );\r\n        } else {\r\n          if ( isLoop ) {\r\n            dest = snapPage\r\n              ? dest < 0 ? - ( slideCount % perPage || perPage ) : slideCount\r\n              : dest;\r\n          } else if ( options.rewind ) {\r\n            dest = dest < 0 ? endIndex : 0;\r\n          } else {\r\n            dest = -1;\r\n          }\r\n        }\r\n      } else {\r\n        if ( snapPage && dest !== from ) {\r\n          dest = toIndex( toPage( from ) + ( dest < from ? -1 : 1 ) );\r\n        }\r\n      }\r\n    } else {\r\n      dest = -1;\r\n    }\r\n\r\n    return dest;\r\n  }\r\n\r\n  /**\r\n   * Finds the dest index whose position is different with the current one for `trimSpace: 'move'`.\r\n   * This can be negative or greater than `length - 1`.\r\n   *\r\n   * @param dest - A dest index.\r\n   *\r\n   * @return A dest index.\r\n   */\r\n  function computeMovableDestIndex( dest: number ): number {\r\n    if ( isSlide && options.trimSpace === 'move' && dest !== currIndex ) {\r\n      const position = getPosition();\r\n\r\n      while ( position === toPosition( dest ) && between( dest, 0, Splide.length - 1, ! options.rewind ) ) {\r\n        dest < currIndex ? --dest : ++dest;\r\n      }\r\n    }\r\n\r\n    return dest;\r\n  }\r\n\r\n  /**\r\n   * Loops the provided index only in the loop mode.\r\n   *\r\n   * @param index - An index to loop.\r\n   *\r\n   * @return A looped index.\r\n   */\r\n  function loop( index: number ): number {\r\n    return isLoop ? ( index + slideCount ) % slideCount || 0 : index;\r\n  }\r\n\r\n  /**\r\n   * Returns the end index where the slider can go.\r\n   * For example, if the slider has 10 slides and the `perPage` option is 3,\r\n   * the slider can go to the slide 8 (the index is 7).\r\n   * If the `omitEnd` option is available, computes the index from the slide position.\r\n   *\r\n   * @return An end index.\r\n   */\r\n  function getEnd(): number {\r\n    let end = slideCount - ( hasFocus() || ( isLoop && perMove ) ? 1 : perPage );\r\n\r\n    while ( omitEnd && end-- > 0 ) {\r\n      if ( toPosition( slideCount - 1 ) !== toPosition( end ) ) {\r\n        end++;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return clamp( end, 0, slideCount - 1 );\r\n  }\r\n\r\n  /**\r\n   * Converts the page index to the slide index.\r\n   *\r\n   * @param page - A page index to convert.\r\n   *\r\n   * @return A slide index.\r\n   */\r\n  function toIndex( page: number ): number {\r\n    return clamp( hasFocus() ? page : perPage * page, 0, endIndex );\r\n  }\r\n\r\n  /**\r\n   * Converts the slide index to the page index.\r\n   *\r\n   * @param index - An index to convert.\r\n   *\r\n   * @return A page index.\r\n   */\r\n  function toPage( index: number ): number {\r\n    return hasFocus()\r\n      ? min( index, endIndex )\r\n      : floor( ( index >= endIndex ? slideCount - 1 : index ) / perPage );\r\n  }\r\n\r\n  /**\r\n   * Converts the destination position to the dest index.\r\n   *\r\n   * @param destination - A position to convert.\r\n   *\r\n   * @return A dest index.\r\n   */\r\n  function toDest( destination: number ): number {\r\n    const closest = Move.toIndex( destination );\r\n    return isSlide ? clamp( closest, 0, endIndex ) : closest;\r\n  }\r\n\r\n  /**\r\n   * Sets a new index and retains old one.\r\n   *\r\n   * @param index - A new index to set.\r\n   */\r\n  function setIndex( index: number ): void {\r\n    if ( index !== currIndex ) {\r\n      prevIndex = currIndex;\r\n      currIndex = index;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the current/previous index.\r\n   *\r\n   * @param prev - Optional. Whether to return previous index or not.\r\n   */\r\n  function getIndex( prev?: boolean ): number {\r\n    return prev ? prevIndex : currIndex;\r\n  }\r\n\r\n  /**\r\n   * Verifies if the focus option is available or not.\r\n   *\r\n   * @return `true` if the slider has the focus option.\r\n   */\r\n  function hasFocus(): boolean {\r\n    return ! isUndefined( options.focus ) || options.isNavigation;\r\n  }\r\n\r\n  /**\r\n   * Checks if the carousel is moving now or not.\r\n   *\r\n   * @return `true` if the carousel is moving or scrolling, or otherwise `false`.\r\n   */\r\n  function isMoving(): boolean {\r\n    return Splide.state.is( [ MOVING, SCROLLING ] );\r\n  }\r\n\r\n  /**\r\n   * Checks if the slider is moving/scrolling or not.\r\n   *\r\n   * @return `true` if the slider can move, or otherwise `false`.\r\n   */\r\n  function isBusy(): boolean {\r\n    return isMoving() && !! options.waitForTransition;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    go,\r\n    jump,\r\n    scroll,\r\n    getNext,\r\n    getPrev,\r\n    getAdjacent,\r\n    getEnd,\r\n    setIndex,\r\n    getIndex,\r\n    toIndex,\r\n    toPage,\r\n    toDest,\r\n    hasFocus,\r\n    isBusy,\r\n  };\r\n};\r\n","import { ALL_ATTRIBUTES, ARIA_CONTROLS, ARIA_LABEL } from '../../constants/attributes';\r\nimport { CLASS_ARROWS } from '../../constants/classes';\r\nimport {\r\n  EVENT_ARROWS_MOUNTED,\r\n  EVENT_ARROWS_UPDATED,\r\n  EVENT_END_INDEX_CHANGED,\r\n  EVENT_MOUNTED,\r\n  EVENT_MOVED,\r\n  EVENT_REFRESH,\r\n  EVENT_SCROLLED,\r\n  EVENT_UPDATED,\r\n} from '../../constants/events';\r\nimport { BaseComponent, ComponentConstructor } from '../../types';\r\nimport {\r\n  addClass,\r\n  append,\r\n  apply,\r\n  assign,\r\n  before,\r\n  create,\r\n  display,\r\n  parseHtml,\r\n  removeAttribute,\r\n  removeClass,\r\n  removeNode,\r\n  setAttribute,\r\n} from '@splidejs/utils';\r\nimport { PATH, SIZE, XML_NAME_SPACE } from './path';\r\n\r\n\r\n/**\r\n * The interface for the Arrows component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ArrowsComponent extends BaseComponent {\r\n  readonly arrows: { readonly prev?: HTMLButtonElement, readonly next?: HTMLButtonElement };\r\n\r\n  /** @internal */\r\n  update(): void;\r\n}\r\n\r\n/**\r\n * The component for handling previous and next arrows.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return An Arrows component object.\r\n */\r\nexport const Arrows: ComponentConstructor<ArrowsComponent> = ( Splide, Components, options, event ) => {\r\n  const { on, bind, emit } = event;\r\n  const { classes, i18n } = options;\r\n  const { Elements, Controller } = Components;\r\n  const { arrows: placeholder, track } = Elements;\r\n\r\n  /**\r\n   * The wrapper element.\r\n   */\r\n  let wrapper = placeholder;\r\n\r\n  /**\r\n   * The previous arrow element.\r\n   */\r\n  let prev = Elements.prev;\r\n\r\n  /**\r\n   * The next arrow element.\r\n   */\r\n  let next = Elements.next;\r\n\r\n  /**\r\n   * Indicates whether the component creates arrows or retrieved from the DOM.\r\n   */\r\n  let created: boolean;\r\n\r\n  /**\r\n   * Holds modifier classes.\r\n   */\r\n  let wrapperClasses: string;\r\n\r\n  /**\r\n   * An object with previous and next arrows.\r\n   */\r\n  const arrows: ArrowsComponent[ 'arrows' ] = {};\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on( EVENT_UPDATED, remount );\r\n  }\r\n\r\n  /**\r\n   * Remounts the component.\r\n   */\r\n  function remount(): void {\r\n    destroy();\r\n    mount();\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   */\r\n  function init(): void {\r\n    const { arrows: enabled = true } = options;\r\n\r\n    if ( enabled && ! ( prev && next ) ) {\r\n      createArrows();\r\n    }\r\n\r\n    if ( prev && next ) {\r\n      assign( arrows, { prev, next } );\r\n      display( wrapper, enabled ? '' : 'none' );\r\n      addClass( wrapper, ( wrapperClasses = `${ CLASS_ARROWS }--${ options.direction }` ) );\r\n\r\n      if ( enabled ) {\r\n        listen();\r\n        update();\r\n        setAttribute( [ prev, next ], ARIA_CONTROLS, track.id );\r\n        emit( EVENT_ARROWS_MOUNTED, prev, next );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    event.destroy();\r\n    removeClass( wrapper, wrapperClasses );\r\n\r\n    if ( created ) {\r\n      removeNode( placeholder ? [ prev, next ] : wrapper );\r\n      prev = next = null;\r\n    } else {\r\n      removeAttribute( [ prev, next ], ALL_ATTRIBUTES );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Listens to some events.\r\n   */\r\n  function listen(): void {\r\n    on( [ EVENT_MOUNTED, EVENT_MOVED, EVENT_REFRESH, EVENT_SCROLLED, EVENT_END_INDEX_CHANGED ], update );\r\n    bind( next, 'click', apply( go, '>' ) );\r\n    bind( prev, 'click', apply( go, '<' ) );\r\n  }\r\n\r\n  /**\r\n   * The wrapper function of Controller#go().\r\n   *\r\n   * @param control - The control pattern.\r\n   */\r\n  function go( control: string ): void {\r\n    Controller.go( control );\r\n  }\r\n\r\n  /**\r\n   * Create arrows and append them to the slider.\r\n   */\r\n  function createArrows(): void {\r\n    wrapper = placeholder || create( 'div', classes.arrows );\r\n    prev    = createArrow( true );\r\n    next    = createArrow( false );\r\n    created = true;\r\n\r\n    append( wrapper, prev, next );\r\n    ! placeholder && before( track, wrapper );\r\n  }\r\n\r\n  /**\r\n   * Creates an arrow button.\r\n   * In IE, A SVG element is focusable.\r\n   *\r\n   * @param prev - Determines whether to create a previous or next arrow.\r\n   *\r\n   * @return A created button element.\r\n   */\r\n  function createArrow( prev: boolean ): HTMLButtonElement {\r\n    const arrow = `<button class=\"${ classes.arrow } ${ prev ? classes.prev : classes.next }\" type=\"button\">`\r\n      +\t`<svg xmlns=\"${ XML_NAME_SPACE }\" viewBox=\"0 0 ${ SIZE } ${ SIZE }\" width=\"${ SIZE }\" height=\"${ SIZE }\">`\r\n      + `<path d=\"${ options.arrowPath || PATH }\" />`;\r\n\r\n    return parseHtml<HTMLButtonElement>( arrow );\r\n  }\r\n\r\n  /**\r\n   * Updates status of arrows, such as `disabled` and `aria-label`.\r\n   */\r\n  function update(): void {\r\n    if ( prev && next ) {\r\n      const index     = Splide.index;\r\n      const prevIndex = Controller.getPrev();\r\n      const nextIndex = Controller.getNext();\r\n      const prevLabel = prevIndex > -1 && index < prevIndex ? i18n.last : i18n.prev;\r\n      const nextLabel = nextIndex > -1 && index > nextIndex ? i18n.first : i18n.next;\r\n\r\n      prev.disabled = prevIndex < 0;\r\n      next.disabled = nextIndex < 0;\r\n\r\n      setAttribute( prev, ARIA_LABEL, prevLabel );\r\n      setAttribute( next, ARIA_LABEL, nextLabel );\r\n\r\n      emit( EVENT_ARROWS_UPDATED, prev, next, prevIndex, nextIndex );\r\n    }\r\n  }\r\n\r\n  return {\r\n    arrows,\r\n    mount,\r\n    destroy,\r\n    update,\r\n  };\r\n};\r\n","/**\r\n * The namespace for SVG elements.\r\n */\r\nexport const XML_NAME_SPACE = 'http://www.w3.org/2000/svg';\r\n\r\n/**\r\n * The arrow path.\r\n */\r\nexport const PATH = 'm15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z';\r\n\r\n/**\r\n * SVG width and height.\r\n */\r\nexport const SIZE = 40;\r\n","import { ARIA_CONTROLS, ARIA_LABEL } from '../../constants/attributes';\r\nimport { CLASS_ACTIVE } from '../../constants/classes';\r\nimport {\r\n  EVENT_AUTOPLAY_PAUSE,\r\n  EVENT_AUTOPLAY_PLAY,\r\n  EVENT_AUTOPLAY_PLAYING,\r\n  EVENT_MOVE,\r\n  EVENT_REFRESH,\r\n  EVENT_SCROLL,\r\n} from '../../constants/events';\r\nimport { BaseComponent, ComponentConstructor } from '../../types';\r\nimport { getAttribute, RequestInterval, setAttribute, style, toggleClass } from '@splidejs/utils';\r\nimport { INTERVAL_DATA_ATTRIBUTE } from './constants';\r\n\r\n\r\n/**\r\n * The interface for the Autoplay component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface AutoplayComponent extends BaseComponent {\r\n  play(): void;\r\n  pause(): void;\r\n  isPaused(): boolean;\r\n}\r\n\r\n/**\r\n * The component for autoplay, handling a progress bar and a toggle button.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return An Autoplay component object.\r\n */\r\nexport const Autoplay: ComponentConstructor<AutoplayComponent> = ( Splide, Components, options, event ) => {\r\n  const { on, bind, emit } = event;\r\n  const { interval: duration = 5000, pauseOnHover = true, pauseOnFocus = true, resetProgress = true } = options;\r\n  const interval = RequestInterval( duration, Splide.go.bind( Splide, '>' ), onAnimationFrame );\r\n  const { isPaused } = interval;\r\n  const { Elements, Elements: { root, toggle } } = Components;\r\n  const { autoplay } = options;\r\n\r\n  /**\r\n   * Indicates whether the slider is hovered or not.\r\n   */\r\n  let hovered: boolean;\r\n\r\n  /**\r\n   * Indicates whether one of slider elements has focus or not.\r\n   */\r\n  let focused: boolean;\r\n\r\n  /**\r\n   * Indicates whether the autoplay is stopped or not.\r\n   * If stopped, autoplay won't start automatically unless `play()` is explicitly called.\r\n   */\r\n  let stopped = autoplay === 'pause';\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    if ( autoplay ) {\r\n      listen();\r\n      toggle && setAttribute( toggle, ARIA_CONTROLS, Elements.track.id );\r\n      stopped || play();\r\n      update();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Listens to some events.\r\n   */\r\n  function listen(): void {\r\n    if ( pauseOnHover ) {\r\n      bind( root, 'mouseenter mouseleave', e => {\r\n        hovered = e.type === 'mouseenter';\r\n        autoToggle();\r\n      } );\r\n    }\r\n\r\n    if ( pauseOnFocus ) {\r\n      bind( root, 'focusin focusout', e => {\r\n        focused = e.type === 'focusin';\r\n        autoToggle();\r\n      } );\r\n    }\r\n\r\n    if ( toggle ) {\r\n      bind( toggle, 'click', () => {\r\n        stopped ? play() : pause( true );\r\n      } );\r\n    }\r\n\r\n    on( [ EVENT_MOVE, EVENT_SCROLL, EVENT_REFRESH ], interval.rewind );\r\n    on( EVENT_MOVE, onMove );\r\n  }\r\n\r\n  /**\r\n   * Starts autoplay and clears all flags.\r\n   */\r\n  function play(): void {\r\n    if ( isPaused() && Components.Slides.isEnough() ) {\r\n      interval.start( ! resetProgress );\r\n      focused = hovered = stopped = false;\r\n      update();\r\n      emit( EVENT_AUTOPLAY_PLAY );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pauses autoplay.\r\n   *\r\n   * @param stop - If `true`, autoplay keeps paused until `play()` is explicitly called.\r\n   */\r\n  function pause( stop = true ): void {\r\n    stopped = !! stop;\r\n    update();\r\n\r\n    if ( ! isPaused() ) {\r\n      interval.pause();\r\n      emit( EVENT_AUTOPLAY_PAUSE );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggles play/pause according to current flags.\r\n   * If autoplay is manually paused, this will do nothing.\r\n   */\r\n  function autoToggle(): void {\r\n    if ( ! stopped ) {\r\n      hovered || focused ? pause( false ) : play();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the toggle button status.\r\n   */\r\n  function update(): void {\r\n    if ( toggle ) {\r\n      toggleClass( toggle, CLASS_ACTIVE, ! stopped );\r\n      setAttribute( toggle, ARIA_LABEL, options.i18n[ stopped ? 'play' : 'pause' ] );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called on every animation frame while autoplay is active.\r\n   *\r\n   * @param rate - The progress rate between 0 and 1.\r\n   */\r\n  function onAnimationFrame( rate: number ): void {\r\n    const { bar } = Elements;\r\n    bar && style( bar, 'width', `${ rate * 100 }%` );\r\n    emit( EVENT_AUTOPLAY_PLAYING, rate );\r\n  }\r\n\r\n  /**\r\n   * Updates or restores the interval duration.\r\n   *\r\n   * @param index - An index to move to.\r\n   */\r\n  function onMove( index: number ): void {\r\n    const Slide = Components.Slides.getAt( index );\r\n    interval.set( Slide && +getAttribute( Slide.slide, INTERVAL_DATA_ATTRIBUTE ) || options.interval );\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy: interval.cancel,\r\n    play,\r\n    pause,\r\n    isPaused,\r\n  };\r\n};\r\n","import { CLASS_ARROW, CLASS_PAGINATION_PAGE } from '../../constants/classes';\r\nimport { EVENT_DRAG, EVENT_DRAGGED, EVENT_DRAGGING, EVENT_MOUNTED, EVENT_UPDATED } from '../../constants/events';\r\nimport { SCROLL_LISTENER_OPTIONS } from '../../constants/listener-options';\r\nimport { DRAGGING, IDLE, MOVING, SCROLLING } from '../../constants/states';\r\nimport { FADE, LOOP, SLIDE } from '../../constants/types';\r\nimport { BaseComponent, ComponentConstructor } from '../../types';\r\nimport { abs, isObject, matches, min, noop, prevent, sign, timeOf } from '@splidejs/utils';\r\nimport { FRICTION, LOG_INTERVAL, POINTER_DOWN_EVENTS, POINTER_MOVE_EVENTS, POINTER_UP_EVENTS } from './constants';\r\n\r\n\r\n/**\r\n * The interface for the Drag component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface DragComponent extends BaseComponent {\r\n  disable( disabled: boolean ): void;\r\n  isDragging(): boolean;\r\n}\r\n\r\n/**\r\n * The component for dragging the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Drag component object.\r\n */\r\nexport const Drag: ComponentConstructor<DragComponent> = ( Splide, Components, options, event ) => {\r\n  const { on, emit, bind } = event;\r\n  const binder = event.create();\r\n  const { state } = Splide;\r\n  const { Move, Scroll, Controller, Elements: { track }, Breakpoints: { reduce } } = Components;\r\n  const { resolve, orient } = Components.Direction;\r\n  const { getPosition, exceededLimit } = Move;\r\n\r\n  /**\r\n   * The position where the pointer gets active.\r\n   */\r\n  let startCoord: number;\r\n\r\n  /**\r\n   * The base slider position to calculate the delta of coords.\r\n   */\r\n  let basePosition: number;\r\n\r\n  /**\r\n   * The base event object saved per specific sampling interval.\r\n   */\r\n  let baseEvent: TouchEvent | MouseEvent;\r\n\r\n  /**\r\n   * Holds the previous base event object.\r\n   */\r\n  let prevBaseEvent: TouchEvent | MouseEvent;\r\n\r\n  /**\r\n   * Indicates whether the drag mode is `free` or not.\r\n   */\r\n  let isFree: boolean;\r\n\r\n  /**\r\n   * Indicates whether the user is dragging the slider or not.\r\n   */\r\n  let dragging: boolean;\r\n\r\n  /**\r\n   * Indicates whether the slider exceeds limits or not.\r\n   * This must not be `undefined` for strict comparison.\r\n   */\r\n  let exceeded = false;\r\n\r\n  /**\r\n   * Turns into `true` when the user starts dragging the slider.\r\n   */\r\n  let clickPrevented: boolean;\r\n\r\n  /**\r\n   * Indicates whether the drag component is now disabled or not.\r\n   */\r\n  let disabled: boolean;\r\n\r\n  /**\r\n   * The target element to attach listeners.\r\n   */\r\n  let target: Window | HTMLElement;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    bind( track, POINTER_MOVE_EVENTS, noop, SCROLL_LISTENER_OPTIONS );\r\n    bind( track, POINTER_UP_EVENTS, noop, SCROLL_LISTENER_OPTIONS );\r\n    bind( track, POINTER_DOWN_EVENTS, onPointerDown, SCROLL_LISTENER_OPTIONS );\r\n    bind( track, 'click', onClick, { capture: true } );\r\n    bind( track, 'dragstart', prevent );\r\n    on( [ EVENT_MOUNTED, EVENT_UPDATED ], init );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   */\r\n  function init(): void {\r\n    const { drag } = options;\r\n    disable( ! drag );\r\n    isFree = drag === 'free';\r\n  }\r\n\r\n  /**\r\n   * Called when the user clicks or touches the slider.\r\n   * - Needs to prevent the default behaviour when the slider is busy to deny any action, such as dragging images\r\n   * - IE does not support MouseEvent and TouchEvent constructors\r\n   * - The `dragging` state always becomes `true` when the user starts dragging while the slider is moving\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\r\n  function onPointerDown( e: TouchEvent | MouseEvent ): void {\r\n    clickPrevented = false;\r\n\r\n    if ( ! disabled ) {\r\n      const isTouch = isTouchEvent( e );\r\n\r\n      if ( isDraggable( e.target ) && ( isTouch || ! e.button ) ) {\r\n        if ( ! Controller.isBusy() ) {\r\n          target        = isTouch ? track : window;\r\n          dragging      = state.is( [ MOVING, SCROLLING ] );\r\n          prevBaseEvent = null;\r\n          startCoord    = coordOf( e );\r\n\r\n          binder.bind( target, POINTER_MOVE_EVENTS, onPointerMove, SCROLL_LISTENER_OPTIONS );\r\n          binder.bind( target, POINTER_UP_EVENTS, onPointerUp, SCROLL_LISTENER_OPTIONS );\r\n          Move.cancel();\r\n          Scroll.cancel();\r\n          save( e );\r\n        } else {\r\n          prevent( e, true );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called while the user moves the pointer on the slider.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\r\n  function onPointerMove( e: TouchEvent | MouseEvent ): void {\r\n    if ( ! state.is( DRAGGING ) ) {\r\n      state.set( DRAGGING );\r\n      emit( EVENT_DRAG );\r\n    }\r\n\r\n    if ( shouldRelease( e ) ) {\r\n      return onPointerUp( e );\r\n    }\r\n\r\n    if ( e.cancelable ) {\r\n      if ( dragging ) {\r\n        Move.translate( basePosition + constrain( diffCoord( e ) ) );\r\n\r\n        const expired     = diffTime( e ) > LOG_INTERVAL;\r\n        const hasExceeded = exceeded !== ( exceeded = exceededLimit() );\r\n\r\n        if ( expired || hasExceeded ) {\r\n          save( e );\r\n        }\r\n\r\n        clickPrevented = true;\r\n        emit( EVENT_DRAGGING );\r\n        prevent( e );\r\n      } else if ( isSliderDirection( e ) ) {\r\n        dragging = shouldStart( e );\r\n        prevent( e );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the user releases pointing devices.\r\n   * Needs to move the slider when:\r\n   * - The user drags the slider and the distance exceeds the threshold\r\n   * - The user aborted the slider moving by pointerdown and just released it without dragging the slider\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\r\n  function onPointerUp( e: TouchEvent | MouseEvent ): void {\r\n    if ( state.is( DRAGGING ) ) {\r\n      state.set( IDLE );\r\n      emit( EVENT_DRAGGED );\r\n    }\r\n\r\n    if ( dragging ) {\r\n      move( e );\r\n      prevent( e );\r\n    }\r\n\r\n    binder.destroy();\r\n    dragging = false;\r\n    exceeded = false;\r\n  }\r\n\r\n  /**\r\n   * Called when the track element is clicked.\r\n   * Disables click any elements inside it while dragging.\r\n   *\r\n   * @param e - A MouseEvent object.\r\n   */\r\n  function onClick( e: MouseEvent ): void {\r\n    if ( ! disabled && clickPrevented ) {\r\n      prevent( e, true );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Saves data at the specific moment.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   */\r\n  function save( e: TouchEvent | MouseEvent ): void {\r\n    prevBaseEvent = baseEvent;\r\n    baseEvent     = e;\r\n    basePosition  = getPosition();\r\n  }\r\n\r\n  /**\r\n   * Calculates the destination by the drag velocity and moves the carousel.\r\n   * If motion is reduced, restores transition speed to the initial value\r\n   * because it's \"essential\" motion for the user to recognize what happens on the carousel.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   */\r\n  function move( e: TouchEvent | MouseEvent ): void {\r\n    const { go } = Controller;\r\n    const { updateOnDragged = true } = options;\r\n    const velocity    = computeVelocity( e );\r\n    const destination = computeDestination( velocity );\r\n    const forwards    = orient( coordOf( e ) - startCoord ) > 0;\r\n    const rewind      = options.rewind && options.rewindByDrag;\r\n    const scroll      = updateOnDragged ? Controller.scroll : Scroll.scroll;\r\n\r\n    reduce( false );\r\n\r\n    if ( isFree ) {\r\n      scroll( destination, undefined, options.snap );\r\n    } else if ( Splide.is( FADE ) ) {\r\n      go( forwards ? ( rewind ? '>' : '+' ) : ( rewind ? '<' : '-' ) );\r\n    } else if ( Splide.is( SLIDE ) && exceeded && rewind ) {\r\n      go( exceededLimit( true ) ? '>' : '<' ); // todo\r\n    } else {\r\n      go( `${ forwards ? '>>' : '<<' }${ Controller.toDest( destination ) }` );\r\n    }\r\n\r\n    reduce( true );\r\n  }\r\n\r\n  /**\r\n   * Checks if the provided touch event should be released or not.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   */\r\n  function shouldRelease( e: TouchEvent | MouseEvent ): boolean {\r\n    if ( options.releaseTouch && Splide.is( SLIDE ) && isTouchEvent( e ) ) {\r\n      const { index } = Splide;\r\n      const diff = diffCoord( e );\r\n\r\n      if ( exceededLimit() || index === 0 && diff > 0 || index === Splide.length - 1 && diff < 0 ) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Checks if the drag distance exceeds the defined threshold.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   *\r\n   * @return `true` if the distance exceeds the threshold, or `false` if not.\r\n   */\r\n  function shouldStart( e: TouchEvent | MouseEvent ): boolean {\r\n    const { dragMinThreshold: thresholds } = options;\r\n    const isObj = isObject( thresholds );\r\n    const mouse = isObj && thresholds.mouse || 0;\r\n    const touch = ( isObj ? thresholds.touch : +thresholds ) || 10;\r\n    return abs( diffCoord( e ) ) > ( isTouchEvent( e ) ? touch : mouse );\r\n  }\r\n\r\n  /**\r\n   * Checks whether dragging towards the slider or the scroll direction.\r\n   *\r\n   * @return `true` if dragging towards the slider direction, or otherwise `false`.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\r\n  function isSliderDirection( e: TouchEvent | MouseEvent ): boolean {\r\n    return abs( diffCoord( e ) ) > abs( diffCoord( e, true ) );\r\n  }\r\n\r\n  /**\r\n   * Computes the drag velocity.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   *\r\n   * @return The drag velocity.\r\n   */\r\n  function computeVelocity( e: TouchEvent | MouseEvent ): number {\r\n    if ( Splide.is( LOOP ) || ! exceeded ) {\r\n      const time = diffTime( e );\r\n\r\n      if ( time && time < LOG_INTERVAL ) {\r\n        return diffCoord( e ) / time;\r\n      }\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Computes the destination by the velocity and the `flickPower` option.\r\n   *\r\n   * @param velocity - The drag velocity.\r\n   *\r\n   * @return The destination.\r\n   */\r\n  function computeDestination( velocity: number ): number {\r\n    return getPosition() + sign( velocity ) * min(\r\n      abs( velocity ) * ( options.flickPower || 600 ),\r\n      isFree ? Infinity : Components.Layout.listSize() * ( options.flickMaxPages || 1 )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the coord difference between the provided and base events.\r\n   *\r\n   * @param e          - A TouchEvent or MouseEvent object.\r\n   * @param orthogonal - Optional. If `true`, returns the coord of the orthogonal axis against the drag one.\r\n   *\r\n   * @return The difference of the coord.\r\n   */\r\n  function diffCoord( e: TouchEvent | MouseEvent, orthogonal?: boolean ): number {\r\n    return coordOf( e, orthogonal ) - coordOf( getBaseEvent( e ), orthogonal );\r\n  }\r\n\r\n  /**\r\n   * Returns the elapsed time from the base event to `e`.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   *\r\n   * @return The elapsed time in milliseconds.\r\n   */\r\n  function diffTime( e: TouchEvent | MouseEvent ): number {\r\n    return timeOf( e ) - timeOf( getBaseEvent( e ) );\r\n  }\r\n\r\n  /**\r\n   * Returns the base event.\r\n   * If the base event is same with `e`, returns previous one.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   *\r\n   * @return A base event.\r\n   */\r\n  function getBaseEvent( e: TouchEvent | MouseEvent ): TouchEvent | MouseEvent {\r\n    return baseEvent === e && prevBaseEvent || baseEvent;\r\n  }\r\n\r\n  /**\r\n   * Returns the `pageX` and `pageY` coordinates provided by the event.\r\n   * Be aware that IE does not support both TouchEvent and MouseEvent constructors.\r\n   *\r\n   * @param e          - A TouchEvent or MouseEvent object.\r\n   * @param orthogonal - Optional. If `true`, returns the coord of the orthogonal axis against the drag one.\r\n   *\r\n   * @return A pageX or pageY coordinate.\r\n   */\r\n  function coordOf( e: TouchEvent | MouseEvent, orthogonal?: boolean ): number {\r\n    return ( isTouchEvent( e ) ? e.changedTouches[ 0 ] : e )[ `page${ resolve( orthogonal ? 'Y' : 'X' ) }` ];\r\n  }\r\n\r\n  /**\r\n   * Reduces the distance to move by the predefined friction.\r\n   * This does nothing when the slider type is not `slide`, or the position is inside borders.\r\n   *\r\n   * @param diff - Diff to constrain.\r\n   *\r\n   * @return The constrained diff.\r\n   */\r\n  function constrain( diff: number ): number {\r\n    return diff / ( exceeded && Splide.is( SLIDE ) ? FRICTION : 1 );\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the user can drag the target.\r\n   *\r\n   * @param target - An event target.\r\n   *\r\n   * @return `true` if the target is draggable.\r\n   */\r\n  function isDraggable( target: EventTarget ): boolean {\r\n    const { noDrag } = options;\r\n\r\n    return ! matches( target, `.${ CLASS_PAGINATION_PAGE }, .${ CLASS_ARROW }` )\r\n      && ( ! noDrag || ! matches( target, noDrag ) );\r\n  }\r\n\r\n  /**\r\n   * Checks if the provided event is TouchEvent or MouseEvent.\r\n   *\r\n   * @param e - An event to check.\r\n   *\r\n   * @return `true` if the `e` is TouchEvent.\r\n   */\r\n  function isTouchEvent( e: TouchEvent | MouseEvent ): e is TouchEvent {\r\n    return typeof TouchEvent !== 'undefined' && e instanceof TouchEvent;\r\n  }\r\n\r\n  /**\r\n   * Checks if now the user is dragging the slider or not.\r\n   *\r\n   * @return `true` if the user is dragging the slider or otherwise `false`.\r\n   */\r\n  function isDragging(): boolean {\r\n    return dragging;\r\n  }\r\n\r\n  /**\r\n   * Disables the component.\r\n   *\r\n   * @param value - Set `true` to disable the component.\r\n   */\r\n  function disable( value: boolean ): void {\r\n    disabled = value;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    disable,\r\n    isDragging,\r\n  };\r\n};\r\n","import { ARROW_LEFT, ARROW_RIGHT } from '../../constants/arrows';\r\nimport { EVENT_UPDATED } from '../../constants/events';\r\nimport { BaseComponent, ComponentConstructor } from '../../types';\r\nimport { prevent } from '../../../../../utils';\r\n\r\n\r\n/**\r\n * The interface for the Keyboard component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface KeyboardComponent extends BaseComponent {\r\n  disable( disabled: boolean ): void;\r\n}\r\n\r\n/**\r\n * The keyboard event name.\r\n *\r\n * @since 3.6.0\r\n */\r\nconst KEYBOARD_EVENT = 'keydown';\r\n\r\n/**\r\n * The component for controlling the slider by keyboards.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Keyboard component object.\r\n */\r\nexport const Keyboard: ComponentConstructor<KeyboardComponent> = ( Splide, Components, options, event ) => {\r\n  const { destroy } = event;\r\n  const { resolve } = Components.Direction;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    const { keyboard } = options;\r\n\r\n    destroy();\r\n    keyboard && event.bind( keyboard === 'global' ? window : Splide.root, KEYBOARD_EVENT, onKeydown );\r\n    event.on( EVENT_UPDATED, mount );\r\n  }\r\n\r\n  /**\r\n   * Disables the keyboard input.\r\n   *\r\n   * @param value - Toggles disabling/enabling the keyboard input.\r\n   */\r\n  function disable( value: boolean ): void {\r\n    value ? destroy() : mount();\r\n  }\r\n\r\n  /**\r\n   * Called when any key is pressed on the target.\r\n   *\r\n   * @param e - A KeyboardEvent object.\r\n   */\r\n  function onKeydown( e: KeyboardEvent ): void {\r\n    if ( e.key === resolve( ARROW_LEFT ) ) {\r\n      Splide.go( '<' );\r\n      prevent( e, true );\r\n    } else if ( e.key === resolve( ARROW_RIGHT ) ) {\r\n      Splide.go( '>' );\r\n      prevent( e, true );\r\n    }\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy,\r\n    disable,\r\n  };\r\n};\r\n","import { CLASS_LOADING, CLASS_SPINNER } from '../../constants/classes';\r\nimport {\r\n  EVENT_LAZYLOAD_ERROR,\r\n  EVENT_LAZYLOAD_LOADED,\r\n  EVENT_MOVED,\r\n  EVENT_REFRESH,\r\n  EVENT_RESIZE,\r\n  EVENT_SCROLLED,\r\n} from '../../constants/events';\r\nimport { BaseComponent, ComponentConstructor } from '../../types';\r\nimport {\r\n  addClass,\r\n  apply,\r\n  child,\r\n  create,\r\n  display,\r\n  empty,\r\n  getAttribute,\r\n  queryAll,\r\n  removeAttribute,\r\n  removeClass,\r\n  removeNode,\r\n  setAttribute,\r\n} from '@splidejs/utils';\r\nimport { SlideComponent } from '../Slides/Slide';\r\nimport { IMAGE_SELECTOR, SRC_DATA_ATTRIBUTE, SRCSET_DATA_ATTRIBUTE } from './constants';\r\n\r\n\r\n/**\r\n * The interface for the LazyLoad component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface LazyLoadComponent extends BaseComponent {\r\n  /** @internal */\r\n  check(): void;\r\n}\r\n\r\n/**\r\n * The type for each entry.\r\n * Use a tuple for better compression.\r\n *\r\n * @since 4.0.0\r\n */\r\ntype LazyLoadEntry = [ HTMLImageElement, SlideComponent, HTMLSpanElement ];\r\n\r\n/**\r\n * The component for lazily loading images.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return An LazyLoad component object.\r\n */\r\nexport const LazyLoad: ComponentConstructor<LazyLoadComponent> = ( Splide, Components, options, event ) => {\r\n  const { on, off, bind, emit } = event;\r\n  const isSequential = options.lazyLoad === 'sequential';\r\n  const events       = [ EVENT_MOVED, EVENT_SCROLLED ];\r\n\r\n  /**\r\n   * Stores data of images.\r\n   */\r\n  let entries: LazyLoadEntry[] = [];\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    if ( options.lazyLoad ) {\r\n      init();\r\n      on( EVENT_REFRESH, init );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes the component and start loading images.\r\n   * Be aware that `refresh` also calls this method.\r\n   */\r\n  function init() {\r\n    empty( entries );\r\n    register();\r\n\r\n    if ( isSequential ) {\r\n      loadNext();\r\n    } else {\r\n      off( events );\r\n      on( events, check );\r\n      check();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds images and register them as entries with creating spinner elements.\r\n   * Note that spinner can be already available because of `refresh()`.\r\n   */\r\n  function register(): void {\r\n    Components.Slides.forEach( Slide => {\r\n      queryAll<HTMLImageElement>( Slide.slide, IMAGE_SELECTOR ).forEach( img => {\r\n        const src    = getAttribute( img, SRC_DATA_ATTRIBUTE );\r\n        const srcset = getAttribute( img, SRCSET_DATA_ATTRIBUTE );\r\n\r\n        if ( src !== img.src || srcset !== img.srcset ) {\r\n          const parent  = img.parentElement;\r\n          const spinner = child( parent, `.${ CLASS_SPINNER }` ) || create( 'span', options.classes.spinner, parent );\r\n\r\n          entries.push( [ img, Slide, spinner ] );\r\n          img.src || display( img, 'none' );\r\n        }\r\n      } );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Checks how close each image is from the active slide, and determines whether to start loading or not.\r\n   * The last `+1` is for the current page.\r\n   */\r\n  function check(): void {\r\n    entries = entries.filter( data => {\r\n      const distance = options.perPage * ( ( options.preloadPages || 1 ) + 1 ) - 1;\r\n      return data[ 1 ].isWithin( Splide.index, distance ) ? load( data ) : true;\r\n    } );\r\n\r\n    entries.length || off( events );\r\n  }\r\n\r\n  /**\r\n   * Starts loading the image in the provided data.\r\n   *\r\n   * @param data - A LazyLoadEntry object.\r\n   */\r\n  function load( data: LazyLoadEntry ): void {\r\n    const [ img ] = data;\r\n\r\n    addClass( data[ 1 ].slide, CLASS_LOADING );\r\n    bind( img, 'load error', apply( onLoad, data ) );\r\n\r\n    setAttribute( img, 'src', getAttribute( img, SRC_DATA_ATTRIBUTE ) );\r\n    setAttribute( img, 'srcset', getAttribute( img, SRCSET_DATA_ATTRIBUTE ) );\r\n\r\n    removeAttribute( img, [ SRC_DATA_ATTRIBUTE, SRCSET_DATA_ATTRIBUTE ] );\r\n  }\r\n\r\n  /**\r\n   * Called when the image is loaded or any error occurs.\r\n   *\r\n   * @param data - A LazyLoadEntry object.\r\n   * @param e    - An Event object.\r\n   */\r\n  function onLoad( data: LazyLoadEntry, e: Event ): void {\r\n    const [ img, Slide ] = data;\r\n\r\n    removeClass( Slide.slide, CLASS_LOADING );\r\n\r\n    if ( e.type !== 'error' ) {\r\n      removeNode( data[ 2 ] );\r\n      display( img, '' );\r\n      emit( EVENT_LAZYLOAD_LOADED, img, Slide );\r\n      emit( EVENT_RESIZE );\r\n    } else {\r\n      emit( EVENT_LAZYLOAD_ERROR, img, Slide );\r\n    }\r\n\r\n    isSequential && loadNext();\r\n  }\r\n\r\n  /**\r\n   * Starts loading a next image.\r\n   */\r\n  function loadNext(): void {\r\n    entries.length && load( entries.shift() );\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy: apply( empty, entries ),\r\n    check,\r\n  };\r\n};\r\n","import { ARROW_LEFT, ARROW_RIGHT } from '../../constants/arrows';\r\nimport {\r\n  ARIA_CONTROLS,\r\n  ARIA_LABEL,\r\n  ARIA_ORIENTATION,\r\n  ARIA_SELECTED,\r\n  ROLE,\r\n  TAB_INDEX,\r\n} from '../../constants/attributes';\r\nimport { CLASS_ACTIVE, CLASS_PAGINATION } from '../../constants/classes';\r\nimport { TTB } from '../../constants/directions';\r\nimport {\r\n  EVENT_END_INDEX_CHANGED,\r\n  EVENT_MOVE,\r\n  EVENT_PAGINATION_MOUNTED,\r\n  EVENT_PAGINATION_UPDATED,\r\n  EVENT_REFRESH,\r\n  EVENT_SCROLL,\r\n  EVENT_SCROLLED,\r\n  EVENT_UPDATED,\r\n} from '../../constants/events';\r\nimport { BaseComponent, ComponentConstructor, Options } from '../../types';\r\nimport {\r\n  addClass,\r\n  apply,\r\n  ceil,\r\n  create,\r\n  display,\r\n  empty,\r\n  focus,\r\n  format,\r\n  prevent,\r\n  removeAttribute,\r\n  removeClass,\r\n  removeNode,\r\n  setAttribute,\r\n  slice,\r\n} from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The interface for the Pagination component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface PaginationComponent extends BaseComponent {\r\n  readonly items: PaginationItem[];\r\n  getAt( index: number ): PaginationItem;\r\n  update(): void;\r\n}\r\n\r\n/**\r\n * The interface for data of the pagination.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface PaginationData {\r\n  readonly list: HTMLUListElement;\r\n  readonly items: PaginationItem[];\r\n}\r\n\r\n/**\r\n * The interface for each pagination item.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface PaginationItem {\r\n  readonly li: HTMLLIElement;\r\n  readonly button: HTMLButtonElement;\r\n  readonly page: number;\r\n}\r\n\r\n/**\r\n * The component for the pagination UI (a slide picker).\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Pagination component object.\r\n */\r\nexport const Pagination: ComponentConstructor<PaginationComponent> = ( Splide, Components, options, event ) => {\r\n  const { on, emit, bind } = event;\r\n  const { Slides, Elements, Controller } = Components;\r\n  const { hasFocus, getIndex, go } = Controller;\r\n  const { resolve } = Components.Direction;\r\n  const { pagination: placeholder } = Elements;\r\n\r\n  /**\r\n   * Stores all pagination items.\r\n   */\r\n  const items: PaginationItem[] = [];\r\n\r\n  /**\r\n   * The pagination element.\r\n   */\r\n  let list: HTMLUListElement | null;\r\n\r\n  /**\r\n   * Holds modifier classes.\r\n   */\r\n  let paginationClasses: string;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    destroy();\r\n    on( [ EVENT_UPDATED, EVENT_REFRESH, EVENT_END_INDEX_CHANGED ], mount );\r\n\r\n    const { pagination: enabled = true } = options;\r\n    placeholder && display( placeholder, enabled ? '' : 'none' );\r\n\r\n    if ( enabled ) {\r\n      on( [ EVENT_MOVE, EVENT_SCROLL, EVENT_SCROLLED ], update );\r\n      createPagination();\r\n      update();\r\n      emit( EVENT_PAGINATION_MOUNTED, { list, items }, getAt( Splide.index ) );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    if ( list ) {\r\n      removeNode( placeholder ? slice( list.children ) : list );\r\n      removeClass( list, paginationClasses );\r\n      empty( items );\r\n      list = null;\r\n    }\r\n\r\n    event.destroy();\r\n  }\r\n\r\n  /**\r\n   * Creates the pagination element and appends it to the slider.\r\n   */\r\n  function createPagination(): void {\r\n    const { length } = Splide;\r\n    const { classes, i18n, perPage, paginationKeyboard = true } = options;\r\n    const max = hasFocus() ? Controller.getEnd() + 1 : ceil( length / perPage );\r\n    const dir = getDirection();\r\n\r\n    list = placeholder || create( 'ul', classes.pagination, Elements.track.parentElement );\r\n\r\n    addClass( list, ( paginationClasses = `${ CLASS_PAGINATION }--${ dir }` ) );\r\n    setAttribute( list, ROLE, 'tablist' );\r\n    setAttribute( list, ARIA_LABEL, i18n.select );\r\n    setAttribute( list, ARIA_ORIENTATION, dir === TTB ? 'vertical' : '' );\r\n\r\n    for ( let i = 0; i < max; i++ ) {\r\n      const li       = create( 'li', null, list );\r\n      const button   = create( 'button', { class: classes.page, type: 'button' }, li );\r\n      const controls = Slides.getIn( i ).map( Slide => Slide.slide.id );\r\n      const text     = ! hasFocus() && perPage > 1 ? i18n.pageX : i18n.slideX;\r\n\r\n      bind( button, 'click', () => { go( `>${ i }` ) } );\r\n      paginationKeyboard && bind( button, 'keydown', apply( onKeydown, i ) );\r\n\r\n      setAttribute( li, ROLE, 'presentation' );\r\n      setAttribute( button, ROLE, 'tab' );\r\n      setAttribute( button, ARIA_CONTROLS, controls.join( ' ' ) );\r\n      setAttribute( button, ARIA_LABEL, format( text, i + 1 ) );\r\n      setAttribute( button, TAB_INDEX, -1 );\r\n\r\n      items.push( { li, button, page: i } );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when any key is pressed on the pagination.\r\n   *\r\n   * @link https://www.w3.org/WAI/ARIA/apg/patterns/tabpanel/#keyboard-interaction-21\r\n   *\r\n   * @param page - A page index.\r\n   * @param e    - A KeyboardEvent object.\r\n   */\r\n  function onKeydown( page: number, e: KeyboardEvent ): void {\r\n    const { length } = items;\r\n    const { key } = e;\r\n    const dir = getDirection();\r\n\r\n    let nextPage = -1;\r\n\r\n    if ( key === resolve( ARROW_RIGHT, false, dir ) ) {\r\n      nextPage = ++page % length;\r\n    } else if ( key === resolve( ARROW_LEFT, false, dir ) ) {\r\n      nextPage = ( --page + length ) % length;\r\n    } else if ( key === 'Home' ) {\r\n      nextPage = 0;\r\n    } else if ( key === 'End' ) {\r\n      nextPage = length - 1;\r\n    }\r\n\r\n    const item = items[ nextPage ];\r\n\r\n    if ( item ) {\r\n      focus( item.button );\r\n      go( `>${ nextPage }` );\r\n      prevent( e, true );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the latest direction for pagination.\r\n   *\r\n   * @return The direction for pagination.\r\n   */\r\n  function getDirection(): Options[ 'direction' ] {\r\n    return options.paginationDirection || options.direction;\r\n  }\r\n\r\n  /**\r\n   * Returns the pagination item at the specified index.\r\n   *\r\n   * @param index - An index.\r\n   *\r\n   * @return A pagination item object if available, or otherwise `undefined`.\r\n   */\r\n  function getAt( index: number ): PaginationItem | undefined {\r\n    return items[ Controller.toPage( index ) ];\r\n  }\r\n\r\n  /**\r\n   * Updates the pagination status.\r\n   */\r\n  function update(): void {\r\n    const prev = getAt( getIndex( true ) );\r\n    const curr = getAt( getIndex() );\r\n\r\n    if ( prev ) {\r\n      const { button } = prev;\r\n      removeClass( button, CLASS_ACTIVE );\r\n      removeAttribute( button, ARIA_SELECTED );\r\n      setAttribute( button, TAB_INDEX, -1 );\r\n    }\r\n\r\n    if ( curr ) {\r\n      const { button } = curr;\r\n      addClass( button, CLASS_ACTIVE );\r\n      setAttribute( button, ARIA_SELECTED, true );\r\n      setAttribute( button, TAB_INDEX, '' );\r\n    }\r\n\r\n    emit( EVENT_PAGINATION_UPDATED, { list, items }, prev, curr );\r\n  }\r\n\r\n  return {\r\n    items,\r\n    mount,\r\n    destroy,\r\n    getAt,\r\n    update,\r\n  };\r\n};\r\n","import { SCROLL_LISTENER_OPTIONS } from '../../constants/listener-options';\r\nimport { MOVING } from '../../constants/states';\r\nimport { BaseComponent, ComponentConstructor } from '../../types';\r\nimport { abs, includes, prevent, timeOf } from '@splidejs/utils';\r\nimport { EVENT_UPDATED } from '../../constants/events';\r\n\r\n\r\n/**\r\n * The interface for the Wheel component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface WheelComponent extends BaseComponent {\r\n}\r\n\r\n/**\r\n * The component for observing the mouse wheel and moving the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Wheel component object.\r\n */\r\nexport const Wheel: ComponentConstructor<WheelComponent> = ( Splide, Components, options, event ) => {\r\n  /**\r\n   * Holds the last time when the wheel moves the slider.\r\n   */\r\n  let lastTime = 0;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    event.destroy();\r\n\r\n    if ( options.wheel ) {\r\n      event.bind( Components.Elements.track, 'wheel', onWheel, SCROLL_LISTENER_OPTIONS );\r\n    }\r\n\r\n    event.on( EVENT_UPDATED, mount );\r\n  }\r\n\r\n  /**\r\n   * Called when the user rotates the mouse wheel on the slider.\r\n   *\r\n   * @param e - A WheelEvent object.\r\n   */\r\n  function onWheel( e: WheelEvent ): void {\r\n    if ( e.cancelable ) {\r\n      const delta     = parse( e );\r\n      const backwards = delta < 0;\r\n      const timeStamp = timeOf( e );\r\n      const min       = options.wheelMinThreshold || 0;\r\n      const sleep     = options.wheelSleep || 0;\r\n\r\n      if ( abs( delta ) > min && timeStamp - lastTime > sleep ) {\r\n        Splide.go( delta < 0 ? '<' : '>' );\r\n        lastTime = timeStamp;\r\n      }\r\n\r\n      shouldPrevent( backwards ) && prevent( e );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses the wheel event and returns delta.\r\n   *\r\n   * @param e - A WheelEvent object.\r\n   */\r\n  function parse( e: WheelEvent ): number {\r\n    const { wheelAxis = 'y' } = options;\r\n    const { deltaX, deltaY } = e;\r\n    const x = includes( wheelAxis, 'x' ) ? Components.Direction.orient( -deltaX ) : 0;\r\n    const y = includes( wheelAxis, 'y' ) ? deltaY : 0;\r\n\r\n    return x || y;\r\n  }\r\n\r\n  /**\r\n   * Checks whether the component should prevent the default action of the wheel event or not.\r\n   *\r\n   * @param backwards - Set this to `true` for backwards direction.\r\n   *\r\n   * @return `true` if the action should be prevented.\r\n   */\r\n  function shouldPrevent( backwards: boolean ): boolean {\r\n    return ! options.releaseWheel\r\n      || Splide.state.is( MOVING )\r\n      || Components.Controller.getAdjacent( backwards ) !== -1;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n  };\r\n};\r\n","import { ARIA_ATOMIC, ARIA_BUSY, ARIA_LIVE } from '../../constants/attributes';\r\nimport { CLASS_SR } from '../../constants/classes';\r\nimport { EVENT_AUTOPLAY_PAUSE, EVENT_AUTOPLAY_PLAY, EVENT_MOVED, EVENT_SCROLLED } from '../../constants/events';\r\nimport { BaseComponent, ComponentConstructor } from '../../types';\r\nimport { append, apply, create, removeAttribute, removeNode, RequestInterval, setAttribute } from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The interface for the Live component.\r\n *\r\n * @since 4.0.0\r\n */\r\nexport interface LiveComponent extends BaseComponent {\r\n  disable( disabled: boolean ): void;\r\n}\r\n\r\n/**\r\n * Delay in milliseconds before removing the SR field for Windows Narrator.\r\n */\r\nconst SR_REMOVAL_DELAY = 90;\r\n\r\n/**\r\n * The component for implementing Live Region to the slider.\r\n *\r\n * @link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions\r\n *\r\n * @since 4.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Live component object.\r\n */\r\nexport const Live: ComponentConstructor<LiveComponent> = ( Splide, Components, options, event ) => {\r\n  const { on } = event;\r\n  const { track } = Components.Elements;\r\n  const { live = true } = options;\r\n\r\n  /**\r\n   * Indicates whether the live region is enabled or not.\r\n   */\r\n  const enabled = live && ! options.isNavigation;\r\n\r\n  /**\r\n   * The span element for the SR only text.\r\n   */\r\n  const sr = create( 'span', CLASS_SR );\r\n\r\n  /**\r\n   * Holds the RequestInterval instance.\r\n   */\r\n  const interval = RequestInterval( SR_REMOVAL_DELAY, apply( toggle, false ) );\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   * - JAWS needs `aria-atomic` to make the `aria-busy` work.\r\n   * - Immediately removing the SR makes Windows Narrator silent, hence requires the delay around 50ms.\r\n   */\r\n  function mount(): void {\r\n    if ( enabled ) {\r\n      disable( ! Components.Autoplay.isPaused() );\r\n      setAttribute( track, ARIA_ATOMIC, true );\r\n      sr.textContent = '…';\r\n\r\n      on( EVENT_AUTOPLAY_PLAY, apply( disable, true ) );\r\n      on( EVENT_AUTOPLAY_PAUSE, apply( disable, false ) );\r\n      on( [ EVENT_MOVED, EVENT_SCROLLED ], apply( toggle, true ) );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggles the SR field and `aria-busy`.\r\n   *\r\n   * @param active - Determines whether to activate the field or not.\r\n   */\r\n  function toggle( active: boolean ): void {\r\n    setAttribute( track, ARIA_BUSY, active );\r\n\r\n    if ( active ) {\r\n      append( track, sr );\r\n      interval.start();\r\n    } else {\r\n      removeNode( sr );\r\n      interval.cancel();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    removeAttribute( track, [ ARIA_LIVE, ARIA_ATOMIC, ARIA_BUSY ] );\r\n    removeNode( sr );\r\n  }\r\n\r\n  /**\r\n   * Disables/enables the live region.\r\n   * Does nothing when the `live` option is not enabled.\r\n   *\r\n   * @param disabled - `true` to disable the live region or `false` to enable it again.\r\n   */\r\n  function disable( disabled: boolean ): void {\r\n    if ( enabled ) {\r\n      setAttribute( track, ARIA_LIVE, disabled ? 'off' : 'polite' );\r\n    }\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    disable,\r\n    destroy,\r\n  };\r\n};","import { Options } from '../types';\r\nimport { CLASSES } from './classes';\r\nimport { I18N } from './i18n';\r\n\r\n\r\n/**\r\n * The collection of default options.\r\n * Note that this collection does not contain all options.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const DEFAULTS: Options = {\r\n  type          : 'slide',\r\n  speed         : 400,\r\n  perPage       : 1,\r\n  easing        : 'cubic-bezier(0.25, 1, 0.5, 1)',\r\n  drag          : true,\r\n  direction     : 'ltr',\r\n  trimSpace     : true,\r\n  focusableNodes: 'a, button, textarea, input, select, iframe',\r\n  classes       : CLASSES,\r\n  i18n          : I18N,\r\n  reducedMotion: {\r\n    speed      : 0,\r\n    rewindSpeed: 0,\r\n    autoplay   : 'pause',\r\n  },\r\n};","/**\r\n * The collection of i18n strings.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const I18N = {\r\n  prev      : 'Previous slide',\r\n  next      : 'Next slide',\r\n  first     : 'Go to first slide',\r\n  last      : 'Go to last slide',\r\n  slideX    : 'Go to slide %s',\r\n  pageX     : 'Go to page %s',\r\n  play      : 'Start autoplay',\r\n  pause     : 'Pause autoplay',\r\n  carousel  : 'carousel',\r\n  slide     : 'slide',\r\n  select    : 'Select a slide to show',\r\n  slideLabel: '%s of %s', // [ slide number ] / [ slide size ]\r\n};\r\n","import { EVENT_MOUNTED, EVENT_REFRESH } from '../../constants/events';\r\nimport { ComponentConstructor, TransitionComponent } from '../../types';\r\nimport { nextTick, noop } from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The component for the fade transition.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Transition component object.\r\n */\r\nexport const Fade: ComponentConstructor<TransitionComponent> = ( Splide, Components, options, event ) => {\r\n  const { Slides } = Components;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    event.on( [ EVENT_MOUNTED, EVENT_REFRESH ], init );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   * Offsets all slides for stacking them onto the head of the list.\r\n   * The `nextTick` disables the initial fade transition of the first slide.\r\n   */\r\n  function init(): void {\r\n    Slides.forEach( Slide => {\r\n      Slide.style( 'transform', `translateX(-${ 100 * Slide.index }%)` );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Starts the transition.\r\n   *\r\n   * @param index - A slide index to be active.\r\n   * @param done  - The callback function that must be called after the transition ends.\r\n   */\r\n  function start( index: number, done: () => void ): void {\r\n    Slides.style( 'transition', `opacity ${ options.speed }ms ${ options.easing }` );\r\n    nextTick( done );\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    start,\r\n    cancel: noop,\r\n  };\r\n};\r\n","import { SLIDE } from '../../constants/types';\r\nimport { ComponentConstructor, TransitionComponent } from '../../types';\r\nimport { abs, apply, style } from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The component for the slide transition.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Transition component object.\r\n */\r\nexport const Slide: ComponentConstructor<TransitionComponent> = ( Splide, Components, options, event ) => {\r\n  const { Move, Controller, Scroll } = Components;\r\n  const { list } = Components.Elements;\r\n  const transition = apply( style, list, 'transition' );\r\n\r\n  /**\r\n   * Holds the `done` callback function.\r\n   */\r\n  let endCallback: () => void;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    event.bind( list, 'transitionend', e => {\r\n      if ( e.target === list && endCallback ) {\r\n        cancel();\r\n        endCallback();\r\n      }\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Starts the transition.\r\n   * The Move component calls this method just before the slider moves.\r\n   *\r\n   * @param index - A destination index.\r\n   * @param done  - The callback function that must be called after the transition ends.\r\n   */\r\n  function start( index: number, done: () => void ): void {\r\n    const destination = Move.toPosition( index );\r\n    const position    = Move.getPosition();\r\n    const speed       = getSpeed( index );\r\n\r\n    if ( abs( destination - position ) >= 1 && speed >= 1 ) {\r\n      if ( options.useScroll ) {\r\n        Scroll.scroll( destination, speed, false, done );\r\n      } else {\r\n        transition( `transform ${ speed }ms ${ options.easing }` );\r\n        Move.translate( destination, true );\r\n        endCallback = done;\r\n      }\r\n    } else {\r\n      Move.jump( index );\r\n      done();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancels the transition.\r\n   */\r\n  function cancel(): void {\r\n    transition( '' );\r\n    Scroll.cancel();\r\n  }\r\n\r\n  /**\r\n   * Returns the transition speed.\r\n   *\r\n   * @param index - A destination index.\r\n   */\r\n  function getSpeed( index: number ): number {\r\n    const { rewindSpeed } = options;\r\n\r\n    if ( Splide.is( SLIDE ) && rewindSpeed ) {\r\n      const prev = Controller.getIndex( true );\r\n      const end  = Controller.getEnd();\r\n\r\n      if ( ( prev === 0 && index >= end ) || ( prev >= end && index === 0 ) ) {\r\n        return rewindSpeed;\r\n      }\r\n    }\r\n\r\n    return options.speed;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    start,\r\n    cancel,\r\n  };\r\n};\r\n","import { COMPONENTS } from '../../components';\r\nimport { SlideMatcher } from '../../components/Slides/Slides';\r\nimport { CLASS_INITIALIZED } from '../../constants/classes';\r\nimport { DEFAULTS } from '../../constants/defaults';\r\nimport { EVENT_DESTROY, EVENT_MOUNTED, EVENT_READY, EVENT_REFRESH } from '../../constants/events';\r\nimport { DATA_ATTRIBUTE } from '../../constants/project';\r\nimport { CREATED, DESTROYED, IDLE, STATES } from '../../constants/states';\r\nimport { FADE } from '../../constants/types';\r\nimport { Fade, Slide } from '../../transitions';\r\nimport { AnyFunction, ComponentConstructor, Components, EventMap, Options, SyncTarget } from '../../types';\r\nimport {\r\n  addClass,\r\n  assign,\r\n  empty,\r\n  EventInterface,\r\n  forOwn,\r\n  getAttribute,\r\n  isString,\r\n  merge,\r\n  query,\r\n  State,\r\n} from '@splidejs/utils';\r\nimport { assert } from '../../utils';\r\nimport { ARIA_LABEL, ARIA_LABELLEDBY } from '../../constants/attributes';\r\n\r\n\r\n/**\r\n * The frontend class for the Splide slider.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport class Splide {\r\n  /**\r\n   * Changes the default options for all Splide instances.\r\n   */\r\n  static defaults: Options = {};\r\n\r\n  /**\r\n   * The collection of state numbers.\r\n   */\r\n  static readonly STATES = STATES;\r\n\r\n  /**\r\n   * The root element where the Splide is applied.\r\n   */\r\n  readonly root: HTMLElement;\r\n\r\n  /**\r\n   * The EventBusObject object.\r\n   */\r\n  readonly event = EventInterface<EventMap & Record<string, AnyFunction>>();\r\n\r\n  /**\r\n   * The collection of all component objects.\r\n   */\r\n  readonly Components: Components = {} as Components;\r\n\r\n  /**\r\n   * The StateObject object.\r\n   */\r\n  readonly state = State( CREATED );\r\n\r\n  /**\r\n   * An array with SyncTarget objects for splide instances to sync with.\r\n   */\r\n  readonly splides: SyncTarget[] = [];\r\n\r\n  /**\r\n   * The current options.\r\n   */\r\n  private readonly _o: Options = {};\r\n\r\n  /**\r\n   * The collection of all components.\r\n   */\r\n  private _C: Components;\r\n\r\n  /**\r\n   * The collection of extensions.\r\n   */\r\n  private _E: Record<string, ComponentConstructor> = {};\r\n\r\n  /**\r\n   * The Transition component.\r\n   */\r\n  private _T: ComponentConstructor;\r\n\r\n  /**\r\n   * The Splide constructor.\r\n   *\r\n   * @param target  - The selector for the target element, or the element itself.\r\n   * @param options - Optional. An object with options.\r\n   */\r\n  constructor( target: string | HTMLElement, options: Options = {} ) {\r\n    const root = isString( target ) ? query<HTMLElement>( document, target ) : target;\r\n    assert( root, `${ root } is invalid.` );\r\n\r\n    this.root = root;\r\n\r\n    options = merge( {\r\n      label     : getAttribute( root, ARIA_LABEL ) || '',\r\n      labelledby: getAttribute( root, ARIA_LABELLEDBY ) || '',\r\n    }, DEFAULTS, Splide.defaults, options );\r\n\r\n    try {\r\n      merge( options, JSON.parse( getAttribute( root, DATA_ATTRIBUTE ) ) );\r\n    } catch ( e ) {\r\n      assert( false, 'Invalid JSON' );\r\n    }\r\n\r\n    this._o = Object.create( merge( {}, options ) );\r\n  }\r\n\r\n  /**\r\n   * Initializes the instance.\r\n   *\r\n   * @param Extensions - Optional. An object with extensions.\r\n   * @param Transition - Optional. A Transition component.\r\n   *\r\n   * @return `this`\r\n   */\r\n  mount( Extensions: Record<string, ComponentConstructor> = this._E, Transition: ComponentConstructor = this._T ): this {\r\n    const { state, Components } = this;\r\n    assert( state.is( [ CREATED, DESTROYED ] ), 'Already mounted!' );\r\n\r\n    state.set( CREATED );\r\n\r\n    this._C = Components;\r\n    this._T = Transition || ( this.is( FADE ) ? Fade : Slide );\r\n    this._E = Extensions;\r\n\r\n    const Constructors = assign( {}, COMPONENTS, this._E, { Transition: this._T } );\r\n\r\n    forOwn( Constructors, ( Component, key ) => {\r\n      const component = Component( this, Components, this._o, this.event.create() );\r\n      Components[ key ] = component;\r\n      component.setup && component.setup();\r\n    } );\r\n\r\n    forOwn( Components, component => {\r\n      component.mount && component.mount();\r\n    } );\r\n\r\n    this.emit( EVENT_MOUNTED );\r\n\r\n    addClass( this.root, CLASS_INITIALIZED );\r\n\r\n    state.set( IDLE );\r\n    this.emit( EVENT_READY );\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Syncs the slider with the provided one.\r\n   * This method must be called before the `mount()`.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const primary   = new Splide();\r\n   * const secondary = new Splide();\r\n   *\r\n   * primary.sync( secondary );\r\n   * primary.mount();\r\n   * secondary.mount();\r\n   * ```\r\n   *\r\n   * @param splide - A Splide instance to sync with.\r\n   *\r\n   * @return `this`\r\n   */\r\n  sync( splide: Splide ): this {\r\n    this.splides.push( { splide } );\r\n    splide.splides.push( { splide: this, isParent: true } );\r\n\r\n    if ( this.state.is( IDLE ) ) {\r\n      this._C.Sync.remount();\r\n      splide.Components.Sync.remount();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Moves the carousel with the following control pattern.\r\n   *\r\n   * | Pattern | Description |\r\n   * |---|---|\r\n   * | `i` | Goes to the slide `i` |\r\n   * | `'+${i}'` | Increments the slide index by `i` |\r\n   * | `'-${i}'` | Decrements the slide index by `i` |\r\n   * | `'>'` | Goes to the next page |\r\n   * | `'<'` | Goes to the previous page |\r\n   * | `>${i}` | Goes to the page `i` |\r\n   * | `>>` | Goes to the first page |\r\n   * | `<<` | Goes to the last page |\r\n   *\r\n   * In most cases, `'>'` and `'<'` notations are enough to control the slider\r\n   * because they respect `perPage` and `perMove` options.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const splide = new Splide();\r\n   *\r\n   * // Goes to the slide 1:\r\n   * splide.go( 1 );\r\n   *\r\n   * // Increments the index:\r\n   * splide.go( '+2' );\r\n   *\r\n   * // Goes to the next page:\r\n   * splide.go( '>' );\r\n   *\r\n   * // Goes to the page 2:\r\n   * splide.go( '>2' );\r\n   * ```\r\n   *\r\n   * @param control - A control pattern.\r\n   *\r\n   * @return `this`\r\n   */\r\n  go( control: number | string ): this {\r\n    this._C.Controller.go( control );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Moves the carousel without transition.\r\n   *\r\n   * @param control - A control pattern. See `move()` for more details.\r\n   *\r\n   * @return `this`\r\n   */\r\n  jump( control: number | string ): this {\r\n    this._C.Controller.jump( control );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Registers an event handler.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const splide = new Splide();\r\n   *\r\n   * // Listens to a single event:\r\n   * splide.on( 'move', function() {} );\r\n   *\r\n   * // Listens to multiple events:\r\n   * splide.on( 'move resize', function() {} );\r\n   *\r\n   * // Appends a namespace:\r\n   * splide.on( 'move.myNamespace resize.myNamespace', function() {} );\r\n   * ```\r\n   *\r\n   * @param events   - An event name or names separated by spaces. Use a dot(.) to append a namespace.\r\n   * @param callback - A callback function.\r\n   *\r\n   * @return `this`\r\n   */\r\n  on<K extends keyof EventMap>( events: K, callback: EventMap[ K ] ): this;\r\n  on( events: string | string[], callback: AnyFunction ): this;\r\n  on( events: string | string[], callback: AnyFunction ): this {\r\n    this.event.on( events, callback );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes the registered all handlers for the specified event or events.\r\n   * If you want to only remove a particular handler, use namespace to identify it.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const splide = new Splide();\r\n   *\r\n   * // Removes all handlers assigned to \"move\":\r\n   * splide.off( 'move' );\r\n   *\r\n   * // Only removes handlers that belong to the specified namespace:\r\n   * splide.off( 'move.myNamespace' );\r\n   * ```\r\n   *\r\n   * @param events   - An event name or names separated by spaces. Use a dot(.) to append a namespace.\r\n   * @param callback - A callback function to remove.\r\n   *\r\n   * @return `this`\r\n   */\r\n  off<K extends keyof EventMap>( events: K | K[] | string | string[], callback: AnyFunction ): this {\r\n    this.event.off( events, callback );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Emits an event and triggers registered handlers.\r\n   *\r\n   * @param event - An event name to emit.\r\n   * @param args  - Optional. Any number of arguments to pass to handlers.\r\n   *\r\n   * @return `this`\r\n   */\r\n  emit<K extends keyof EventMap>( event: K, ...args: Parameters<EventMap[ K ]> ): this;\r\n  emit( event: string, ...args: any[] ): this;\r\n  emit( event: string, ...args: any[] ): this {\r\n    this.event.emit( event, ...args );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Inserts a slide at the specified position.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const splide = new Splide();\r\n   * splide.mount();\r\n   *\r\n   * // Adds the slide by the HTML:\r\n   * splide.add( '<li></li> );\r\n   *\r\n   * // or adds the element:\r\n   * splide.add( document.createElement( 'li' ) );\r\n   * ```\r\n   *\r\n   * @param slides - A slide element, an HTML string that represents a slide, or an array with them.\r\n   * @param index  - Optional. An index to insert a slide at.\r\n   *\r\n   * @return `this`\r\n   */\r\n  add( slides: string | HTMLElement | Array<string | HTMLElement>, index?: number ): this {\r\n    this._C.Slides.add( slides, index );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes slides that match the matcher\r\n   * that can be an index, an array with indices, a selector, or an iteratee function.\r\n   *\r\n   * @param matcher - An index, an array with indices, a selector string, or an iteratee function.\r\n   */\r\n  remove( matcher: SlideMatcher ): this {\r\n    this._C.Slides.remove( matcher );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Checks the slider type.\r\n   *\r\n   * @param type - A type to test.\r\n   *\r\n   * @return `true` if the type matches the current one, or otherwise `false`.\r\n   */\r\n  is( type: string ): boolean {\r\n    return this._o.type === type;\r\n  }\r\n\r\n  /**\r\n   * Refreshes the slider.\r\n   *\r\n   * @return `this`\r\n   */\r\n  refresh(): this {\r\n    this.emit( EVENT_REFRESH );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Destroys the slider.\r\n   *\r\n   * @param completely - Optional. If `true`, Splide will not remount the slider by breakpoints.\r\n   *\r\n   * @return `this`\r\n   */\r\n  destroy( completely = true ): this {\r\n    const { event, state } = this;\r\n\r\n    if ( state.is( CREATED ) ) {\r\n      // Postpones destruction requested before the slider becomes ready.\r\n      this.on( EVENT_READY, this.destroy.bind( this, completely ) );\r\n    } else {\r\n      forOwn( this._C, component => {\r\n        component.destroy && component.destroy( completely );\r\n      }, true );\r\n\r\n      event.emit( EVENT_DESTROY );\r\n      event.destroy();\r\n      completely && empty( this.splides );\r\n      state.set( DESTROYED );\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns options.\r\n   *\r\n   * @return An object with the latest options.\r\n   */\r\n  get options(): Options {\r\n    return this._o;\r\n  }\r\n\r\n  /**\r\n   * Merges options to the current options and emits `updated` event.\r\n   *\r\n   * @param options - An object with new options.\r\n   */\r\n  set options( options: Options ) {\r\n    this._C.Breakpoints.set( options, true, true );\r\n  }\r\n\r\n  /**\r\n   * Returns the number of slides without clones.\r\n   *\r\n   * @return The number of slides.\r\n   */\r\n  get length(): number {\r\n    return this._C.Slides.getLength( true );\r\n  }\r\n\r\n  /**\r\n   * Returns the active slide index.\r\n   *\r\n   * @return The active slide index.\r\n   */\r\n  get index(): number {\r\n    return this._C.Controller.getIndex();\r\n  }\r\n}\r\n"],"names":["MEDIA_PREFERS_REDUCED_MOTION","MOVING","SCROLLING","STATES","CREATED","MOUNTED","IDLE","DRAGGING","DESTROYED","empty","array","length","apply","func","args","bind","nextTick","setTimeout","noop","raf","requestAnimationFrame","typeOf","type","subject","isObject","isNull","isArray","Array","isFunction","isString","isUndefined","isHTMLElement","ownerDocument","defaultView","window","HTMLElement","e","toArray","value","forEach","values","iteratee","push","items","arrayProto","prototype","slice","arrayLike","start","end","call","includes","toggleClass","elm","classes","force","split","className","classList","toggle","addClass","append","parent","children2","before","ref","nodes","matches","selector","children","filter","child2","child","firstElementChild","assign","Object","ownKeys","keys","forOwn","object","right","reverse","key","merge","sources","source","omit","removeAttribute","elms","attrs","attr","setAttribute","value2","name","String","create","tag2","document","createElement","style","prop","getComputedStyle","display","display2","focus","preventScroll","getAttribute","hasClass","contains","rect","target","getBoundingClientRect","removeNode","node","parentNode","removeChild","parseHtml","html","DOMParser","parseFromString","body","prevent","stopPropagation","preventDefault","stopImmediatePropagation","query","querySelector","queryAll","querySelectorAll","removeClass","timeOf","timeStamp","unit","min","max","floor","ceil","abs","sign","Math","approximatelyEqual","x","y","epsilon","between","number","exclusive","minimum","maximum","clamp","format","string","replacements","reduce","prev","curr","replace","pad","padStart","ids","forEachEvent","events","event","arrayRemove","predicate","removed","let","i","splice","EventBinder","removersRef","removers","callback","options","addEventListener","removeEventListener","destroy","remover","EventBus","listenersRef","listeners","on","off","listener","emit","RequestInterval","interval","onInterval","onUpdate","limit","now","Date","startTime","rate","id","paused","count","update","pause","cancel","cancelAnimationFrame","resume","rewind","set","time","isPaused","State","initialState","state","is","states","EVENT_MOUNTED","EVENT_MOVE","EVENT_MOVED","EVENT_CLICK","EVENT_ACTIVE","EVENT_INACTIVE","EVENT_VISIBLE","EVENT_HIDDEN","EVENT_REFRESH","EVENT_UPDATED","EVENT_RESIZE","EVENT_RESIZED","EVENT_SCROLL","EVENT_SCROLLED","EVENT_OVERFLOW","EVENT_NAVIGATION_MOUNTED","EVENT_AUTOPLAY_PLAY","EVENT_AUTOPLAY_PAUSE","EVENT_SLIDE_KEYDOWN","EVENT_SHIFTED","EVENT_END_INDEX_CHANGED","NOT_OVERFLOW_KEY","ARROW_LEFT","ARROW_RIGHT","TTB","ORIENTATION_MAP","width","left","X","Y","ArrowLeft","ArrowRight","ROLE","TAB_INDEX","ARIA_CONTROLS","ARIA_CURRENT","ARIA_SELECTED","ARIA_LABEL","ARIA_LABELLEDBY","ARIA_HIDDEN","ARIA_ORIENTATION","ARIA_ROLEDESCRIPTION","ARIA_LIVE","ARIA_BUSY","ARIA_ATOMIC","ALL_ATTRIBUTES","PROJECT_CODE","DATA_ATTRIBUTE","CLASS_PREFIX","CLASS_ROOT","CLASS_TRACK","CLASS_LIST","CLASS_SLIDE","CLASS_CLONE","CLASS_CONTAINER","CLASS_ARROWS","CLASS_ARROW","CLASS_ARROW_PREV","CLASS_ARROW_NEXT","CLASS_PAGINATION","CLASS_PAGINATION_PAGE","CLASS_PROGRESS_BAR","CLASS_TOGGLE","CLASS_SPINNER","CLASS_SR","CLASS_ACTIVE","CLASS_PREV","CLASS_NEXT","CLASS_VISIBLE","CLASS_LOADING","CLASS_FOCUS_IN","CLASS_OVERFLOW","STATUS_CLASSES","CLASSES","slide","clone","arrows","arrow","next","pagination","page","spinner","assert","condition","message","Error","POINTER_DOWN_EVENTS","POINTER_MOVE_EVENTS","POINTER_UP_EVENTS","SLIDE","LOOP","FADE","Slide","Splide","index","slideIndex","Components","root","isNavigation","updateOnMove","i18n","slideFocus","Elements","resolve","Direction","styles","label","isClone","container","destroyed","initNavigation","controls","splides","map","splide","Slides","getAt","join","slideX","onMove","hidden","active","isActive","self","visible","isVisible","focusableNodes","activeElement","cloneStatus","partial","trackRect","slideRect","track","mount","slideLabel","useContainer","_style","isWithin","from","distance","diff","INTERVAL_DATA_ATTRIBUTE","SCROLL_LISTENER_OPTIONS","passive","capture","SRC_DATA_ATTRIBUTE","SRCSET_DATA_ATTRIBUTE","IMAGE_SELECTOR","TRIGGER_KEYS","COMPONENTS","Breakpoints","breakpoints","reducedMotion","binder","entries","completely","register","queryList","matchMedia","direction","merged","entry","refresh","opts","base","notify","getPrototypeOf","setup","isMin","mediaQuery","sort","n","m","Layout","isOverflow","enable","axisOnly","match","offset","replacement","toLowerCase","charAt","toUpperCase","orient","elements","slides","rootClasses","trackClasses","list","isUsingKey","find","bar","role","prefix","tagName","carousel","concat","getClasses","labelledby","closest","drag","init","Slide1","Slide2","get","excludeClones","matcher","getIn","Controller","toIndex","hasFocus","perPage","add","forEachItem","observeImages","images","img","remove","getLength","isEnough","styleSlides","vertical","rootRect","overflow","cssPadding","resize","newRect","height","cssHeight","gap","autoWidth","fixedWidth","cssSlideSize","fixedHeight","autoHeight","rightPadding","padding","heightRatio","listSize","full","slideSize","withoutGap","getGap","totalSize","first","sliderSize","second","firstRect","duration","trackSize","getPadding","parseFloat","Clones","clones","cloneCount","remount","observe","computeCloneCount","generate","isHead","cloneNode","go","fixedCount","fixedSize","Move","Transition","indices","reposition","isBusy","Scroll","jump","onTransitionEnd","translate","getPosition","toPosition","position","preventLoop","destination","exceededLimit","shift","backwards","excess","getLimit","size","trimSpace","getEnd","canShift","shifted","exceededMin","exceededMax","move","dest","forwards","onMoved","shiftBackwards","minDistance","Infinity","getRate","isLoop","useIndex","isSlide","friction","scroll","snap","onScrolled","noConstrain","clear","snapped","toDest","immediately","onEnd","to","easingFunc","pow","t","omitEnd","getNext","getAdjacent","getPrev","currIndex","endIndex","prevIndex","slideCount","perMove","onResized","control","canGo","indicator","oneOf","indicators","computeDestIndex","loop","setIndex","snapPage","toPage","waitForTransition","speed","getIndex","Arrows","placeholder","wrapper","created","wrapperClasses","enabled","createArrow","arrowPath","nextIndex","prevLabel","nextLabel","last","disabled","Autoplay","pauseOnHover","pauseOnFocus","resetProgress","autoplay","hovered","focused","stopped","play","stop","autoToggle","Drag","startCoord","basePosition","baseEvent","prevBaseEvent","isFree","dragging","exceeded","clickPrevented","disable","onPointerDown","isTouch","noDrag","isTouchEvent","button","coordOf","onPointerMove","onPointerUp","save","releaseTouch","diffCoord","thresholds","isObj","mouse","cancelable","expired","diffTime","hasExceeded","touch","updateOnDragged","velocity","flickPower","flickMaxPages","rewindByDrag","onClick","orthogonal","getBaseEvent","changedTouches","TouchEvent","isDragging","Keyboard","keyboard","onKeydown","LazyLoad","isSequential","lazyLoad","src","srcset","parentElement","loadNext","check","preloadPages","data","load","onLoad","Pagination","paginationClasses","dir","getDirection","nextPage","item","paginationDirection","paginationKeyboard","select","li","class","text","pageX","Sync","isParent","sync","navigate","ev","Wheel","lastTime","onWheel","delta","sleep","wheelAxis","deltaX","deltaY","wheelMinThreshold","wheelSleep","releaseWheel","wheel","Live","live","sr","textContent","DEFAULTS","easing","rewindSpeed","Fade","done","transition","endCallback","useScroll","defaults","EventInterface","bus","constructor","this","JSON","parse","_o","Extensions","_E","_T","_C","Component","component"],"mappings":"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"}