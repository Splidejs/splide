{"version":3,"file":"splide.min.js","sources":["../../src/js/constants/media.ts","../../src/js/constants/states.ts","../../../utils/dist/splide-utils.esm.js","../../src/js/constants/events.ts","../../src/js/constants/arrows.ts","../../src/js/constants/directions.ts","../../src/js/components/Direction/Direction.ts","../../src/js/constants/attributes.ts","../../src/js/constants/project.ts","../../src/js/constants/classes.ts","../../src/js/utils/error/assert/assert.ts","../../src/js/components/Drag/constants.ts","../../src/js/constants/types.ts","../../src/js/components/Slides/Slide.ts","../../src/js/utils/define/define.ts","../../src/js/components/Autoplay/constants.ts","../../src/js/constants/listener-options.ts","../../src/js/components/LazyLoad/constants.ts","../../src/js/components/Sync/Sync.ts","../../src/js/components/Media/Media.ts","../../src/js/components/Elements/Elements.ts","../../src/js/components/Slides/Slides.ts","../../src/js/components/Layout/Layout.ts","../../src/js/components/Clones/Clones.ts","../../src/js/components/Move/Move.ts","../../src/js/components/Controller/Controller.ts","../../src/js/components/Arrows/Arrows.ts","../../src/js/components/Arrows/path.ts","../../src/js/components/Autoplay/Autoplay.ts","../../src/js/components/Cover/Cover.ts","../../src/js/components/Scroll/Scroll.ts","../../src/js/components/Scroll/constants.ts","../../src/js/components/Drag/Drag.ts","../../src/js/components/Keyboard/Keyboard.ts","../../src/js/components/LazyLoad/LazyLoad.ts","../../src/js/components/Pagination/Pagination.ts","../../src/js/components/Wheel/Wheel.ts","../../src/js/components/Live/Live.ts","../../src/js/constants/defaults.ts","../../src/js/constants/i18n.ts","../../src/js/transitions/Fade/Fade.ts","../../src/js/transitions/Slide/Slide.ts","../../src/js/core/Splide/Splide.ts"],"sourcesContent":["/**\r\n * Matches when users request reducing non-essential animations.\r\n *\r\n * @link https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion\r\n */\r\nexport const MEDIA_PREFERS_REDUCED_MOTION = '(prefers-reduced-motion: reduce)';","/**\r\n * Splide has been just created.\r\n */\r\nexport const CREATED = 1;\r\n\r\n/**\r\n * Splide has mounted components.\r\n */\r\nexport const MOUNTED = 2;\r\n\r\n/**\r\n * Splide is ready.\r\n */\r\nexport const IDLE = 3;\r\n\r\n/**\r\n * Splide is moving.\r\n */\r\nexport const MOVING = 4;\r\n\r\n/**\r\n * Splide is moving.\r\n */\r\nexport const SCROLLING = 5;\r\n\r\n/**\r\n * The user is dragging the slider.\r\n */\r\nexport const DRAGGING = 6;\r\n\r\n/**\r\n * Splide has been destroyed.\r\n */\r\nexport const DESTROYED = 7;\r\n\r\n/**\r\n * The collection of all states.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const STATES = {\r\n  CREATED,\r\n  MOUNTED,\r\n  IDLE,\r\n  MOVING,\r\n  SCROLLING,\r\n  DRAGGING,\r\n  DESTROYED,\r\n};\r\n","function N(n) {\n  n.length = 0;\n}\nfunction a(n, ...t) {\n  return n.bind(null, ...t);\n}\nconst dn = setTimeout, an = () => {\n};\nfunction P(n) {\n  return requestAnimationFrame(n);\n}\nfunction m(n, t) {\n  return typeof t === n;\n}\nfunction y(n) {\n  return !S(n) && m(\"object\", n);\n}\nconst g = Array.isArray, ln = a(m, \"function\"), p = a(m, \"string\"), mn = a(m, \"boolean\"), Z = a(m, \"undefined\");\nfunction S(n) {\n  return n === null;\n}\nfunction x(n) {\n  try {\n    return n instanceof (n.ownerDocument.defaultView || window).HTMLElement;\n  } catch {\n    return !1;\n  }\n}\nfunction q(n) {\n  return g(n) ? n : [n];\n}\nfunction d(n, t) {\n  q(n).forEach(t);\n}\nfunction G(n, t) {\n  return n.includes(t);\n}\nfunction pn(n, t) {\n  return n.push(...q(t)), n;\n}\nconst D = Array.prototype;\nfunction F(n, t, e) {\n  return D.slice.call(n, t, e);\n}\nfunction hn(n, t) {\n  return D.find.call(n, t);\n}\nfunction I(n, t, e) {\n  n && d(p(t) ? t.split(\" \") : t, (i) => {\n    i && n.classList.toggle(i, e);\n  });\n}\nfunction J(n, t) {\n  I(n, t, !0);\n}\nfunction Q(n, t) {\n  d(t, n.appendChild.bind(n));\n}\nfunction yn(n, t) {\n  d(n, (e) => {\n    const i = (t || e).parentNode;\n    i && i.insertBefore(e, t);\n  });\n}\nfunction W(n, t) {\n  return x(n) && n.matches(t);\n}\nfunction X(n, t) {\n  const e = n ? F(n.children) : [];\n  return t ? e.filter((i) => W(i, t)) : e;\n}\nfunction Y(n, t) {\n  return t ? X(n, t)[0] : n.firstElementChild;\n}\nfunction En(n, t) {\n  return n.closest(t);\n}\nconst v = Object.assign, A = Object.keys;\nfunction L(n, t, e) {\n  return n && (e ? A(n).reverse() : A(n)).forEach((i) => {\n    i !== \"__proto__\" && t(n[i], i);\n  }), n;\n}\nfunction k(n, ...t) {\n  return t.forEach((e) => {\n    L(e, (i, r) => {\n      g(i) ? i = i.slice() : y(i) && (i = k({}, y(n[r]) ? n[r] : {}, i)), n[r] = i;\n    });\n  }), n;\n}\nfunction gn(n, t) {\n  return d(t || A(n), (e) => {\n    delete n[e];\n  }), n;\n}\nfunction U(n, t) {\n  d(n, (e) => {\n    d(t, (i) => {\n      e && e.removeAttribute(i);\n    });\n  });\n}\nfunction M(n, t, e) {\n  y(t) ? L(t, (i, r) => {\n    M(n, r, i);\n  }) : d(n, (i) => {\n    S(e) || e === \"\" ? U(i, t) : i.setAttribute(t, String(e));\n  });\n}\nfunction j(n, t, e) {\n  const i = document.createElement(n);\n  return t && (p(t) ? J(i, t) : M(i, t)), e && Q(e, i), i;\n}\nfunction nn(n, t, e) {\n  if (Z(e))\n    return getComputedStyle(n)[t];\n  S(e) || (n.style[t] = `${e}`);\n}\nfunction An(n, t) {\n  nn(n, \"display\", t);\n}\nfunction $n(n) {\n  x(n) && n.focus({ preventScroll: !0 });\n}\nfunction wn(n, t) {\n  return n.getAttribute(t);\n}\nfunction Cn(n, t) {\n  return !!n && n.classList.contains(t);\n}\nfunction tn(n) {\n  return n.getBoundingClientRect();\n}\nfunction en(n) {\n  d(n, (t) => {\n    t && t.parentNode && t.parentNode.removeChild(t);\n  });\n}\nfunction Sn(n, t) {\n  if (p(t)) {\n    const e = j(\"div\", { style: `width: ${t}; position: absolute;` }, n);\n    t = tn(e).width, en(e);\n  }\n  return t;\n}\nfunction qn(n) {\n  return Y(new DOMParser().parseFromString(n, \"text/html\").body);\n}\nfunction Ln(n, t) {\n  n.preventDefault(), t && (n.stopPropagation(), n.stopImmediatePropagation());\n}\nfunction On(n, t) {\n  return n && n.querySelector(t);\n}\nfunction Tn(n, t) {\n  return t && n ? F(n.querySelectorAll(t)) : [];\n}\nfunction Pn(n, t) {\n  I(n, t, !1);\n}\nfunction Bn(n) {\n  return n.timeStamp;\n}\nfunction Nn(n) {\n  return p(n) ? n : n ? `${n}px` : \"\";\n}\nfunction rn(n) {\n  let t = \"\";\n  return L(n, (e, i) => {\n    t += e || e === 0 ? ` ${i}${e !== !0 ? `=\"${e}\"` : \"\"}` : \"\";\n  }), t.trim();\n}\nfunction _(...n) {\n  return n.reduce((t, e) => `${t} ${g(e) ? _(...e) : e || \"\"}`.trim(), \"\");\n}\nfunction on(n, t) {\n  return t = g(t) || !y(t) ? { class: _(t) } : t, `<${`${n} ${t ? rn(t) : \"\"}`.trim()}>`;\n}\nconst xn = a(on, \"div\"), { min: E, max: $, floor: Dn, ceil: Fn, abs: un, sign: In } = Math;\nfunction Mn(n, t, e) {\n  return un(n - t) < e;\n}\nfunction _n(n, t, e, i) {\n  const r = E(t, e), o = $(t, e);\n  return i ? r < n && n < o : r <= n && n <= o;\n}\nfunction bn(n, t, e) {\n  const i = E(t, e), r = $(t, e);\n  return E($(i, n), r);\n}\nfunction Hn(n) {\n  return n.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\nfunction Kn(n, t) {\n  return d(t, (e) => {\n    n = n.replace(\"%s\", `${e}`);\n  }), n;\n}\nfunction cn(n, t = 2) {\n  return `${n}`.padStart(t, \"0\");\n}\nconst B = {};\nfunction zn(n) {\n  return `${n}${cn(B[n] = (B[n] || 0) + 1)}`;\n}\nfunction w(n, t) {\n  d(n, (e) => {\n    p(e) && e.split(\" \").forEach(t);\n  });\n}\nfunction C(n, t) {\n  const e = [];\n  for (let i = n.length - 1; i >= 0; i--)\n    t(n[i]) && e.push(...n.splice(i, 1));\n  return e;\n}\nfunction b(n) {\n  const t = n || [], e = n ? {} : void 0;\n  function i(o, f, u, c) {\n    w(f, (s) => {\n      o.addEventListener(s, u, c), t.push([o.removeEventListener.bind(o, s, u, c), e]);\n    });\n  }\n  function r() {\n    e ? C(t, (o) => o[1] === e).forEach((o) => {\n      o[0]();\n    }) : (t.forEach((o) => {\n      o[0]();\n    }), N(t));\n  }\n  return {\n    bind: i,\n    create: a(b, t),\n    destroy: r\n  };\n}\nfunction H(n) {\n  const t = n || [], e = n ? {} : void 0;\n  function i(u, c) {\n    w(u, (s) => {\n      t.push([s, c, e]);\n    });\n  }\n  function r(u, c) {\n    w(u, (s) => {\n      C(t, (l) => l[0] === s && (!c || l[1] === c) && l[2] === e);\n    });\n  }\n  function o(u, ...c) {\n    t.slice().forEach((s) => {\n      s[0] === u && s[1](...c);\n    });\n  }\n  function f() {\n    e ? C(t, (u) => u[2] === e) : N(t);\n  }\n  return {\n    on: i,\n    off: r,\n    emit: o,\n    create: a(H, t),\n    destroy: f\n  };\n}\nfunction fn(n = b(), t = H()) {\n  function e() {\n    return fn(n.create(), t.create());\n  }\n  function i() {\n    n.destroy(), t.destroy();\n  }\n  return v({}, n, t, { create: e, destroy: i });\n}\nfunction sn(n, t, e, i) {\n  const { now: r } = Date;\n  let o, f = 0, u, c = !0, s = 0;\n  function l() {\n    if (!c) {\n      if (f = n ? E((r() - o) / n, 1) : 1, e && e(f), f >= 1 && (t(), o = r(), i && ++s >= i))\n        return O();\n      u = P(l);\n    }\n  }\n  function K(h) {\n    h || T(), o = r() - (h ? f * n : 0), c = !1, u = P(l);\n  }\n  function O() {\n    c = !0;\n  }\n  function z() {\n    o = r(), f = 0, e && e(f);\n  }\n  function T() {\n    u && cancelAnimationFrame(u), f = 0, u = 0, c = !0;\n  }\n  function R(h) {\n    n = h;\n  }\n  function V() {\n    return c;\n  }\n  return {\n    start: K,\n    rewind: z,\n    pause: O,\n    cancel: T,\n    set: R,\n    isPaused: V\n  };\n}\nfunction Rn(n) {\n  let t = n;\n  function e(r) {\n    t = r;\n  }\n  function i(r) {\n    return G(q(r), t);\n  }\n  return { set: e, is: i };\n}\nfunction Vn(n, t) {\n  const e = sn(t || 0, n, void 0, 1);\n  return () => {\n    e.isPaused() && e.start();\n  };\n}\nexport {\n  b as EventBinder,\n  H as EventBus,\n  fn as EventInterface,\n  sn as RequestInterval,\n  Rn as State,\n  Vn as Throttle,\n  un as abs,\n  J as addClass,\n  Q as append,\n  a as apply,\n  Mn as approximatelyEqual,\n  v as assign,\n  yn as before,\n  _n as between,\n  rn as buildAttrs,\n  Hn as camelToKebab,\n  Fn as ceil,\n  Y as child,\n  X as children,\n  bn as clamp,\n  _ as classNames,\n  En as closest,\n  j as create,\n  An as display,\n  xn as div,\n  N as empty,\n  hn as find,\n  Dn as floor,\n  $n as focus,\n  d as forEach,\n  L as forOwn,\n  Kn as format,\n  wn as getAttribute,\n  Cn as hasClass,\n  G as includes,\n  g as isArray,\n  mn as isBoolean,\n  ln as isFunction,\n  x as isHTMLElement,\n  S as isNull,\n  y as isObject,\n  p as isString,\n  Z as isUndefined,\n  W as matches,\n  $ as max,\n  Sn as measure,\n  k as merge,\n  E as min,\n  dn as nextTick,\n  an as noop,\n  gn as omit,\n  A as ownKeys,\n  cn as pad,\n  qn as parseHtml,\n  Ln as prevent,\n  pn as push,\n  On as query,\n  Tn as queryAll,\n  P as raf,\n  tn as rect,\n  U as removeAttribute,\n  Pn as removeClass,\n  en as removeNode,\n  M as setAttribute,\n  In as sign,\n  F as slice,\n  nn as style,\n  on as tag,\n  Bn as timeOf,\n  q as toArray,\n  I as toggleClass,\n  zn as uniqueId,\n  Nn as unit\n};\n","export const EVENT_MOUNTED            = 'mounted';\r\nexport const EVENT_READY              = 'ready';\r\nexport const EVENT_MOVE               = 'move';\r\nexport const EVENT_MOVED              = 'moved';\r\nexport const EVENT_CLICK              = 'click';\r\nexport const EVENT_ACTIVE             = 'active';\r\nexport const EVENT_INACTIVE           = 'inactive';\r\nexport const EVENT_VISIBLE            = 'visible';\r\nexport const EVENT_HIDDEN             = 'hidden';\r\nexport const EVENT_REFRESH            = 'refresh';\r\nexport const EVENT_UPDATED            = 'updated';\r\nexport const EVENT_RESIZE             = 'resize';\r\nexport const EVENT_RESIZED            = 'resized';\r\nexport const EVENT_DRAG               = 'drag';\r\nexport const EVENT_DRAGGING           = 'dragging';\r\nexport const EVENT_DRAGGED            = 'dragged';\r\nexport const EVENT_SCROLL             = 'scroll';\r\nexport const EVENT_SCROLLED           = 'scrolled';\r\nexport const EVENT_OVERFLOW           = 'overflow';\r\nexport const EVENT_DESTROY            = 'destroy';\r\nexport const EVENT_ARROWS_MOUNTED     = 'arrows:mounted';\r\nexport const EVENT_ARROWS_UPDATED     = 'arrows:updated';\r\nexport const EVENT_PAGINATION_MOUNTED = 'pagination:mounted';\r\nexport const EVENT_PAGINATION_UPDATED = 'pagination:updated';\r\nexport const EVENT_NAVIGATION_MOUNTED = 'navigation:mounted';\r\nexport const EVENT_AUTOPLAY_PLAY      = 'autoplay:play';\r\nexport const EVENT_AUTOPLAY_PLAYING   = 'autoplay:playing';\r\nexport const EVENT_AUTOPLAY_PAUSE     = 'autoplay:pause';\r\nexport const EVENT_LAZYLOAD_LOADED    = 'lazyload:loaded';\r\n\r\n/** @internal */\r\nexport const EVENT_SLIDE_KEYDOWN     = 'sk';\r\nexport const EVENT_SHIFTED           = 'sh';\r\nexport const EVENT_END_INDEX_CHANGED = 'ei';\r\n","const ARROW = 'Arrow';\r\nexport const ARROW_LEFT  = `${ ARROW }Left`;\r\nexport const ARROW_RIGHT = `${ ARROW }Right`;\r\nexport const ARROW_UP    = `${ ARROW }Up`;\r\nexport const ARROW_DOWN  = `${ ARROW }Down`;","/**\r\n * Enumerates slides from left to right.\r\n */\r\nexport const LTR = 'ltr';\r\n\r\n/**\r\n * Enumerates slides from right to left.\r\n */\r\nexport const RTL = 'rtl';\r\n\r\n/**\r\n * Enumerates slides in a col.\r\n */\r\nexport const TTB = 'ttb';\r\n","import { ARROW_DOWN, ARROW_LEFT, ARROW_RIGHT, ARROW_UP } from '../../constants/arrows';\r\nimport { RTL, TTB } from '../../constants/directions';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\n\r\n\r\n/**\r\n * The interface for the Direction component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface DirectionComponent extends BaseComponent {\r\n  resolve<R extends string>( prop: string, axisOnly?: boolean, direction?: Options['direction'] ): R;\r\n  orient( value: number ): number;\r\n}\r\n\r\n/**\r\n * The translation map for directions.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const ORIENTATION_MAP = {\r\n  width     : [ 'height' ],\r\n  left      : [ 'top', 'right' ],\r\n  right     : [ 'bottom', 'left' ],\r\n  x         : [ 'y' ],\r\n  X         : [ 'Y' ],\r\n  Y         : [ 'X' ],\r\n  ArrowLeft : [ ARROW_UP, ARROW_RIGHT ],\r\n  ArrowRight: [ ARROW_DOWN, ARROW_LEFT ],\r\n};\r\n\r\n/**\r\n * The component that absorbs the difference among directions.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Direction component object.\r\n */\r\nexport function Direction( Splide: Splide, Components: Components, options: Options ): DirectionComponent {\r\n  /**\r\n   * Resolves the provided property name.\r\n   *\r\n   * @param prop      - A property name to translate.\r\n   * @param axisOnly  - Optional. If `ture`, returns the same property for LTR and RTL.\r\n   * @param direction - Optional. Specify the direction. The default value is the `direction` option.\r\n   */\r\n  function resolve<R extends string>( prop: string, axisOnly?: boolean, direction?: Options['direction'] ): R {\r\n    direction = direction || options.direction;\r\n    const index = direction === RTL && ! axisOnly ? 1 : direction === TTB ? 0 : -1;\r\n\r\n    return ORIENTATION_MAP[ prop ] && ORIENTATION_MAP[ prop ][ index ]\r\n      || prop.replace( /width|left|right/i, ( match, offset ) => {\r\n        const replacement = ORIENTATION_MAP[ match.toLowerCase() ][ index ] || match;\r\n        return offset > 0 ? replacement.charAt( 0 ).toUpperCase() + replacement.slice( 1 ) : replacement;\r\n      } );\r\n  }\r\n\r\n  /**\r\n   * Orients the value towards the current direction.\r\n   *\r\n   * @param value - A value to orient.\r\n   *\r\n   * @return The oriented value.\r\n   */\r\n  function orient( value: number ): number {\r\n    return value * ( options.direction === RTL ? 1 : -1 );\r\n  }\r\n\r\n  return {\r\n    resolve,\r\n    orient,\r\n  };\r\n}\r\n","export const ROLE      = 'role';\r\nexport const TAB_INDEX = 'tabindex';\r\nexport const DISABLED  = 'disabled';\r\n\r\nexport const ARIA_PREFIX          = 'aria-';\r\nexport const ARIA_CONTROLS        = `${ ARIA_PREFIX }controls`;\r\nexport const ARIA_CURRENT         = `${ ARIA_PREFIX }current`;\r\nexport const ARIA_SELECTED        = `${ ARIA_PREFIX }selected`;\r\nexport const ARIA_LABEL           = `${ ARIA_PREFIX }label`;\r\nexport const ARIA_LABELLEDBY      = `${ ARIA_PREFIX }labelledby`;\r\nexport const ARIA_HIDDEN          = `${ ARIA_PREFIX }hidden`;\r\nexport const ARIA_ORIENTATION     = `${ ARIA_PREFIX }orientation`;\r\nexport const ARIA_ROLEDESCRIPTION = `${ ARIA_PREFIX }roledescription`;\r\nexport const ARIA_LIVE            = `${ ARIA_PREFIX }live`;\r\nexport const ARIA_BUSY            = `${ ARIA_PREFIX }busy`;\r\nexport const ARIA_ATOMIC          = `${ ARIA_PREFIX }atomic`;\r\n\r\n/**\r\n * The array with all attributes to remove later.\r\n * Need to manually remove attributes that are not in this.\r\n * Note that removing `aria-live` disables the live region until the page reload.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const ALL_ATTRIBUTES = [\r\n  ROLE,\r\n  TAB_INDEX,\r\n  DISABLED,\r\n  ARIA_CONTROLS,\r\n  ARIA_CURRENT,\r\n  ARIA_LABEL,\r\n  ARIA_LABELLEDBY,\r\n  ARIA_HIDDEN,\r\n  ARIA_ORIENTATION,\r\n  ARIA_ROLEDESCRIPTION,\r\n];\r\n","/**\r\n * The project code.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const PROJECT_CODE = 'splide';\r\n\r\n/**\r\n * The data attribute prefix.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const DATA_ATTRIBUTE = `data-${ PROJECT_CODE }`;\r\n","import { PROJECT_CODE } from './project';\r\n\r\n/**\r\n * The prefix for classes.\r\n *\r\n * @since 4.1.0\r\n */\r\nconst CLASS_PREFIX = `${ PROJECT_CODE }__`;\r\n\r\n/**\r\n * The prefix for status classes.\r\n *\r\n * @since 4.1.0\r\n */\r\nconst STATUS_CLASS_PREFIX = 'is-';\r\n\r\n/**\r\n * All classes as constants.\r\n */\r\nexport const CLASS_ROOT            = PROJECT_CODE;\r\nexport const CLASS_TRACK           = `${ CLASS_PREFIX }track`;\r\nexport const CLASS_LIST            = `${ CLASS_PREFIX }list`;\r\nexport const CLASS_SLIDE           = `${ CLASS_PREFIX }slide`;\r\nexport const CLASS_CLONE           = `${ CLASS_SLIDE }--clone`;\r\nexport const CLASS_CONTAINER       = `${ CLASS_SLIDE }__container`;\r\nexport const CLASS_ARROWS          = `${ CLASS_PREFIX }arrows`;\r\nexport const CLASS_ARROW           = `${ CLASS_PREFIX }arrow`;\r\nexport const CLASS_ARROW_PREV      = `${ CLASS_ARROW }--prev`;\r\nexport const CLASS_ARROW_NEXT      = `${ CLASS_ARROW }--next`;\r\nexport const CLASS_PAGINATION      = `${ CLASS_PREFIX }pagination`;\r\nexport const CLASS_PAGINATION_PAGE = `${ CLASS_PAGINATION }__page`;\r\nexport const CLASS_PROGRESS        = `${ CLASS_PREFIX }progress`;\r\nexport const CLASS_PROGRESS_BAR    = `${ CLASS_PROGRESS }__bar`;\r\nexport const CLASS_TOGGLE          = `${ CLASS_PREFIX }toggle`;\r\nexport const CLASS_TOGGLE_PLAY     = `${ CLASS_TOGGLE }__play`;\r\nexport const CLASS_TOGGLE_PAUSE    = `${ CLASS_TOGGLE }__pause`;\r\nexport const CLASS_SPINNER         = `${ CLASS_PREFIX }spinner`;\r\nexport const CLASS_SR              = `${ CLASS_PREFIX }sr`;\r\nexport const CLASS_INITIALIZED     = `${ STATUS_CLASS_PREFIX }initialized`;\r\nexport const CLASS_ACTIVE          = `${ STATUS_CLASS_PREFIX }active`;\r\nexport const CLASS_PREV            = `${ STATUS_CLASS_PREFIX }prev`;\r\nexport const CLASS_NEXT            = `${ STATUS_CLASS_PREFIX }next`;\r\nexport const CLASS_VISIBLE         = `${ STATUS_CLASS_PREFIX }visible`;\r\nexport const CLASS_LOADING         = `${ STATUS_CLASS_PREFIX }loading`;\r\nexport const CLASS_FOCUS_IN        = `${ STATUS_CLASS_PREFIX }focus-in`;\r\nexport const CLASS_OVERFLOW        = `${ STATUS_CLASS_PREFIX }overflow`;\r\n\r\n/**\r\n * The array with all status classes except for `is-initialized`.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const STATUS_CLASSES = [\r\n  CLASS_ACTIVE,\r\n  CLASS_VISIBLE,\r\n  CLASS_PREV,\r\n  CLASS_NEXT,\r\n  CLASS_LOADING,\r\n  CLASS_FOCUS_IN,\r\n  CLASS_OVERFLOW,\r\n];\r\n\r\n/**\r\n * The collection of classes for elements that Splide dynamically creates.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const CLASSES = {\r\n  slide     : CLASS_SLIDE,\r\n  clone     : CLASS_CLONE,\r\n  arrows    : CLASS_ARROWS,\r\n  arrow     : CLASS_ARROW,\r\n  prev      : CLASS_ARROW_PREV,\r\n  next      : CLASS_ARROW_NEXT,\r\n  pagination: CLASS_PAGINATION,\r\n  page      : CLASS_PAGINATION_PAGE,\r\n  spinner   : CLASS_SPINNER,\r\n};\r\n","import { PROJECT_CODE } from '../../../constants/project';\r\n\r\n\r\n/**\r\n * Throws an error if the provided condition is falsy.\r\n *\r\n * @param condition - If falsy, an error is thrown.\r\n * @param message   - Optional. A message to display.\r\n */\r\nexport function assert( condition: any, message?: string ): void {\r\n  if ( ! condition ) {\r\n    throw new Error( `[${ PROJECT_CODE }] ${ message || '' }` );\r\n  }\r\n}\r\n","/**\r\n * The power of the friction.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const FRICTION = 5;\r\n\r\n/**\r\n * If the user stops dragging for this duration with keeping the pointer down, updates the base coord and time.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const LOG_INTERVAL = 200;\r\n\r\n/**\r\n * Start events for dragging.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const POINTER_DOWN_EVENTS = 'touchstart mousedown';\r\n\r\n/**\r\n * Update events for dragging.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const POINTER_MOVE_EVENTS = 'touchmove mousemove';\r\n\r\n/**\r\n * End events for dragging.\r\n * The `click` event is required because the browser sometimes dispatches `drag` events instead of `mouse`.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const POINTER_UP_EVENTS = 'touchend touchcancel mouseup click';\r\n","/**\r\n * The type for the regular slider.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const SLIDE = 'slide';\r\n\r\n/**\r\n * The type for the carousel slider.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const LOOP = 'loop';\r\n\r\n/**\r\n * The type for the fade slider that can not have multiple slides in a page.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const FADE = 'fade';\r\n","import {\r\n  ALL_ATTRIBUTES,\r\n  ARIA_CONTROLS,\r\n  ARIA_CURRENT,\r\n  ARIA_HIDDEN,\r\n  ARIA_LABEL,\r\n  ARIA_ROLEDESCRIPTION,\r\n  ROLE,\r\n  TAB_INDEX,\r\n} from '../../constants/attributes';\r\nimport {\r\n  CLASS_ACTIVE,\r\n  CLASS_CONTAINER,\r\n  CLASS_NEXT,\r\n  CLASS_PREV,\r\n  CLASS_VISIBLE,\r\n  STATUS_CLASSES,\r\n} from '../../constants/classes';\r\nimport {\r\n  EVENT_ACTIVE,\r\n  EVENT_CLICK,\r\n  EVENT_HIDDEN,\r\n  EVENT_INACTIVE,\r\n  EVENT_MOVE,\r\n  EVENT_MOVED,\r\n  EVENT_NAVIGATION_MOUNTED,\r\n  EVENT_SCROLLED,\r\n  EVENT_SHIFTED,\r\n  EVENT_SLIDE_KEYDOWN,\r\n  EVENT_VISIBLE,\r\n} from '../../constants/events';\r\nimport { MOVING, SCROLLING } from '../../constants/states';\r\nimport { FADE, LOOP } from '../../constants/types';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent } from '../../types';\r\nimport {\r\n  abs,\r\n  apply,\r\n  ceil,\r\n  child,\r\n  CSSProperties,\r\n  floor,\r\n  focus,\r\n  format,\r\n  getAttribute,\r\n  hasClass,\r\n  min,\r\n  pad,\r\n  queryAll,\r\n  rect,\r\n  removeAttribute,\r\n  removeClass,\r\n  setAttribute,\r\n  style as _style,\r\n  toggleClass,\r\n} from '@splidejs/utils';\r\nimport { define } from '../../utils/define/define';\r\n\r\n\r\n/**\r\n * The interface for the Slide sub component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface  SlideComponent extends BaseComponent {\r\n  readonly index: number;\r\n  readonly slideIndex: number;\r\n  readonly slide: HTMLElement;\r\n  readonly container: HTMLElement;\r\n  readonly isClone: boolean;\r\n  readonly pos: number;\r\n  readonly size: number;\r\n\r\n  update(): void;\r\n  style( prop: CSSProperties, value: string | number, useContainer?: boolean ): void\r\n  isWithin( from: number, distance: number ): boolean;\r\n}\r\n\r\n/**\r\n * The subcomponent for managing each slide.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param index      - A slide index.\r\n * @param slideIndex - A slide index for clones. This must be `-1` if the slide is not a clone.\r\n * @param slide      - A slide element.\r\n *\r\n * @return A Slide subcomponent.\r\n */\r\nexport function Slide( Splide: Splide, index: number, slideIndex: number, slide: HTMLElement ): SlideComponent {\r\n  const event = Splide.event.create();\r\n  const { on, emit, bind } = event;\r\n  const { Components, root, options } = Splide;\r\n  const { isNavigation, updateOnMove, i18n, pagination, slideFocus } = options;\r\n  const { resolve } = Components.Direction;\r\n  const styles    = getAttribute( slide, 'style' );\r\n  const label     = getAttribute( slide, ARIA_LABEL );\r\n  const isClone   = slideIndex > -1;\r\n  const container = child( slide, `.${ CLASS_CONTAINER }` );\r\n\r\n  /**\r\n   * Turns into `true` when the component is destroyed.\r\n   */\r\n  let destroyed: boolean;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount( this: SlideComponent ): void {\r\n    if ( ! isClone ) {\r\n      slide.id = `${ root.id }-slide${ pad( index + 1 ) }`;\r\n      setAttribute( slide, ROLE, pagination ? 'tabpanel' : 'group' );\r\n      setAttribute( slide, ARIA_ROLEDESCRIPTION, i18n.slide );\r\n      setAttribute( slide, ARIA_LABEL, label || format( i18n.slideLabel, [ index + 1, Splide.length ] ) );\r\n    }\r\n\r\n    listen();\r\n  }\r\n\r\n  /**\r\n   * Listens to some events.\r\n   */\r\n  function listen(): void {\r\n    bind( slide, 'click', apply( emit, EVENT_CLICK, self ) );\r\n    bind( slide, 'keydown', apply( emit, EVENT_SLIDE_KEYDOWN, self ) );\r\n    on( [ EVENT_MOVED, EVENT_SHIFTED, EVENT_SCROLLED ], update );\r\n    on( EVENT_NAVIGATION_MOUNTED, initNavigation );\r\n\r\n    if ( updateOnMove ) {\r\n      on( EVENT_MOVE, onMove );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    destroyed = true;\r\n    event.destroy();\r\n    removeClass( slide, STATUS_CLASSES );\r\n    removeAttribute( slide, ALL_ATTRIBUTES );\r\n    setAttribute( slide, 'style', styles );\r\n    setAttribute( slide, ARIA_LABEL, label || '' );\r\n  }\r\n\r\n  /**\r\n   * Initializes slides as navigation.\r\n   */\r\n  function initNavigation(): void {\r\n    const controls = Splide.splides.map( target => {\r\n      const Slide = target.splide.Components.Slides.getAt( index );\r\n      return Slide ? Slide.slide.id : '';\r\n    } ).join( ' ' );\r\n\r\n    setAttribute( slide, ARIA_LABEL, format( i18n.slideX, ( isClone ? slideIndex : index ) + 1 ) );\r\n    setAttribute( slide, ARIA_CONTROLS, controls );\r\n    setAttribute( slide, ROLE, slideFocus ? 'button' : '' );\r\n    slideFocus && removeAttribute( slide, ARIA_ROLEDESCRIPTION );\r\n  }\r\n\r\n  /**\r\n   * If the `updateOnMove` option is `true`, called when the slider starts moving.\r\n   */\r\n  function onMove(): void {\r\n    if ( ! destroyed ) {\r\n      update();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates attribute and classes of the slide.\r\n   */\r\n  function update(): void {\r\n    if ( ! destroyed ) {\r\n      const { index: curr } = Splide;\r\n\r\n      updateActivity();\r\n      updateVisibility();\r\n      toggleClass( slide, CLASS_PREV, index === curr - 1 );\r\n      toggleClass( slide, CLASS_NEXT, index === curr + 1 );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the status related with activity.\r\n   */\r\n  function updateActivity(): void {\r\n    const active = isActive();\r\n\r\n    if ( active !== hasClass( slide, CLASS_ACTIVE ) ) {\r\n      toggleClass( slide, CLASS_ACTIVE, active );\r\n      setAttribute( slide, ARIA_CURRENT, isNavigation && active || '' );\r\n      emit( active ? EVENT_ACTIVE : EVENT_INACTIVE, self );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates classes and attributes related with visibility.\r\n   * - Do not update aria-hidden on shifting to avoid Window Narrator from start reading contents.\r\n   * - If the slide has focus and gets hidden, moves focus to the active slide.\r\n   */\r\n  function updateVisibility(): void {\r\n    const visible = isVisible();\r\n    const hidden = ! visible && ( ! isActive() || isClone );\r\n\r\n    if ( ! Splide.state.is( [ MOVING, SCROLLING ] ) ) {\r\n      setAttribute( slide, ARIA_HIDDEN, hidden || '' );\r\n    }\r\n\r\n    setAttribute( queryAll( slide, options.focusableNodes || '' ), TAB_INDEX, hidden ? -1 : '' );\r\n\r\n    if ( slideFocus ) {\r\n      setAttribute( slide, TAB_INDEX, hidden ? -1 : 0 );\r\n    }\r\n\r\n    if ( visible !== hasClass( slide, CLASS_VISIBLE ) ) {\r\n      toggleClass( slide, CLASS_VISIBLE, visible );\r\n      emit( visible ? EVENT_VISIBLE : EVENT_HIDDEN, self );\r\n    }\r\n\r\n    if ( ! visible && document.activeElement === slide ) {\r\n      const Slide = Components.Slides.getAt( Splide.index );\r\n      Slide && focus( Slide.slide );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds a CSS rule to the slider or the container.\r\n   *\r\n   * @param prop         - A property name.\r\n   * @param value        - A CSS value to add.\r\n   * @param useContainer - Optional. Determines whether to apply the rule to the container or not.\r\n   */\r\n  function style( prop: CSSProperties, value: string | number, useContainer?: boolean ): void {\r\n    _style( ( useContainer && container ) || slide, prop, value );\r\n  }\r\n\r\n  /**\r\n   * Checks if the slide is active or not.\r\n   *\r\n   * @return `true` if the slide is active.\r\n   */\r\n  function isActive(): boolean {\r\n    const { index: curr } = Splide;\r\n    return curr === index || ( options.cloneStatus && curr === slideIndex );\r\n  }\r\n\r\n  /**\r\n   * Checks if the slide is visible or not.\r\n   */\r\n  function isVisible(): boolean {\r\n    if ( Splide.is( FADE ) ) {\r\n      return isActive();\r\n    }\r\n\r\n    const trackRect = rect( Components.Elements.track );\r\n    const slideRect = rect( slide );\r\n    const left      = resolve( 'left', true );\r\n    const right     = resolve( 'right', true );\r\n\r\n    return floor( trackRect[ left ] ) <= ceil( slideRect[ left ] )\r\n      && floor( slideRect[ right ] ) <= ceil( trackRect[ right ] );\r\n  }\r\n\r\n  /**\r\n   * Calculates how far this slide is from another slide and\r\n   * returns `true` if the distance is within the given number.\r\n   *\r\n   * @param from     - An index of a base slide.\r\n   * @param distance - `true` if the slide is within this number.\r\n   *\r\n   * @return `true` if the slide is within the `distance` from the base slide, or otherwise `false`.\r\n   */\r\n  function isWithin( from: number, distance: number ): boolean {\r\n    let diff = abs( from - index );\r\n\r\n    if ( ! isClone && ( options.rewind || Splide.is( LOOP ) ) ) {\r\n      diff = min( diff, Splide.length - diff );\r\n    }\r\n\r\n    return diff <= distance;\r\n  }\r\n\r\n  function pos(): number {\r\n    return abs( rect( slide )[ resolve( 'left' ) ] - rect( Components.Elements.list )[ resolve( 'left' ) ] );\r\n  }\r\n\r\n  function size(): number {\r\n    return rect( slide )[ resolve( 'width' ) ];\r\n  }\r\n\r\n  const self = define( {\r\n    index,\r\n    slideIndex,\r\n    slide,\r\n    container,\r\n    isClone,\r\n    mount,\r\n    destroy,\r\n    update,\r\n    style,\r\n    isWithin,\r\n  }, { pos, size } );\r\n\r\n  return self;\r\n}\r\n","import { forOwn } from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * Defines getters in the provided object.\r\n * Properties will be enumerable but not writable.\r\n *\r\n * @param object  - An object where to define getters.\r\n * @param getters - An object literal containing getters as a key and a function.\r\n *\r\n * @return A provided object with getters.\r\n */\r\nexport function define<T, G extends Record<PropertyKey, () => unknown>>(\r\n  object: T,\r\n  getters: G\r\n): T & Readonly<{\r\n  [ K in keyof G ]: ReturnType<G[ K ]>\r\n}> {\r\n  forOwn( getters, ( get, key ) => {\r\n    Object.defineProperty( object, key, { get, enumerable: true } );\r\n  } );\r\n\r\n  return object as any;\r\n}\r\n","import { DATA_ATTRIBUTE } from '../../constants/project';\r\n\r\n\r\n/**\r\n * The data attribute for the autoplay interval duration.\r\n *\r\n * @since 3.5.0\r\n */\r\nexport const INTERVAL_DATA_ATTRIBUTE = `${ DATA_ATTRIBUTE }-interval`;\r\n","/**\r\n * AddEventListenerOptions for listeners that may prevent the browser scroll.\r\n *\r\n * @since 3.4.1\r\n */\r\nexport const SCROLL_LISTENER_OPTIONS = { passive: false, capture: true };\r\n","import { DATA_ATTRIBUTE } from '../../constants/project';\r\n\r\n\r\n/**\r\n * The data attribute for the src value.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const SRC_DATA_ATTRIBUTE = `${ DATA_ATTRIBUTE }-lazy`;\r\n\r\n/**\r\n * The data attribute for the srcset value.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const SRCSET_DATA_ATTRIBUTE = `${ SRC_DATA_ATTRIBUTE }-srcset`;\r\n\r\n/**\r\n * The selector string for images to load.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const IMAGE_SELECTOR = `[${ SRC_DATA_ATTRIBUTE }], [${ SRCSET_DATA_ATTRIBUTE }]`;\r\n","import { ARIA_ORIENTATION } from '../../constants/attributes';\r\nimport { TTB } from '../../constants/directions';\r\nimport {\r\n  EVENT_CLICK,\r\n  EVENT_MOUNTED,\r\n  EVENT_MOVE,\r\n  EVENT_NAVIGATION_MOUNTED,\r\n  EVENT_SLIDE_KEYDOWN,\r\n  EVENT_UPDATED,\r\n} from '../../constants/events';\r\nimport { LOOP } from '../../constants/types';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { apply, empty, EventInterface, includes, isUndefined, prevent, setAttribute } from '@splidejs/utils';\r\nimport { SlideComponent } from '../Slides/Slide';\r\n\r\n\r\n/**\r\n * The interface for the Sync component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface SyncComponent extends BaseComponent {\r\n  remount(): void;\r\n}\r\n\r\n/**\r\n * The keys for triggering the navigation slide.\r\n *\r\n * @since 3.0.0\r\n */\r\nconst TRIGGER_KEYS = [ ' ', 'Enter' ];\r\n\r\n/**\r\n * The component for syncing multiple sliders.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface object.\r\n *\r\n * @return A Sync component object.\r\n */\r\nexport function Sync(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): SyncComponent {\r\n  const { isNavigation, slideFocus } = options;\r\n\r\n  /**\r\n   * Stores event objects.\r\n   */\r\n  const events: EventInterface[] = []; // todo\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    Splide.splides.forEach( target => {\r\n      if ( ! target.isParent ) {\r\n        sync( Splide, target.splide );\r\n        sync( target.splide, Splide );\r\n      }\r\n    } );\r\n\r\n    if ( isNavigation ) {\r\n      navigate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    events.forEach( event => { event.destroy() } );\r\n    empty( events );\r\n  }\r\n\r\n  /**\r\n   * Remounts the component.\r\n   *\r\n   * @internal\r\n   */\r\n  function remount(): void {\r\n    destroy();\r\n    mount();\r\n  }\r\n\r\n  /**\r\n   * Syncs the current index with a provided child splide instance.\r\n   *\r\n   * @param splide - A splide instance to sync with.\r\n   * @param target - A target splide instance.\r\n   */\r\n  function sync( splide: Splide, target: Splide ): void {\r\n    const event = splide.event.create();\r\n\r\n    event.on( EVENT_MOVE, ( index, prev, dest ) => {\r\n      target.go( target.is( LOOP ) ? dest : index );\r\n    } );\r\n\r\n    events.push( event );\r\n  }\r\n\r\n  /**\r\n   * Makes slides clickable and moves the slider to the index of clicked slide.\r\n   * Note that the direction of `menu` is implicitly `vertical` as default.\r\n   */\r\n  function navigate(): void {\r\n    const ev = event.create();\r\n    const { on } = ev;\r\n\r\n    on( EVENT_CLICK, onClick );\r\n    on( EVENT_SLIDE_KEYDOWN, onKeydown );\r\n    on( [ EVENT_MOUNTED, EVENT_UPDATED ], update );\r\n\r\n    events.push( ev );\r\n    ev.emit( EVENT_NAVIGATION_MOUNTED, Splide.splides );\r\n  }\r\n\r\n  /**\r\n   * Update attributes.\r\n   */\r\n  function update(): void {\r\n    setAttribute(\r\n      Components.Elements.list,\r\n      ARIA_ORIENTATION,\r\n      options.direction === TTB ? 'vertical' : ''\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Called when the navigation slide is clicked.\r\n   *\r\n   * @param Slide - A clicked Slide component.\r\n   */\r\n  function onClick( Slide: SlideComponent ): void {\r\n    Splide.go( Slide.index );\r\n  }\r\n\r\n  /**\r\n   * Called when any key is pressed on the navigation slide.\r\n   *\r\n   * @param Slide - A Slide component.\r\n   * @param e     - A KeyboardEvent object.\r\n   */\r\n  function onKeydown( Slide: SlideComponent, e: KeyboardEvent ): void {\r\n    if ( includes( TRIGGER_KEYS, e.key ) ) {\r\n      onClick( Slide );\r\n      prevent( e );\r\n    }\r\n  }\r\n\r\n  return {\r\n    setup: apply(\r\n      Components.Media.set,\r\n      { slideFocus: isUndefined( slideFocus ) ? isNavigation : slideFocus },\r\n      true\r\n    ),\r\n    mount,\r\n    destroy,\r\n    remount,\r\n  };\r\n}\r\n","import { MEDIA_PREFERS_REDUCED_MOTION } from '../../constants/media';\r\nimport { CREATED, DESTROYED } from '../../constants/states';\r\nimport { EventBinder, merge, omit, ownKeys } from '@splidejs/utils';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { EVENT_UPDATED } from '../../constants/events';\r\n\r\n\r\n/**\r\n * The interface for the Media component.\r\n *\r\n * @since 4.0.0\r\n */\r\nexport interface MediaComponent extends BaseComponent {\r\n  /** @internal */\r\n  reduce( reduced: boolean ): void;\r\n  set( options: Options, base?: boolean, notify?: boolean ): void;\r\n}\r\n\r\n/**\r\n * The component for observing media queries and updating options if necessary.\r\n * This used to be the Options component.\r\n *\r\n * @since 4.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Media component object.\r\n */\r\nexport function Media( Splide: Splide, Components: Components, options: Options ): MediaComponent {\r\n  const { state } = Splide;\r\n  const breakpoints   = options.breakpoints || {};\r\n  const reducedMotion = options.reducedMotion || {};\r\n  const binder        = EventBinder();\r\n\r\n  /**\r\n   * Stores options and MediaQueryList object.\r\n   */\r\n  const queries: Array<[ Options, MediaQueryList ]> = [];\r\n\r\n  /**\r\n   * Called when the component is constructed.\r\n   */\r\n  function setup(): void {\r\n    const isMin = options.mediaQuery === 'min';\r\n\r\n    ownKeys( breakpoints )\r\n      .sort( ( n, m ) => isMin ? +n - +m : +m - +n )\r\n      .forEach( key => {\r\n        register( breakpoints[ key ], `(${ isMin ? 'min' : 'max' }-width:${ key }px)` );\r\n      } );\r\n\r\n    register( reducedMotion, MEDIA_PREFERS_REDUCED_MOTION );\r\n    update();\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   *\r\n   * @param completely - Will be `true` for complete destruction.\r\n   */\r\n  function destroy( completely: boolean ): void {\r\n    if ( completely ) {\r\n      binder.destroy();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registers entries as [ Options, media query string ].\r\n   *\r\n   * @param options - Options merged to current options when the document matches the query.\r\n   * @param query   - A query string.\r\n   */\r\n  function register( options: Options, query: string ): void {\r\n    const queryList = matchMedia( query );\r\n    binder.bind( queryList, 'change', update );\r\n    queries.push( [ options, queryList ] );\r\n  }\r\n\r\n  /**\r\n   * Checks all media queries in entries and updates options.\r\n   */\r\n  function update(): void {\r\n    const destroyed = state.is( DESTROYED );\r\n    const direction = options.direction;\r\n    const merged = queries.reduce<Options>( ( merged, entry ) => {\r\n      return merge( merged, entry[ 1 ].matches ? entry[ 0 ] : {} );\r\n    }, {} );\r\n\r\n    omit( options );\r\n    set( merged );\r\n\r\n    if ( options.destroy ) {\r\n      Splide.destroy( options.destroy === 'completely' );\r\n    } else if ( destroyed ) {\r\n      destroy( true );\r\n      Splide.mount();\r\n    } else {\r\n      direction !== options.direction && Splide.refresh();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disables or enables `reducedMotion` options.\r\n   * This method does nothing when the document does not match the query.\r\n   *\r\n   * @internal\r\n   *\r\n   * @param enable - Determines whether to apply `reducedMotion` options or not.\r\n   */\r\n  function reduce( enable: boolean ): void {\r\n    if ( matchMedia( MEDIA_PREFERS_REDUCED_MOTION ).matches ) {\r\n      enable ? merge( options, reducedMotion ) : omit( options, ownKeys( reducedMotion ) );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets current options or base options (prototype).\r\n   * If changing base options, always emits the `updated` event.\r\n   *\r\n   * @internal\r\n   *\r\n   * @param opts   - New options.\r\n   * @param base   - Optional. Determines whether to also update base options or not.\r\n   * @param notify - Optional. If `true`, always emits the `update` event.\r\n   */\r\n  function set( opts: Options, base?: boolean, notify?: boolean ): void {\r\n    merge( options, opts );\r\n    base && merge( Object.getPrototypeOf( options ), opts );\r\n\r\n    if ( notify || ! state.is( CREATED ) ) {\r\n      Splide.emit( EVENT_UPDATED, options );\r\n    }\r\n  }\r\n\r\n  return {\r\n    setup,\r\n    destroy,\r\n    reduce,\r\n    set,\r\n  };\r\n}\r\n","import { ALL_ATTRIBUTES, ARIA_LABEL, ARIA_LABELLEDBY, ARIA_ROLEDESCRIPTION, ROLE } from '../../constants/attributes';\r\nimport {\r\n  CLASS_ACTIVE,\r\n  CLASS_ARROW_NEXT,\r\n  CLASS_ARROW_PREV,\r\n  CLASS_ARROWS,\r\n  CLASS_CLONE,\r\n  CLASS_FOCUS_IN,\r\n  CLASS_LIST,\r\n  CLASS_PAGINATION,\r\n  CLASS_PROGRESS_BAR,\r\n  CLASS_ROOT,\r\n  CLASS_SLIDE,\r\n  CLASS_TOGGLE,\r\n  CLASS_TRACK,\r\n} from '../../constants/classes';\r\nimport { EVENT_REFRESH, EVENT_UPDATED } from '../../constants/events';\r\nimport { PROJECT_CODE } from '../../constants/project';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport {\r\n  addClass,\r\n  assign,\r\n  child,\r\n  children,\r\n  closest,\r\n  empty,\r\n  EventInterface,\r\n  getAttribute,\r\n  push,\r\n  query,\r\n  removeAttribute,\r\n  removeClass,\r\n  setAttribute,\r\n  toggleClass,\r\n  uniqueId,\r\n} from '@splidejs/utils';\r\nimport { assert } from '../../utils';\r\nimport { POINTER_DOWN_EVENTS } from '../Drag/constants';\r\n\r\n\r\n/**\r\n * The interface for elements which the slider consists of.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ElementCollection {\r\n  root: HTMLElement;\r\n  track: HTMLElement;\r\n  list: HTMLElement;\r\n  slides: HTMLElement[];\r\n  arrows?: HTMLElement;\r\n  pagination?: HTMLUListElement;\r\n  prev?: HTMLButtonElement;\r\n  next?: HTMLButtonElement;\r\n  bar?: HTMLElement;\r\n  toggle?: HTMLElement;\r\n}\r\n\r\n/**\r\n * The interface for the Elements component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ElementsComponent extends BaseComponent, ElementCollection {\r\n}\r\n\r\n/**\r\n * The component that collects and handles elements which the slider consists of.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return An Elements component object.\r\n */\r\nexport function Elements(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): ElementsComponent {\r\n  const { on, bind } = event;\r\n  const { root } = Splide;\r\n  const { i18n } = options;\r\n  const elements: ElementCollection = {} as ElementCollection;\r\n\r\n  /**\r\n   * Stores all slide elements.\r\n   */\r\n  const slides: HTMLElement[] = [];\r\n\r\n  /**\r\n   * Stores all root classes.\r\n   */\r\n  let rootClasses: string[] = [];\r\n\r\n  /**\r\n   * Stores all list classes.\r\n   */\r\n  let trackClasses: string[] = [];\r\n\r\n  /**\r\n   * The track element.\r\n   */\r\n  let track: HTMLElement;\r\n\r\n  /**\r\n   * The list element.\r\n   */\r\n  let list: HTMLElement;\r\n\r\n  /**\r\n   * Turns into `true` when detecting keydown, and `false` when detecting pointerdown.\r\n   */\r\n  let isUsingKey: boolean;\r\n\r\n  /**\r\n   * Called when the component is constructed.\r\n   */\r\n  function setup(): void {\r\n    collect();\r\n    init();\r\n    update();\r\n  }\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    on( EVENT_REFRESH, destroy );\r\n    on( EVENT_REFRESH, setup );\r\n    on( EVENT_UPDATED, update );\r\n\r\n    bind( document, `${ POINTER_DOWN_EVENTS } keydown`, e => {\r\n      isUsingKey = e.type === 'keydown';\r\n    }, { capture: true } );\r\n\r\n    bind( root, 'focusin', () => {\r\n      toggleClass( root, CLASS_FOCUS_IN, !! isUsingKey );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   *\r\n   * @param completely - Whether to destroy the component completely or not.\r\n   */\r\n  function destroy( completely?: boolean ): void {\r\n    const attrs = ALL_ATTRIBUTES.concat( 'style' );\r\n\r\n    empty( slides );\r\n    removeClass( root, rootClasses );\r\n    removeClass( track, trackClasses );\r\n    removeAttribute( [ track, list ], attrs );\r\n    removeAttribute( root, completely ? attrs : [ 'style', ARIA_ROLEDESCRIPTION ] );\r\n  }\r\n\r\n  /**\r\n   * Updates the status of elements.\r\n   */\r\n  function update(): void {\r\n    removeClass( root, rootClasses );\r\n    removeClass( track, trackClasses );\r\n\r\n    rootClasses  = getClasses( CLASS_ROOT );\r\n    trackClasses = getClasses( CLASS_TRACK );\r\n\r\n    addClass( root, rootClasses );\r\n    addClass( track, trackClasses );\r\n\r\n    setAttribute( root, ARIA_LABEL, options.label );\r\n    setAttribute( root, ARIA_LABELLEDBY, options.labelledby );\r\n  }\r\n\r\n  /**\r\n   * Collects elements which the slider consists of.\r\n   */\r\n  function collect(): void {\r\n    track = find( CLASS_TRACK );\r\n    list  = child( track, `.${ CLASS_LIST }` );\r\n\r\n    assert( track && list, 'A track/list element is missing.' );\r\n    push( slides, children( list, `.${ CLASS_SLIDE }:not(.${ CLASS_CLONE })` ) );\r\n\r\n    assign( elements, {\r\n      root,\r\n      track,\r\n      list,\r\n      slides,\r\n      arrows    : find( CLASS_ARROWS ),\r\n      pagination: find( CLASS_PAGINATION ),\r\n      prev      : find( CLASS_ARROW_PREV ),\r\n      next      : find( CLASS_ARROW_NEXT ),\r\n      bar       : find( CLASS_PROGRESS_BAR ),\r\n      toggle    : find( CLASS_TOGGLE ),\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Initializes essential elements.\r\n   * Note that do not change the role of the root element,\r\n   * which removes the region from the accessibility tree.\r\n   */\r\n  function init(): void {\r\n    const id   = root.id || uniqueId( PROJECT_CODE );\r\n    const role = options.role;\r\n\r\n    root.id  = id;\r\n    track.id = track.id || `${ id }-track`;\r\n    list.id  = list.id || `${ id }-list`;\r\n\r\n    if ( ! getAttribute( root, ROLE ) && root.tagName !== 'SECTION' && role ) {\r\n      setAttribute( root, ROLE, role );\r\n    }\r\n\r\n    setAttribute( root, ARIA_ROLEDESCRIPTION, i18n.carousel );\r\n    setAttribute( list, ROLE, 'presentation' );\r\n  }\r\n\r\n  /**\r\n   * Finds an element only in this slider, ignoring elements in a nested slider.\r\n   *\r\n   * @param className - A class name.\r\n   *\r\n   * @return A found element or null.\r\n   */\r\n  function find( className: string ): HTMLElement | undefined {\r\n    const elm = query<HTMLElement>( root, `.${ className }` );\r\n    return elm && closest( elm, `.${ CLASS_ROOT }` ) === root ? elm : undefined;\r\n  }\r\n\r\n  /**\r\n   * Return an array with modifier classes.\r\n   *\r\n   * @param base - A base class name.\r\n   *\r\n   * @return An array with classes.\r\n   */\r\n  function getClasses( base: string ): string[] {\r\n    return [\r\n      `${ base }--${ options.type }`,\r\n      `${ base }--${ options.direction }`,\r\n      options.drag && `${ base }--draggable`,\r\n      options.isNavigation && `${ base }--nav`,\r\n      base === CLASS_ROOT && CLASS_ACTIVE,\r\n    ];\r\n  }\r\n\r\n  return assign( elements, {\r\n    setup,\r\n    mount,\r\n    destroy,\r\n  } );\r\n}\r\n","import { EVENT_REFRESH, EVENT_RESIZE } from '../../constants/events';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { AnyFunction, BaseComponent, Components, Options } from '../../types';\r\nimport {\r\n  addClass,\r\n  append,\r\n  apply,\r\n  before,\r\n  between, CSSProperties,\r\n  empty,\r\n  EventInterface,\r\n  forEach as forEachItem,\r\n  includes,\r\n  isFunction,\r\n  isHTMLElement,\r\n  isString,\r\n  matches,\r\n  parseHtml,\r\n  queryAll,\r\n  removeNode,\r\n  toArray,\r\n} from '@splidejs/utils';\r\nimport { Slide, SlideComponent } from './Slide';\r\n\r\n\r\n/**\r\n * The interface for the Slides component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface SlidesComponent extends BaseComponent {\r\n  update(): void;\r\n  register( slide: HTMLElement, index: number, slideIndex: number ): void;\r\n  get( excludeClones?: boolean ): SlideComponent[];\r\n  getIn( page: number ): SlideComponent[];\r\n  getAt( index: number ): SlideComponent | undefined;\r\n  add( slide: string | Element | Array<string | Element>, index?: number ): void;\r\n  remove( selector: SlideMatcher ): void;\r\n  forEach( iteratee: SlidesIteratee, excludeClones?: boolean ): void;\r\n  filter( matcher: SlideMatcher ): SlideComponent[];\r\n  style( prop: string, value: string | number, useContainer?: boolean ): void\r\n  getLength( excludeClones?: boolean ): number;\r\n  isEnough(): boolean;\r\n}\r\n\r\n/**\r\n * The iteratee function for Slides.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport type SlidesIteratee = ( Slide: SlideComponent, index: number, Slides: SlideComponent[] ) => void\r\n\r\n/**\r\n * The predicate function for Slides.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport type SlidesPredicate = ( Slide: SlideComponent, index: number, Slides: SlideComponent[] ) => any\r\n\r\n/**\r\n * The type for filtering SlideComponent objects.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport type SlideMatcher = number | number[] | string | SlidesPredicate;\r\n\r\n/**\r\n * The component for managing all slides include clones.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return An Slides component object.\r\n */\r\nexport function Slides(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): SlidesComponent {\r\n  const { on, emit, bind } = event;\r\n  const { slides, list } = Components.Elements;\r\n\r\n  /**\r\n   * Stores all SlideComponent objects.\r\n   */\r\n  const Slides: SlideComponent[] = [];\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on( EVENT_REFRESH, destroy );\r\n    on( EVENT_REFRESH, init );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   */\r\n  function init(): void {\r\n    slides.forEach( ( slide, index ) => { register( slide, index, -1 ) } );\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    forEach( Slide => { Slide.destroy() } );\r\n    empty( Slides );\r\n  }\r\n\r\n  /**\r\n   * Manually updates the status of all slides.\r\n   */\r\n  function update(): void {\r\n    forEach( Slide => { Slide.update() } );\r\n  }\r\n\r\n  /**\r\n   * Registers a slide element and creates a Slide object.\r\n   * Needs to sort every time when a new slide is registered especially for clones.\r\n   *\r\n   * @param slide      - A slide element to register.\r\n   * @param index      - A slide index.\r\n   * @param slideIndex - A slide index for clones. This must be `-1` for regular slides.\r\n   */\r\n  function register( slide: HTMLElement, index: number, slideIndex: number ): void {\r\n    const object = Slide( Splide, index, slideIndex, slide );\r\n    object.mount();\r\n    Slides.push( object );\r\n    Slides.sort( ( Slide1, Slide2 ) => Slide1.index - Slide2.index );\r\n  }\r\n\r\n  /**\r\n   * Returns all Slide objects.\r\n   *\r\n   * @param excludeClones - Optional. Determines whether to exclude clones or not.\r\n   *\r\n   * @return An array with Slide objects.\r\n   */\r\n  function get( excludeClones?: boolean ): SlideComponent[] {\r\n    return excludeClones ? filter( Slide => ! Slide.isClone ) : Slides;\r\n  }\r\n\r\n  /**\r\n   * Returns slides in the specified page.\r\n   *\r\n   * @param page - A page index.\r\n   *\r\n   * @return An array with slides that belong to the page.\r\n   */\r\n  function getIn( page: number ): SlideComponent[] {\r\n    const { Controller } = Components;\r\n    const index = Controller.toIndex( page );\r\n    const max   = Controller.hasFocus() ? 1 : options.perPage;\r\n    return filter( Slide => between( Slide.index, index, index + max - 1 ) );\r\n  }\r\n\r\n  /**\r\n   * Returns a Slide object at the specified index.\r\n   *\r\n   * @param index - A slide index.\r\n   *\r\n   * @return A Slide object if available, or otherwise `undefined`.\r\n   */\r\n  function getAt( index: number ): SlideComponent | undefined {\r\n    return filter( index )[ 0 ];\r\n  }\r\n\r\n  /**\r\n   * Inserts a slide or slides at a specified index.\r\n   *\r\n   * @param items - A slide element, an HTML string or an array with them.\r\n   * @param index - Optional. An index to insert the slide at. If omitted, appends it to the list.\r\n   */\r\n  function add( items: string | Element | Array<string | Element>, index?: number ): void {\r\n    forEachItem( items, slide => {\r\n      if ( isString( slide ) ) {\r\n        slide = parseHtml( slide );\r\n      }\r\n\r\n      if ( isHTMLElement( slide ) ) {\r\n        const ref = slides[ index ];\r\n        ref ? before( slide, ref ) : append( list, slide );\r\n        addClass( slide, options.classes.slide );\r\n        observeImages( slide, apply( emit, EVENT_RESIZE ) );\r\n      }\r\n    } );\r\n\r\n    emit( EVENT_REFRESH );\r\n  }\r\n\r\n  /**\r\n   * Removes slides that match the matcher\r\n   * that can be an index, an array with indices, a selector, or an iteratee function.\r\n   *\r\n   * @param matcher - An index, an array with indices, a selector string, or an iteratee function.\r\n   */\r\n  function remove( matcher: SlideMatcher ): void {\r\n    removeNode( filter( matcher ).map( Slide => Slide.slide ) );\r\n    emit( EVENT_REFRESH );\r\n  }\r\n\r\n  /**\r\n   * Iterates over Slide objects by the iteratee function.\r\n   *\r\n   * @param iteratee      - An iteratee function that takes a Slide object, an index and an array with Slides.\r\n   * @param excludeClones - Optional. Determines whether to exclude clones or not.\r\n   */\r\n  function forEach( iteratee: SlidesIteratee, excludeClones?: boolean ): void {\r\n    get( excludeClones ).forEach( iteratee );\r\n  }\r\n\r\n  /**\r\n   * Filters Slides by the matcher\r\n   * that can be an index, an array with indices, a selector, or a predicate function.\r\n   *\r\n   * @param matcher - An index, an array with indices, a selector string, or a predicate function.\r\n   *\r\n   * @return An array with SlideComponent objects.\r\n   */\r\n  function filter( matcher: SlideMatcher ): SlideComponent[] {\r\n    return Slides.filter( isFunction( matcher )\r\n      ? matcher\r\n      : Slide => isString( matcher )\r\n        ? matches( Slide.slide, matcher )\r\n        : includes( toArray( matcher ), Slide.index )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Adds a CSS rule to all slides or containers.\r\n   *\r\n   * @param prop         - A property name.\r\n   * @param value        - A CSS value to add.\r\n   * @param useContainer - Optional. Determines whether to apply the rule to the container or not.\r\n   */\r\n  function style( prop: CSSProperties, value: string | number, useContainer?: boolean ): void {\r\n    forEach( Slide => { Slide.style( prop, value, useContainer ) } );\r\n  }\r\n\r\n  /**\r\n   * Invokes the callback after all images in the element are loaded.\r\n   *\r\n   * @param elm      - An element that may contain images.\r\n   * @param callback - A callback function.\r\n   */\r\n  function observeImages( elm: Element, callback: AnyFunction ): void {\r\n    const images = queryAll( elm, 'img' );\r\n    let { length } = images;\r\n\r\n    if ( length ) {\r\n      images.forEach( img => {\r\n        bind( img, 'load error', () => {\r\n          if ( ! --length ) {\r\n            callback();\r\n          }\r\n        } );\r\n      } );\r\n    } else {\r\n      callback();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the length of slides.\r\n   *\r\n   * @param excludeClones - Optional. Determines whether to exclude clones or not.\r\n   *\r\n   * @return The length of slides.\r\n   */\r\n  function getLength( excludeClones?: boolean ): number {\r\n    return excludeClones ? slides.length : Slides.length;\r\n  }\r\n\r\n  /**\r\n   * Checks if the number of slides is over than the `perPage` option, including clones.\r\n   *\r\n   * @return `true` if there are enough slides, or otherwise `false`.\r\n   */\r\n  function isEnough(): boolean {\r\n    return Slides.length > options.perPage;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy,\r\n    update,\r\n    register,\r\n    get,\r\n    getIn,\r\n    getAt,\r\n    add,\r\n    remove,\r\n    forEach,\r\n    filter,\r\n    style,\r\n    getLength,\r\n    isEnough,\r\n  };\r\n}\r\n","import { TTB } from '../../constants/directions';\r\nimport { EVENT_OVERFLOW, EVENT_REFRESH, EVENT_RESIZE, EVENT_RESIZED, EVENT_UPDATED } from '../../constants/events';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { apply, EventInterface, isObject, rect, style, Throttle, toggleClass, unit } from '@splidejs/utils';\r\nimport { assert } from '../../utils';\r\nimport { FADE } from '../../constants/types';\r\nimport { CLASS_OVERFLOW } from '../../constants/classes';\r\n\r\n\r\n/**\r\n * The interface for the Layout component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface LayoutComponent extends BaseComponent {\r\n  listSize(): number;\r\n  slideSize( index: number, withoutGap?: boolean ): number;\r\n  sliderSize( withoutGap?: boolean ): number;\r\n  totalSize( index?: number, withoutGap?: boolean ): number;\r\n  getPadding( right: boolean ): number;\r\n  isOverflow(): boolean;\r\n\r\n  /** @internal */\r\n  resize( force?: boolean ): void;\r\n}\r\n\r\n/**\r\n * The component that adjusts slider styles and provides methods for dimensions.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return An Layout component object.\r\n */\r\nexport function Layout(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): LayoutComponent {\r\n  const { on, bind, emit } = event;\r\n  const { Slides } = Components;\r\n  const { resolve } = Components.Direction;\r\n  const { root, track, list } = Components.Elements;\r\n  const { getAt, style: styleSlides } = Slides;\r\n\r\n  /**\r\n   * Indicates whether the slider direction is vertical or not.\r\n   */\r\n  let vertical: boolean;\r\n\r\n  /**\r\n   * Keeps the DOMRect object of the root element.\r\n   */\r\n  let rootRect: DOMRect;\r\n\r\n  /**\r\n   * Turns into `true` when the carousel is wider than the list.\r\n   */\r\n  let overflow: boolean;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    bind( window, 'resize load', Throttle( apply( emit, EVENT_RESIZE ) ) );\r\n    on( [ EVENT_UPDATED, EVENT_REFRESH ], init );\r\n    on( EVENT_RESIZE, resize );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component on `mount` or `updated`.\r\n   * Uses `max-width` for the root to prevent the slider from exceeding the parent element.\r\n   */\r\n  function init(): void {\r\n    vertical = options.direction === TTB;\r\n\r\n    style( root, 'maxWidth', unit( options.width ) );\r\n    style( track, resolve( 'paddingLeft' ), cssPadding( false ) );\r\n    style( track, resolve( 'paddingRight' ), cssPadding( true ) );\r\n\r\n    resize( true );\r\n  }\r\n\r\n  /**\r\n   * Updates dimensions of some elements when the carousel is resized.\r\n   * Also checks the carousel size and emits `overflow` events when it exceeds the list width.\r\n   *\r\n   * @param force - Skips checking the root dimension change and always performs the resizing process.\r\n   */\r\n  function resize( force?: boolean ): void {\r\n    const newRect = rect( root );\r\n\r\n    if ( force || rootRect.width !== newRect.width || rootRect.height !== newRect.height ) {\r\n      style( track, 'height', cssTrackHeight() );\r\n\r\n      styleSlides( resolve( 'marginRight' ), unit( options.gap ) );\r\n      styleSlides( 'width', cssSlideWidth() );\r\n      styleSlides( 'height', cssSlideHeight(), true );\r\n\r\n      rootRect = newRect;\r\n      emit( EVENT_RESIZED );\r\n\r\n      if ( overflow !== ( overflow = isOverflow() ) ) {\r\n        toggleClass( root, CLASS_OVERFLOW, overflow );\r\n        emit( EVENT_OVERFLOW, overflow );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses the padding option and returns the value for each side.\r\n   * This method returns `paddingTop` or `paddingBottom` for the vertical slider.\r\n   *\r\n   * @param right - Determines whether to get `paddingRight/Bottom` or `paddingLeft/Top`.\r\n   *\r\n   * @return The padding value as a CSS string.\r\n   */\r\n  function cssPadding( right: boolean ): string {\r\n    const { padding } = options;\r\n    const prop = resolve( right ? 'right' : 'left' );\r\n    return padding\r\n      && unit( padding[ prop ] || ( isObject( padding ) ? 0 : padding ) )\r\n      || '0px';\r\n  }\r\n\r\n  /**\r\n   * Returns the height of the track element as a CSS string.\r\n   *\r\n   * @return The height of the track.\r\n   */\r\n  function cssTrackHeight(): string {\r\n    let height = '';\r\n\r\n    if ( vertical ) {\r\n      height = cssHeight();\r\n      assert( height, 'height or heightRatio is missing.' );\r\n      height = `calc(${ height } - ${ cssPadding( false ) } - ${ cssPadding( true ) })`;\r\n    }\r\n\r\n    return height;\r\n  }\r\n\r\n  /**\r\n   * Converts options related with height to a CSS string.\r\n   *\r\n   * @return The height as a CSS string if available, or otherwise an empty string.\r\n   */\r\n  function cssHeight(): string {\r\n    return unit( options.height || rect( list ).width * options.heightRatio );\r\n  }\r\n\r\n  /**\r\n   * Returns the width of the slide as a CSS string.\r\n   *\r\n   * @return The width of the slide.\r\n   */\r\n  function cssSlideWidth(): string | null {\r\n    return options.autoWidth\r\n      ? null\r\n      : unit( options.fixedWidth ) || ( vertical ? '' : cssSlideSize() );\r\n  }\r\n\r\n  /**\r\n   * Returns the height of the slide as a CSS string.\r\n   *\r\n   * @return The height of the slide.\r\n   */\r\n  function cssSlideHeight(): string | null {\r\n    return unit( options.fixedHeight )\r\n      || ( vertical ? ( options.autoHeight ? null : cssSlideSize() ) : cssHeight() );\r\n  }\r\n\r\n  /**\r\n   * Returns the CSS string for slide width or height without gap.\r\n   *\r\n   * @return The CSS string for slide width or height.\r\n   */\r\n  function cssSlideSize(): string {\r\n    const gap = unit( options.gap );\r\n    return `calc((100%${ gap && ` + ${ gap }` })/${ options.perPage || 1 }${ gap && ` - ${ gap }` })`;\r\n  }\r\n\r\n  /**\r\n   * Returns the list width for the horizontal slider, or the height for the vertical slider.\r\n   *\r\n   * @return The size of the list element in pixel.\r\n   */\r\n  function listSize(): number {\r\n    return rect( list )[ resolve( 'width' ) ];\r\n  }\r\n\r\n  /**\r\n   * Returns the slide width for the horizontal slider, or the height for the vertical slider.\r\n   *\r\n   * @param index      - Optional. A slide index.\r\n   * @param withoutGap - Optional. Determines whether to exclude the gap amount or not.\r\n   *\r\n   * @return The size of the specified slide element in pixel.\r\n   */\r\n  function slideSize( index = 0, withoutGap?: boolean ): number {\r\n    const Slide = getAt( index );\r\n    return ( Slide ? Slide.size : 0 ) + ( withoutGap ? 0 : getGap() );\r\n  }\r\n\r\n  /**\r\n   * Returns the total width or height of slides from the head of the slider to the specified index.\r\n   * This includes sizes of clones before the first slide.\r\n   *\r\n   * @param index      - A slide index. If omitted, uses the last index.\r\n   * @param withoutGap - Optional. Determines whether to exclude the last gap or not.\r\n   *\r\n   * @return The total width of slides in the horizontal slider, or the height in the vertical one.\r\n   */\r\n  function totalSize( index: number, withoutGap?: boolean ): number {\r\n    const Slide = getAt( index );\r\n    return Slide ? Slide.pos + Slide.size + ( withoutGap ? 0 : getGap() ) : 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the slider size without clones before the first slide.\r\n   * Do not use the clone's size because it's unstable while initializing and refreshing process.\r\n   *\r\n   * @param withoutGap - Optional. Determines whether to exclude the last gap or not.\r\n   *\r\n   * @return The width or height of the slider without clones.\r\n   */\r\n  function sliderSize( withoutGap?: boolean ): number {\r\n    return totalSize( Splide.length - 1 ) - totalSize( 0 ) + slideSize( 0, withoutGap );\r\n  }\r\n\r\n  /**\r\n   * Compute the gap by the first and second slides.\r\n   * This always returns 0 if the number of slides is less than 2.\r\n   *\r\n   * @return The gap value in pixel.\r\n   */\r\n  function getGap(): number {\r\n    const first  = getAt( 0 );\r\n    const second = getAt( 1 );\r\n    return first && second ? second.pos - first.pos - first.size : 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the padding value.\r\n   * This method resolves the difference of the direction.\r\n   *\r\n   * @todo\r\n   *\r\n   * @param right - Determines whether to get `paddingRight/Bottom` or `paddingLeft/Top`.\r\n   *\r\n   * @return The padding value in pixel.\r\n   */\r\n  function getPadding( right: boolean ): number {\r\n    return parseFloat( style(\r\n      track,\r\n      resolve( `padding${ right ? 'Right' : 'Left' }` )\r\n    ) ) || 0;\r\n  }\r\n\r\n  /**\r\n   * Checks if the carousel is wider than the list.\r\n   * This method always returns `true` for a fade carousel.\r\n   *\r\n   * @return `true` if the carousel is wider than the list, or otherwise `false`.\r\n   */\r\n  function isOverflow(): boolean {\r\n    return Splide.is( FADE ) || sliderSize( true ) > listSize();\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    resize,\r\n    listSize,\r\n    slideSize,\r\n    sliderSize,\r\n    totalSize,\r\n    getPadding,\r\n    isOverflow,\r\n  };\r\n}\r\n","import { EVENT_REFRESH, EVENT_RESIZE, EVENT_UPDATED } from '../../constants/events';\r\nimport { LOOP } from '../../constants/types';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport {\r\n  addClass,\r\n  append,\r\n  before,\r\n  ceil,\r\n  empty,\r\n  EventInterface,\r\n  isUndefined,\r\n  pad,\r\n  push,\r\n  rect,\r\n  removeNode,\r\n} from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The interface for the Clone component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ClonesComponent extends BaseComponent {\r\n}\r\n\r\n/**\r\n * The multiplier to determine the number of clones.\r\n *\r\n * @since 4.0.0\r\n */\r\nexport const MULTIPLIER = 2;\r\n\r\n/**\r\n * The component that generates clones for the loop slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Clones component object.\r\n */\r\nexport function Clones(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): ClonesComponent {\r\n  const { on } = event;\r\n  const { Elements, Slides } = Components;\r\n  const { resolve } = Components.Direction;\r\n\r\n  /**\r\n   * Stores all cloned elements.\r\n   */\r\n  const clones: HTMLElement[] = [];\r\n\r\n  /**\r\n   * Keeps the current number of clones.\r\n   */\r\n  let cloneCount: number;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   * Needs to remount the component on refresh, otherwise `refresh` event will be triggered again while refreshing.\r\n   */\r\n  function mount(): void {\r\n    on( EVENT_REFRESH, remount );\r\n    on( [ EVENT_UPDATED, EVENT_RESIZE ], observe );\r\n\r\n    if ( ( cloneCount = computeCloneCount() ) ) {\r\n      generate( cloneCount );\r\n      Components.Layout.resize( true );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remounts the component.\r\n   */\r\n  function remount(): void {\r\n    destroy();\r\n    mount();\r\n  }\r\n\r\n  /**\r\n   * Destroys clones.\r\n   */\r\n  function destroy(): void {\r\n    removeNode( clones );\r\n    empty( clones );\r\n    event.destroy();\r\n  }\r\n\r\n  /**\r\n   * Observes the required clone count and refreshes the slider if necessary.\r\n   */\r\n  function observe(): void {\r\n    const count = computeCloneCount();\r\n\r\n    if ( cloneCount !== count ) {\r\n      if ( cloneCount < count || ! count ) {\r\n        event.emit( EVENT_REFRESH );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates the specified number of clones.\r\n   *\r\n   * @param count - The number of clones to generate for each side.\r\n   */\r\n  function generate( count: number ): void {\r\n    const slides = Slides.get().slice();\r\n    const { length } = slides;\r\n\r\n    if ( length ) {\r\n      while ( slides.length < count ) {\r\n        push( slides, slides );\r\n      }\r\n\r\n      push( slides.slice( -count ), slides.slice( 0, count ) ).forEach( ( Slide, index ) => {\r\n        const isHead = index < count;\r\n        const clone  = cloneDeep( Slide.slide, index );\r\n        isHead ? before( clone, slides[ 0 ].slide ) : append( Elements.list, clone );\r\n        push( clones, clone );\r\n        Slides.register( clone, index - count + ( isHead ? 0 : length ), Slide.index );\r\n      } );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deeply clones the provided element with removing the ID attribute.\r\n   *\r\n   * @param elm   - An element to clone.\r\n   * @param index - An index of the clone.\r\n   *\r\n   * @return A cloned element.\r\n   */\r\n  function cloneDeep( elm: HTMLElement, index: number ): HTMLElement {\r\n    const clone = elm.cloneNode( true ) as HTMLElement;\r\n    addClass( clone, options.classes.clone );\r\n    clone.id = `${ Splide.root.id }-clone${ pad( index + 1 ) }`;\r\n    return clone;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of elements to generate.\r\n   * This always returns 0 if the slider type is not `'loop'`.\r\n   *\r\n   * @return The number of clones.\r\n   */\r\n  function computeCloneCount(): number {\r\n    let { clones } = options;\r\n\r\n    if ( ! Splide.is( LOOP ) ) {\r\n      clones = 0;\r\n    } else if ( isUndefined( clones ) ) {\r\n      const fixedSize  = options[ resolve( 'fixedWidth' ) ] && Components.Layout.slideSize( 0 );\r\n      const fixedCount = fixedSize && ceil( rect( Elements.track )[ resolve( 'width' ) ] / fixedSize );\r\n      clones = fixedCount || ( options[ resolve( 'autoWidth' ) ] && Splide.length ) || options.perPage * MULTIPLIER;\r\n    }\r\n\r\n    return clones;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy,\r\n  };\r\n}\r\n","import {\r\n  EVENT_MOUNTED,\r\n  EVENT_MOVE,\r\n  EVENT_MOVED,\r\n  EVENT_REFRESH,\r\n  EVENT_RESIZED,\r\n  EVENT_SHIFTED,\r\n  EVENT_UPDATED,\r\n} from '../../constants/events';\r\nimport { IDLE, MOVING } from '../../constants/states';\r\nimport { FADE, LOOP, SLIDE } from '../../constants/types';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { AnyFunction, BaseComponent, Components, Options, TransitionComponent } from '../../types';\r\nimport { abs, ceil, clamp, EventInterface, isUndefined, rect, style } from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The interface for the Move component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface MoveComponent extends BaseComponent {\r\n  move( dest: number, index: number, prev: number, callback?: AnyFunction ): void;\r\n  jump( index: number ): void;\r\n  translate( position: number, preventLoop?: boolean ): void;\r\n  shift( position: number, backwards: boolean ): number;\r\n  cancel(): void;\r\n  toIndex( position: number ): number;\r\n  toPosition( index: number, trimming?: boolean ): number;\r\n  getPosition(): number;\r\n  getLimit( max: boolean ): number;\r\n  exceededLimit( max?: boolean | undefined, position?: number ): boolean;\r\n\r\n  /** @internal */\r\n  reposition(): void;\r\n}\r\n\r\n/**\r\n * The component for moving the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Move component object.\r\n */\r\nexport function Move(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): MoveComponent {\r\n  const { on, emit } = event;\r\n  const { set } = Splide.state;\r\n  const { Slides } = Components;\r\n  const { slideSize, getPadding, listSize, sliderSize } = Components.Layout;\r\n  const { resolve, orient } = Components.Direction;\r\n  const { list, track } = Components.Elements;\r\n\r\n  /**\r\n   * Holds the Transition component.\r\n   */\r\n  let Transition: TransitionComponent;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    Transition = Components.Transition;\r\n    on( [ EVENT_MOUNTED, EVENT_RESIZED, EVENT_UPDATED, EVENT_REFRESH ], reposition );\r\n  }\r\n\r\n  /**\r\n   * Repositions the slider.\r\n   * - Do not call `cancel()` here because LazyLoad may emit resize while transitioning.\r\n   * - iOS Safari emits window resize event while the user swipes the slider because of the bottom bar.\r\n   */\r\n  function reposition(): void {\r\n    if ( ! Components.Controller.isBusy() ) {\r\n      Components.Scroll.cancel();\r\n      jump( Splide.index );\r\n      Components.Slides.update();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Moves the slider to the dest index with the Transition component.\r\n   *\r\n   * @param dest     - A destination index to go to, including clones'.\r\n   * @param index    - A slide index.\r\n   * @param prev     - A previous index.\r\n   * @param callback - Optional. A callback function invoked after transition ends.\r\n   */\r\n  function move( dest: number, index: number, prev: number, callback?: AnyFunction ): void {\r\n    if ( dest !== index && canShift( dest > prev ) ) {\r\n      cancel();\r\n      translate( shift( getPosition(), dest > prev ), true );\r\n    }\r\n\r\n    set( MOVING );\r\n    emit( EVENT_MOVE, index, prev, dest );\r\n\r\n    Transition.start( index, () => {\r\n      set( IDLE );\r\n      emit( EVENT_MOVED, index, prev, dest );\r\n      callback && callback();\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Jumps to the slide at the specified index.\r\n   *\r\n   * @param index - An index to jump to.\r\n   */\r\n  function jump( index: number ): void {\r\n    translate( toPosition( index, true ) );\r\n  }\r\n\r\n  /**\r\n   * Moves the slider to the provided position.\r\n   *\r\n   * @param position    - The position to move to.\r\n   * @param preventLoop - Optional. If `true`, sets the provided position as is.\r\n   */\r\n  function translate( position: number, preventLoop?: boolean ): void {\r\n    if ( ! Splide.is( FADE ) ) {\r\n      const destination = preventLoop ? position : loop( position );\r\n      style( list, 'transform', `translate${ resolve( 'X' ) }(${ destination }px)` );\r\n      position !== destination && emit( EVENT_SHIFTED );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Loops the provided position if it exceeds bounds (limit indices).\r\n   *\r\n   * @param position - A position to loop.\r\n   */\r\n  function loop( position: number ): number {\r\n    if ( Splide.is( LOOP ) ) {\r\n      const index       = toIndex( position );\r\n      const exceededMax = index > Components.Controller.getEnd();\r\n      const exceededMin = index < 0;\r\n\r\n      if ( exceededMin || exceededMax ) {\r\n        position = shift( position, exceededMax );\r\n      }\r\n    }\r\n\r\n    return position;\r\n  }\r\n\r\n  /**\r\n   * Adds or subtracts the slider width to the provided position.\r\n   *\r\n   * @param position  - A position to shift.\r\n   * @param backwards - Determines whether to shift the slider backwards or forwards.\r\n   *\r\n   * @return The shifted position.\r\n   */\r\n  function shift( position: number, backwards: boolean ): number {\r\n    const excess = position - getLimit( backwards );\r\n    const size   = sliderSize();\r\n    position -= orient( size * ( ceil( abs( excess ) / size ) || 1 ) ) * ( backwards ? 1 : -1 );\r\n    return position;\r\n  }\r\n\r\n  /**\r\n   * Cancels transition.\r\n   */\r\n  function cancel(): void {\r\n    translate( getPosition(), true );\r\n    Transition.cancel();\r\n  }\r\n\r\n  /**\r\n   * Returns the closest index to the position.\r\n   *\r\n   * @todo\r\n   *\r\n   * @param position - A position to convert.\r\n   *\r\n   * @return The closest index to the position.\r\n   */\r\n  function toIndex( position: number ): number {\r\n    const slides = Slides.get();\r\n\r\n    let index       = 0;\r\n    let minDistance = Infinity;\r\n\r\n    for ( let i = 0; i < slides.length; i++ ) {\r\n      const slideIndex = slides[ i ].index;\r\n      const distance   = abs( toPosition( slideIndex, true ) - position );\r\n\r\n      if ( distance <= minDistance ) {\r\n        minDistance = distance;\r\n        index       = slideIndex;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * Converts the slide index to the position.\r\n   *\r\n   * @param index    - An index to convert.\r\n   * @param trimming - Optional. Whether to trim edge spaces or not.\r\n   *\r\n   * @return The position corresponding with the index.\r\n   */\r\n  function toPosition( index: number, trimming?: boolean ): number {\r\n    const Slide    = Slides.getAt( index );\r\n    const position = Slide ? orient( Slide.pos - offset( index ) ) : 0;\r\n    return trimming ? trim( position ) : position;\r\n  }\r\n\r\n  /**\r\n   * Returns the current position.\r\n   *\r\n   * @return The position of the list element.\r\n   */\r\n  function getPosition(): number {\r\n    const left = resolve( 'left' );\r\n    return rect( list )[ left ] - rect( track )[ left ] + orient( getPadding( false ) );\r\n  }\r\n\r\n  /**\r\n   * Trims spaces on the edge of the slider.\r\n   *\r\n   * @param position - A position to trim.\r\n   *\r\n   * @return A trimmed position.\r\n   */\r\n  function trim( position: number ): number {\r\n    if ( options.trimSpace && Splide.is( SLIDE ) ) {\r\n      position = clamp( position, 0, orient( sliderSize( true ) - listSize() ) );\r\n    }\r\n\r\n    return position;\r\n  }\r\n\r\n  /**\r\n   * Returns the offset amount.\r\n   *\r\n   * @param index - An index.\r\n   */\r\n  function offset( index: number ): number {\r\n    const { focus } = options;\r\n    return focus === 'center' ? ( listSize() - slideSize( index, true ) ) / 2 : +focus * slideSize( index ) || 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the limit number that the slider can move to.\r\n   *\r\n   * @param max - Determines whether to return the maximum or minimum limit.\r\n   *\r\n   * @return The border number.\r\n   */\r\n  function getLimit( max: boolean ): number {\r\n    return toPosition( max ? Components.Controller.getEnd() : 0, !! options.trimSpace );\r\n  }\r\n\r\n  /**\r\n   * Checks if there is enough width to shift the slider.\r\n   *\r\n   * @param backwards - `true` for checking backwards, or `false` for doing forwards.\r\n   *\r\n   * @return `true` if the slider can be shifted for the specified direction, or otherwise `false`.\r\n   */\r\n  function canShift( backwards: boolean ): boolean {\r\n    const padding = getPadding( false );\r\n    const shifted = orient( shift( getPosition(), backwards ) );\r\n\r\n    return backwards\r\n      ? shifted >= padding\r\n      : shifted <= list[ resolve( 'scrollWidth' ) ] - rect( track )[ resolve( 'width' ) ] + padding;\r\n  }\r\n\r\n  /**\r\n   * Checks if the provided position exceeds the minimum or maximum limit or not.\r\n   *\r\n   * @param max      - Optional. `true` for testing max, `false` for min, and `undefined` for both.\r\n   * @param position - Optional. A position to test. If omitted, tests the current position.\r\n   *\r\n   * @return `true` if the position exceeds the limit, or otherwise `false`.\r\n   */\r\n  function exceededLimit( max?: boolean | undefined, position?: number ): boolean {\r\n    position = isUndefined( position ) ? getPosition() : position;\r\n    const exceededMin = max !== true && orient( position ) < orient( getLimit( false ) );\r\n    const exceededMax = max !== false && orient( position ) > orient( getLimit( true ) );\r\n    return exceededMin || exceededMax;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    move,\r\n    jump,\r\n    translate,\r\n    shift,\r\n    cancel,\r\n    toIndex,\r\n    toPosition,\r\n    getPosition,\r\n    getLimit,\r\n    exceededLimit,\r\n    reposition,\r\n  };\r\n}\r\n","import { EVENT_END_INDEX_CHANGED, EVENT_REFRESH, EVENT_RESIZED, EVENT_UPDATED } from '../../constants/events';\r\nimport { MOVING, SCROLLING } from '../../constants/states';\r\nimport { LOOP, SLIDE } from '../../constants/types';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { AnyFunction, BaseComponent, Components, Options } from '../../types';\r\nimport {\r\n  apply,\r\n  approximatelyEqual,\r\n  between,\r\n  clamp,\r\n  EventInterface,\r\n  floor,\r\n  isString,\r\n  isUndefined,\r\n  min,\r\n} from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The interface for the Controller component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ControllerComponent extends BaseComponent {\r\n  go( control: number | string, allowSameIndex?: boolean, callback?: AnyFunction ): void;\r\n  scroll( destination: number, duration?: number, snap?: boolean, callback?: AnyFunction ): void;\r\n  getNext( destination?: boolean ): number;\r\n  getPrev( destination?: boolean ): number;\r\n  getEnd(): number;\r\n  setIndex( index: number ): void;\r\n  getIndex( prev?: boolean ): number;\r\n  toIndex( page: number ): number;\r\n  toPage( index: number ): number;\r\n  toDest( position: number ): number;\r\n  hasFocus(): boolean;\r\n  isBusy(): boolean;\r\n\r\n  /** @internal */\r\n  getAdjacent( prev: boolean, destination?: boolean ): number;\r\n}\r\n\r\n/**\r\n * The component for controlling the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Controller component object.\r\n */\r\nexport function Controller(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): ControllerComponent {\r\n  const { on, emit } = event;\r\n  const { Move } = Components;\r\n  const { getPosition, getLimit, toPosition } = Move;\r\n  const { isEnough, getLength } = Components.Slides;\r\n  const { omitEnd } = options;\r\n  const isLoop  = Splide.is( LOOP );\r\n  const isSlide = Splide.is( SLIDE );\r\n  const getNext = apply( getAdjacent, false );\r\n  const getPrev = apply( getAdjacent, true );\r\n\r\n  /**\r\n   * The current index.\r\n   */\r\n  let currIndex = options.start || 0;\r\n\r\n  /**\r\n   * The latest end index.\r\n   */\r\n  let endIndex: number;\r\n\r\n  /**\r\n   * The previous index.\r\n   */\r\n  let prevIndex = currIndex;\r\n\r\n  /**\r\n   * The latest number of slides.\r\n   */\r\n  let slideCount: number;\r\n\r\n  /**\r\n   * The latest `perMove` value.\r\n   */\r\n  let perMove: number;\r\n\r\n  /**\r\n   * The latest `perMove` value.\r\n   */\r\n  let perPage: number;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on( [ EVENT_UPDATED, EVENT_REFRESH, EVENT_END_INDEX_CHANGED ], init );\r\n    on( EVENT_RESIZED, onResized );\r\n  }\r\n\r\n  /**\r\n   * Initializes some parameters.\r\n   * Needs to check the number of slides since the current index may be out of the range after refresh.\r\n   * The process order must be Elements -> Controller -> Move.\r\n   */\r\n  function init(): void {\r\n    slideCount = getLength( true );\r\n    perMove    = options.perMove;\r\n    perPage    = options.perPage;\r\n    endIndex   = getEnd();\r\n\r\n    const end   = omitEnd ? endIndex : slideCount - 1;\r\n    const index = clamp( currIndex, 0, end );\r\n\r\n    prevIndex = clamp( currIndex, 0, end );\r\n\r\n    if ( index !== currIndex ) {\r\n      currIndex = index;\r\n      Move.reposition();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the viewport width is changed.\r\n   * The end index can change if `autoWidth` or `fixedWidth` is enabled.\r\n   */\r\n  function onResized(): void {\r\n    if ( endIndex !== getEnd() ) {\r\n      emit( EVENT_END_INDEX_CHANGED );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Moves the slider by the control pattern.\r\n   *\r\n   * @see `Splide#go()`\r\n   *\r\n   * @param control        - A control pattern.\r\n   * @param allowSameIndex - Optional. Determines whether to allow going to the current index or not.\r\n   * @param callback       - Optional. A callback function invoked after transition ends.\r\n   */\r\n  function go( control: number | string, allowSameIndex?: boolean, callback?: AnyFunction ): void {\r\n    if ( ! isBusy() ) {\r\n      const dest  = parse( control );\r\n      const index = loop( dest );\r\n\r\n      if ( index > -1 && ( allowSameIndex || index !== currIndex ) ) {\r\n        setIndex( index );\r\n        Move.move( dest, index, prevIndex, callback );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Scrolls the slider to the specified destination with updating indices.\r\n   *\r\n   * @param destination - The position to scroll the slider to.\r\n   * @param duration    - Optional. Specifies the scroll duration.\r\n   * @param snap        - Optional. Whether to snap the slider to the closest slide or not.\r\n   * @param callback    - Optional. A callback function invoked after scroll ends.\r\n   */\r\n  function scroll( destination: number, duration?: number, snap?: boolean, callback?: AnyFunction ): void {\r\n    Components.Scroll.scroll( destination, duration, snap, () => {\r\n      const index = loop( Move.toIndex( getPosition() ) );\r\n      setIndex( omitEnd ? min( index, endIndex ) : index );\r\n      callback && callback();\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Parses the control and returns a slide index.\r\n   *\r\n   * @param control - A control pattern to parse.\r\n   *\r\n   * @return A `dest` index.\r\n   */\r\n  function parse( control: number | string ): number {\r\n    let index = currIndex;\r\n\r\n    if ( isString( control ) ) {\r\n      const [ , indicator, number ] = control.match( /([+\\-<>])(\\d+)?/ ) || [];\r\n\r\n      if ( indicator === '+' || indicator === '-' ) {\r\n        index = computeDestIndex( currIndex + +`${ indicator }${ +number || 1 }`, currIndex );\r\n      } else if ( indicator === '>' ) {\r\n        index = number ? toIndex( +number ) : getNext( true );\r\n      } else if ( indicator === '<' ) {\r\n        index = getPrev( true );\r\n      }\r\n    } else {\r\n      index = isLoop ? control : clamp( control, 0, endIndex );\r\n    }\r\n\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * Returns an adjacent destination index.\r\n   *\r\n   * @internal\r\n   *\r\n   * @param prev        - Determines whether to return a previous or next index.\r\n   * @param destination - Optional. Determines whether to get a destination index or a slide one.\r\n   *\r\n   * @return An adjacent index if available, or otherwise `-1`.\r\n   */\r\n  function getAdjacent( prev: boolean, destination?: boolean ): number {\r\n    const number = perMove || ( hasFocus() ? 1 : perPage );\r\n    const dest   = computeDestIndex( currIndex + number * ( prev ? -1 : 1 ), currIndex, ! ( perMove || hasFocus() ) );\r\n\r\n    if ( dest === -1 && isSlide ) {\r\n      if ( ! approximatelyEqual( getPosition(), getLimit( ! prev ), 1 ) ) {\r\n        return prev ? 0 : endIndex;\r\n      }\r\n    }\r\n\r\n    return destination ? dest : loop( dest );\r\n  }\r\n\r\n  /**\r\n   * Converts the desired destination index to the valid one.\r\n   * - If the `move` option is `true`, finds the dest index whose position is different with the current one.\r\n   * - This may return clone indices if the editor is the loop mode,\r\n   *   or `-1` if there is no slide to go.\r\n   * - There are still slides where the carousel can go if borders are between `from` and `dest`.\r\n   * - If `focus` is available, needs to calculate the dest index even if there are enough number of slides.\r\n   *\r\n   * @param dest     - The desired destination index.\r\n   * @param from     - A base index.\r\n   * @param snapPage - Optional. Whether to snap a page or not.\r\n   *\r\n   * @return A converted destination index, including clones.\r\n   */\r\n  function computeDestIndex( dest: number, from: number, snapPage?: boolean ): number {\r\n    if ( isEnough() || hasFocus() ) {\r\n      const index = computeMovableDestIndex( dest );\r\n\r\n      if ( index !== dest ) {\r\n        from     = dest;\r\n        dest     = index;\r\n        snapPage = false;\r\n      }\r\n\r\n      if ( dest < 0 || dest > endIndex ) {\r\n        if ( ! perMove && ( between( 0, dest, from, true ) || between( endIndex, from, dest, true ) ) ) {\r\n          dest = toIndex( toPage( dest ) );\r\n        } else {\r\n          if ( isLoop ) {\r\n            dest = snapPage\r\n              ? dest < 0 ? - ( slideCount % perPage || perPage ) : slideCount\r\n              : dest;\r\n          } else if ( options.rewind ) {\r\n            dest = dest < 0 ? endIndex : 0;\r\n          } else {\r\n            dest = -1;\r\n          }\r\n        }\r\n      } else {\r\n        if ( snapPage && dest !== from ) {\r\n          dest = toIndex( toPage( from ) + ( dest < from ? -1 : 1 ) );\r\n        }\r\n      }\r\n    } else {\r\n      dest = -1;\r\n    }\r\n\r\n    return dest;\r\n  }\r\n\r\n  /**\r\n   * Finds the dest index whose position is different with the current one for `trimSpace: 'move'`.\r\n   * This can be negative or greater than `length - 1`.\r\n   *\r\n   * @param dest - A dest index.\r\n   *\r\n   * @return A dest index.\r\n   */\r\n  function computeMovableDestIndex( dest: number ): number {\r\n    if ( isSlide && options.trimSpace === 'move' && dest !== currIndex ) {\r\n      const position = getPosition();\r\n\r\n      while ( position === toPosition( dest, true ) && between( dest, 0, Splide.length - 1, ! options.rewind ) ) {\r\n        dest < currIndex ? --dest : ++dest;\r\n      }\r\n    }\r\n\r\n    return dest;\r\n  }\r\n\r\n  /**\r\n   * Loops the provided index only in the loop mode.\r\n   *\r\n   * @param index - An index to loop.\r\n   *\r\n   * @return A looped index.\r\n   */\r\n  function loop( index: number ): number {\r\n    return isLoop ? ( index + slideCount ) % slideCount || 0 : index;\r\n  }\r\n\r\n  /**\r\n   * Returns the end index where the slider can go.\r\n   * For example, if the slider has 10 slides and the `perPage` option is 3,\r\n   * the slider can go to the slide 8 (the index is 7).\r\n   * If the `omitEnd` option is available, computes the index from the slide position.\r\n   *\r\n   * @return An end index.\r\n   */\r\n  function getEnd(): number {\r\n    let end = slideCount - ( hasFocus() || ( isLoop && perMove ) ? 1 : perPage );\r\n\r\n    while ( omitEnd && end-- > 0 ) {\r\n      if ( toPosition( slideCount - 1, true ) !== toPosition( end, true ) ) {\r\n        end++;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return clamp( end, 0, slideCount - 1 );\r\n  }\r\n\r\n  /**\r\n   * Converts the page index to the slide index.\r\n   *\r\n   * @param page - A page index to convert.\r\n   *\r\n   * @return A slide index.\r\n   */\r\n  function toIndex( page: number ): number {\r\n    return clamp( hasFocus() ? page : perPage * page, 0, endIndex );\r\n  }\r\n\r\n  /**\r\n   * Converts the slide index to the page index.\r\n   *\r\n   * @param index - An index to convert.\r\n   *\r\n   * @return A page index.\r\n   */\r\n  function toPage( index: number ): number {\r\n    return hasFocus()\r\n      ? min( index, endIndex )\r\n      : floor( ( index >= endIndex ? slideCount - 1 : index ) / perPage );\r\n  }\r\n\r\n  /**\r\n   * Converts the destination position to the dest index.\r\n   *\r\n   * @param destination - A position to convert.\r\n   *\r\n   * @return A dest index.\r\n   */\r\n  function toDest( destination: number ): number {\r\n    const closest = Move.toIndex( destination );\r\n    return isSlide ? clamp( closest, 0, endIndex ) : closest;\r\n  }\r\n\r\n  /**\r\n   * Sets a new index and retains old one.\r\n   *\r\n   * @param index - A new index to set.\r\n   */\r\n  function setIndex( index: number ): void {\r\n    if ( index !== currIndex ) {\r\n      prevIndex = currIndex;\r\n      currIndex = index;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the current/previous index.\r\n   *\r\n   * @param prev - Optional. Whether to return previous index or not.\r\n   */\r\n  function getIndex( prev?: boolean ): number {\r\n    return prev ? prevIndex : currIndex;\r\n  }\r\n\r\n  /**\r\n   * Verifies if the focus option is available or not.\r\n   *\r\n   * @return `true` if the slider has the focus option.\r\n   */\r\n  function hasFocus(): boolean {\r\n    return ! isUndefined( options.focus ) || options.isNavigation;\r\n  }\r\n\r\n  /**\r\n   * Checks if the slider is moving/scrolling or not.\r\n   *\r\n   * @return `true` if the slider can move, or otherwise `false`.\r\n   */\r\n  function isBusy(): boolean {\r\n    return Splide.state.is( [ MOVING, SCROLLING ] ) && !! options.waitForTransition;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    go,\r\n    scroll,\r\n    getNext,\r\n    getPrev,\r\n    getAdjacent,\r\n    getEnd,\r\n    setIndex,\r\n    getIndex,\r\n    toIndex,\r\n    toPage,\r\n    toDest,\r\n    hasFocus,\r\n    isBusy,\r\n  };\r\n}\r\n","import { ALL_ATTRIBUTES, ARIA_CONTROLS, ARIA_LABEL } from '../../constants/attributes';\r\nimport { CLASS_ARROWS } from '../../constants/classes';\r\nimport {\r\n  EVENT_ARROWS_MOUNTED,\r\n  EVENT_ARROWS_UPDATED,\r\n  EVENT_END_INDEX_CHANGED,\r\n  EVENT_MOUNTED,\r\n  EVENT_MOVED,\r\n  EVENT_REFRESH,\r\n  EVENT_SCROLLED,\r\n  EVENT_UPDATED,\r\n} from '../../constants/events';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport {\r\n  addClass,\r\n  append,\r\n  apply,\r\n  assign,\r\n  before,\r\n  create,\r\n  display,\r\n  EventInterface,\r\n  parseHtml,\r\n  removeNode,\r\n  removeAttribute,\r\n  removeClass,\r\n  setAttribute,\r\n} from '@splidejs/utils';\r\nimport { PATH, SIZE, XML_NAME_SPACE } from './path';\r\n\r\n\r\n/**\r\n * The interface for the Arrows component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ArrowsComponent extends BaseComponent {\r\n  arrows: { prev?: HTMLButtonElement, next?: HTMLButtonElement };\r\n\r\n  /** @internal */\r\n  update(): void;\r\n}\r\n\r\n/**\r\n * The component for handling previous and next arrows.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return An Arrows component object.\r\n */\r\nexport function Arrows(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): ArrowsComponent {\r\n  const { on, bind, emit } = event;\r\n  const { classes, i18n } = options;\r\n  const { Elements, Controller } = Components;\r\n  const { arrows: placeholder, track } = Elements;\r\n\r\n  /**\r\n   * The wrapper element.\r\n   */\r\n  let wrapper = placeholder;\r\n\r\n  /**\r\n   * The previous arrow element.\r\n   */\r\n  let prev = Elements.prev;\r\n\r\n  /**\r\n   * The next arrow element.\r\n   */\r\n  let next = Elements.next;\r\n\r\n  /**\r\n   * Indicates whether the component creates arrows or retrieved from the DOM.\r\n   */\r\n  let created: boolean;\r\n\r\n  /**\r\n   * Holds modifier classes.\r\n   */\r\n  let wrapperClasses: string;\r\n\r\n  /**\r\n   * An object with previous and next arrows.\r\n   */\r\n  const arrows: ArrowsComponent[ 'arrows' ] = {};\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on( EVENT_UPDATED, remount );\r\n  }\r\n\r\n  /**\r\n   * Remounts the component.\r\n   */\r\n  function remount(): void {\r\n    destroy();\r\n    mount();\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   */\r\n  function init(): void {\r\n    const enabled = options.arrows;\r\n\r\n    if ( enabled && ! ( prev && next ) ) {\r\n      createArrows();\r\n    }\r\n\r\n    if ( prev && next ) {\r\n      assign( arrows, { prev, next } );\r\n      display( wrapper, enabled ? '' : 'none' );\r\n      addClass( wrapper, ( wrapperClasses = `${ CLASS_ARROWS }--${ options.direction }` ) );\r\n\r\n      if ( enabled ) {\r\n        listen();\r\n        update();\r\n        setAttribute( [ prev, next ], ARIA_CONTROLS, track.id );\r\n        emit( EVENT_ARROWS_MOUNTED, prev, next );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    event.destroy();\r\n    removeClass( wrapper, wrapperClasses );\r\n\r\n    if ( created ) {\r\n      removeNode( placeholder ? [ prev, next ] : wrapper );\r\n      prev = next = null;\r\n    } else {\r\n      removeAttribute( [ prev, next ], ALL_ATTRIBUTES );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Listens to some events.\r\n   */\r\n  function listen(): void {\r\n    on( [ EVENT_MOUNTED, EVENT_MOVED, EVENT_REFRESH, EVENT_SCROLLED, EVENT_END_INDEX_CHANGED ], update );\r\n    bind( next, 'click', apply( go, '>' ) );\r\n    bind( prev, 'click', apply( go, '<' ) );\r\n  }\r\n\r\n  /**\r\n   * The wrapper function of Controller#go().\r\n   *\r\n   * @param control - The control pattern.\r\n   */\r\n  function go( control: string ): void {\r\n    Controller.go( control, true );\r\n  }\r\n\r\n  /**\r\n   * Create arrows and append them to the slider.\r\n   */\r\n  function createArrows(): void {\r\n    wrapper = placeholder || create( 'div', classes.arrows );\r\n    prev    = createArrow( true );\r\n    next    = createArrow( false );\r\n    created = true;\r\n\r\n    append( wrapper, [ prev, next ] );\r\n    ! placeholder && before( wrapper, track );\r\n  }\r\n\r\n  /**\r\n   * Creates an arrow button.\r\n   * In IE, A SVG element is focusable.\r\n   *\r\n   * @param prev - Determines whether to create a previous or next arrow.\r\n   *\r\n   * @return A created button element.\r\n   */\r\n  function createArrow( prev: boolean ): HTMLButtonElement {\r\n    const arrow = `<button class=\"${ classes.arrow } ${ prev ? classes.prev : classes.next }\" type=\"button\">`\r\n      +\t`<svg xmlns=\"${ XML_NAME_SPACE }\" viewBox=\"0 0 ${ SIZE } ${ SIZE }\" width=\"${ SIZE }\" height=\"${ SIZE }\">`\r\n      + `<path d=\"${ options.arrowPath || PATH }\" />`;\r\n\r\n    return parseHtml<HTMLButtonElement>( arrow );\r\n  }\r\n\r\n  /**\r\n   * Updates status of arrows, such as `disabled` and `aria-label`.\r\n   */\r\n  function update(): void {\r\n    if ( prev && next ) {\r\n      const index     = Splide.index;\r\n      const prevIndex = Controller.getPrev();\r\n      const nextIndex = Controller.getNext();\r\n      const prevLabel = prevIndex > -1 && index < prevIndex ? i18n.last : i18n.prev;\r\n      const nextLabel = nextIndex > -1 && index > nextIndex ? i18n.first : i18n.next;\r\n\r\n      prev.disabled = prevIndex < 0;\r\n      next.disabled = nextIndex < 0;\r\n\r\n      setAttribute( prev, ARIA_LABEL, prevLabel );\r\n      setAttribute( next, ARIA_LABEL, nextLabel );\r\n\r\n      emit( EVENT_ARROWS_UPDATED, prev, next, prevIndex, nextIndex );\r\n    }\r\n  }\r\n\r\n  return {\r\n    arrows,\r\n    mount,\r\n    destroy,\r\n    update,\r\n  };\r\n}\r\n","/**\r\n * The namespace for SVG elements.\r\n */\r\nexport const XML_NAME_SPACE = 'http://www.w3.org/2000/svg';\r\n\r\n/**\r\n * The arrow path.\r\n */\r\nexport const PATH = 'm15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z';\r\n\r\n/**\r\n * SVG width and height.\r\n */\r\nexport const SIZE = 40;\r\n","import { ARIA_CONTROLS, ARIA_LABEL } from '../../constants/attributes';\r\nimport { CLASS_ACTIVE } from '../../constants/classes';\r\nimport {\r\n  EVENT_AUTOPLAY_PAUSE,\r\n  EVENT_AUTOPLAY_PLAY,\r\n  EVENT_AUTOPLAY_PLAYING,\r\n  EVENT_MOVE,\r\n  EVENT_REFRESH,\r\n  EVENT_SCROLL,\r\n} from '../../constants/events';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { EventInterface, getAttribute, RequestInterval, setAttribute, style, toggleClass } from '@splidejs/utils';\r\nimport { INTERVAL_DATA_ATTRIBUTE } from './constants';\r\n\r\n\r\n/**\r\n * The interface for the Autoplay component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface AutoplayComponent extends BaseComponent {\r\n  play(): void;\r\n  pause(): void;\r\n  isPaused(): boolean;\r\n}\r\n\r\n/**\r\n * The component for autoplay, handling a progress bar and a toggle button.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return An Autoplay component object.\r\n */\r\nexport function Autoplay(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): AutoplayComponent {\r\n  const { on, bind, emit } = event;\r\n  const interval = RequestInterval( options.interval, Splide.go.bind( Splide, '>' ), onAnimationFrame );\r\n  const { isPaused } = interval;\r\n  const { Elements, Elements: { root, toggle } } = Components;\r\n  const { autoplay } = options;\r\n\r\n  /**\r\n   * Indicates whether the slider is hovered or not.\r\n   */\r\n  let hovered: boolean;\r\n\r\n  /**\r\n   * Indicates whether one of slider elements has focus or not.\r\n   */\r\n  let focused: boolean;\r\n\r\n  /**\r\n   * Indicates whether the autoplay is stopped or not.\r\n   * If stopped, autoplay won't start automatically unless `play()` is explicitly called.\r\n   */\r\n  let stopped = autoplay === 'pause';\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    if ( autoplay ) {\r\n      listen();\r\n      toggle && setAttribute( toggle, ARIA_CONTROLS, Elements.track.id );\r\n      stopped || play();\r\n      update();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Listens to some events.\r\n   */\r\n  function listen(): void {\r\n    if ( options.pauseOnHover ) {\r\n      bind( root, 'mouseenter mouseleave', e => {\r\n        hovered = e.type === 'mouseenter';\r\n        autoToggle();\r\n      } );\r\n    }\r\n\r\n    if ( options.pauseOnFocus ) {\r\n      bind( root, 'focusin focusout', e => {\r\n        focused = e.type === 'focusin';\r\n        autoToggle();\r\n      } );\r\n    }\r\n\r\n    if ( toggle ) {\r\n      bind( toggle, 'click', () => {\r\n        stopped ? play() : pause( true );\r\n      } );\r\n    }\r\n\r\n    on( [ EVENT_MOVE, EVENT_SCROLL, EVENT_REFRESH ], interval.rewind );\r\n    on( EVENT_MOVE, onMove );\r\n  }\r\n\r\n  /**\r\n   * Starts autoplay and clears all flags.\r\n   */\r\n  function play(): void {\r\n    if ( isPaused() && Components.Slides.isEnough() ) {\r\n      interval.start( ! options.resetProgress );\r\n      focused = hovered = stopped = false;\r\n      update();\r\n      emit( EVENT_AUTOPLAY_PLAY );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pauses autoplay.\r\n   *\r\n   * @param stop - If `true`, autoplay keeps paused until `play()` is explicitly called.\r\n   */\r\n  function pause( stop = true ): void {\r\n    stopped = !! stop;\r\n    update();\r\n\r\n    if ( ! isPaused() ) {\r\n      interval.pause();\r\n      emit( EVENT_AUTOPLAY_PAUSE );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggles play/pause according to current flags.\r\n   * If autoplay is manually paused, this will do nothing.\r\n   */\r\n  function autoToggle(): void {\r\n    if ( ! stopped ) {\r\n      hovered || focused ? pause( false ) : play();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the toggle button status.\r\n   */\r\n  function update(): void {\r\n    if ( toggle ) {\r\n      toggleClass( toggle, CLASS_ACTIVE, ! stopped );\r\n      setAttribute( toggle, ARIA_LABEL, options.i18n[ stopped ? 'play' : 'pause' ] );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called on every animation frame while autoplay is active.\r\n   *\r\n   * @param rate - The progress rate between 0 and 1.\r\n   */\r\n  function onAnimationFrame( rate: number ): void {\r\n    const { bar } = Elements;\r\n    bar && style( bar, 'width', `${ rate * 100 }%` );\r\n    emit( EVENT_AUTOPLAY_PLAYING, rate );\r\n  }\r\n\r\n  /**\r\n   * Updates or restores the interval duration.\r\n   *\r\n   * @param index - An index to move to.\r\n   */\r\n  function onMove( index: number ): void {\r\n    const Slide = Components.Slides.getAt( index );\r\n    interval.set( Slide && +getAttribute( Slide.slide, INTERVAL_DATA_ATTRIBUTE ) || options.interval );\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy: interval.cancel,\r\n    play,\r\n    pause,\r\n    isPaused,\r\n  };\r\n}\r\n","import { EVENT_LAZYLOAD_LOADED, EVENT_MOUNTED, EVENT_REFRESH, EVENT_UPDATED } from '../../constants/events';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { apply, child, display, EventInterface } from '@splidejs/utils';\r\nimport { SlideComponent } from '../Slides/Slide';\r\n\r\n\r\n/**\r\n * The interface for the Cover component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface CoverComponent extends BaseComponent {\r\n}\r\n\r\n/**\r\n * The component for setting the image as the slide background.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Cover component object.\r\n */\r\nexport function Cover(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): CoverComponent {\r\n  const { on } = event;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    if ( options.cover ) {\r\n      on( EVENT_LAZYLOAD_LOADED, apply( toggle, true ) );\r\n      on( [ EVENT_MOUNTED, EVENT_UPDATED, EVENT_REFRESH ], apply( cover, true ) );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets/removes the background image to/from all slides.\r\n   *\r\n   * @param cover - If `false`, removes the background image.\r\n   */\r\n  function cover( cover: boolean ): void {\r\n    Components.Slides.forEach( Slide => {\r\n      const img = child<HTMLImageElement>( Slide.container || Slide.slide, 'img' );\r\n\r\n      if ( img && img.src ) {\r\n        toggle( cover, img, Slide );\r\n      }\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Sets/removes the background image to/from the parent element.\r\n   *\r\n   * @param cover - If `false`, removes the background image.\r\n   * @param img   - A target image element.\r\n   * @param Slide - A SlideComponent object where the image belongs.\r\n   */\r\n  function toggle( cover: boolean, img: HTMLImageElement, Slide: SlideComponent ): void {\r\n    Slide.style( 'background', cover ? `center/cover no-repeat url(\"${ img.src }\")` : '', true );\r\n    display( img, cover ? 'none' : '' );\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy: apply( cover, false ),\r\n  };\r\n}\r\n","import { EVENT_MOVE, EVENT_REFRESH, EVENT_SCROLL, EVENT_SCROLLED, EVENT_UPDATED } from '../../constants/events';\r\nimport { IDLE, SCROLLING } from '../../constants/states';\r\nimport { SLIDE } from '../../constants/types';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { AnyFunction, BaseComponent, Components, Options } from '../../types';\r\nimport { abs, apply, approximatelyEqual, EventInterface, floor, max, RequestInterval, sign } from '@splidejs/utils';\r\nimport { BASE_VELOCITY, BOUNCE_DIFF_THRESHOLD, BOUNCE_DURATION, FRICTION_FACTOR, MIN_DURATION } from './constants';\r\n\r\n\r\n/**\r\n * The interface for the Scroll component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ScrollComponent extends BaseComponent {\r\n  scroll( position: number, duration?: number, snap?: boolean, callback?: AnyFunction ): void;\r\n  cancel(): void;\r\n}\r\n\r\n/**\r\n * The component for scrolling the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Scroll component object.\r\n */\r\nexport function Scroll(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): ScrollComponent {\r\n  const { on, emit } = event;\r\n  const { state: { set } } = Splide;\r\n  const { Move } = Components;\r\n  const { getPosition, getLimit, exceededLimit, translate } = Move;\r\n  const isSlide = Splide.is( SLIDE );\r\n\r\n  /**\r\n   * Retains the active RequestInterval object.\r\n   */\r\n  let interval: RequestInterval;\r\n\r\n  /**\r\n   * Holds the callback function.\r\n   */\r\n  let callback: AnyFunction;\r\n\r\n  /**\r\n   * The current friction (<= 1).\r\n   */\r\n  let friction = 1;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    on( EVENT_MOVE, clear );\r\n    on( [ EVENT_UPDATED, EVENT_REFRESH ], cancel );\r\n  }\r\n\r\n  /**\r\n   * Scrolls the slider to the provided destination.\r\n   *\r\n   * @param destination - The destination to scroll the slider to.\r\n   * @param duration    - Optional. The scroll duration. If omitted, calculates it by the distance.\r\n   * @param snap        - Optional. Whether to snap the slider to the closest slide or not.\r\n   * @param onScrolled  - Optional. A callback invoked after scroll ends.\r\n   * @param noConstrain - Optional. Whether to suppress constraint process when the slider exceeds bounds.\r\n   */\r\n  function scroll(\r\n    destination: number,\r\n    duration?: number,\r\n    snap?: boolean,\r\n    onScrolled?: AnyFunction,\r\n    noConstrain?: boolean\r\n  ): void {\r\n    const from = getPosition();\r\n\r\n    clear();\r\n\r\n    if ( snap && ( ! isSlide || ! exceededLimit() ) ) {\r\n      const size   = Components.Layout.sliderSize();\r\n      const offset = sign( destination ) * size * floor( abs( destination ) / size ) || 0;\r\n      destination = Move.toPosition( Components.Controller.toDest( destination % size ) ) + offset;\r\n    }\r\n\r\n    const noDistance = approximatelyEqual( from, destination, 1 );\r\n\r\n    friction = 1;\r\n    duration = noDistance ? 0 : duration || max( abs( destination - from ) / BASE_VELOCITY, MIN_DURATION );\r\n    callback = onScrolled;\r\n    interval = RequestInterval( duration, onEnd, apply( update, from, destination, noConstrain ), 1 );\r\n\r\n    set( SCROLLING );\r\n    emit( EVENT_SCROLL );\r\n    interval.start();\r\n  }\r\n\r\n  /**\r\n   * Called when scroll ends or has been just canceled.\r\n   */\r\n  function onEnd(): void {\r\n    set( IDLE );\r\n    callback && callback();\r\n    emit( EVENT_SCROLLED );\r\n  }\r\n\r\n  /**\r\n   * Called whenever the interval timer is updated.\r\n   *\r\n   * @param from        - A position where scroll starts.\r\n   * @param to          - A destination where the slider goes.\r\n   * @param noConstrain - Whether to suppress constraint process when the slider exceeds bounds.\r\n   * @param rate        - A current rate.\r\n   */\r\n  function update( from: number, to: number, noConstrain: boolean | undefined, rate: number ): void {\r\n    const position = getPosition();\r\n    const target   = from + ( to - from ) * easing( rate );\r\n    const diff     = ( target - position ) * friction;\r\n\r\n    translate( position + diff );\r\n\r\n    if ( isSlide && ! noConstrain && exceededLimit() ) {\r\n      friction *= FRICTION_FACTOR;\r\n\r\n      if ( abs( diff ) < BOUNCE_DIFF_THRESHOLD ) {\r\n        scroll( getLimit( exceededLimit( true ) ), BOUNCE_DURATION, false, callback, true );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clears the active interval.\r\n   */\r\n  function clear(): void {\r\n    if ( interval ) {\r\n      interval.cancel();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancels the active interval and emits the `scrolled` event.\r\n   */\r\n  function cancel(): void {\r\n    if ( interval && ! interval.isPaused() ) {\r\n      clear();\r\n      onEnd();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The easing function.\r\n   *\r\n   * @param t - A value to ease.\r\n   *\r\n   * @return An eased value.\r\n   */\r\n  function easing( t: number ): number {\r\n    const { easingFunc } = options;\r\n    return easingFunc ? easingFunc( t ) : 1 - Math.pow( 1 - t, 4 );\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy: clear,\r\n    scroll,\r\n    cancel,\r\n  };\r\n}\r\n","/**\r\n * Triggers the bounce effect when the diff becomes less than this value.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const BOUNCE_DIFF_THRESHOLD = 10;\r\n\r\n/**\r\n * The duration of the bounce effect.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const BOUNCE_DURATION = 600;\r\n\r\n/**\r\n * The friction factor.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const FRICTION_FACTOR = 0.6;\r\n\r\n/**\r\n * The velocity to calculate the scroll duration.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const BASE_VELOCITY = 1.5;\r\n\r\n/**\r\n * The minimum duration of scroll.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const MIN_DURATION = 800;\r\n","import { CLASS_ARROW, CLASS_PAGINATION_PAGE } from '../../constants/classes';\r\nimport { EVENT_DRAG, EVENT_DRAGGED, EVENT_DRAGGING, EVENT_MOUNTED, EVENT_UPDATED } from '../../constants/events';\r\nimport { SCROLL_LISTENER_OPTIONS } from '../../constants/listener-options';\r\nimport { DRAGGING, IDLE, MOVING, SCROLLING } from '../../constants/states';\r\nimport { FADE, LOOP, SLIDE } from '../../constants/types';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { abs, EventInterface, isObject, matches, min, noop, prevent, sign, timeOf } from '@splidejs/utils';\r\nimport { FRICTION, LOG_INTERVAL, POINTER_DOWN_EVENTS, POINTER_MOVE_EVENTS, POINTER_UP_EVENTS } from './constants';\r\n\r\n\r\n/**\r\n * The interface for the Drag component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface DragComponent extends BaseComponent {\r\n  disable( disabled: boolean ): void;\r\n  isDragging(): boolean;\r\n}\r\n\r\n/**\r\n * The component for dragging the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Drag component object.\r\n */\r\nexport function Drag(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): DragComponent {\r\n  const { on, emit, bind } = event;\r\n  const binder = event.create();\r\n  const { state } = Splide;\r\n  const { Move, Scroll, Controller, Elements: { track }, Media: { reduce } } = Components;\r\n  const { resolve, orient } = Components.Direction;\r\n  const { getPosition, exceededLimit } = Move;\r\n\r\n  /**\r\n   * The base slider position to calculate the delta of coords.\r\n   */\r\n  let basePosition: number;\r\n\r\n  /**\r\n   * The base event object saved per specific sampling interval.\r\n   */\r\n  let baseEvent: TouchEvent | MouseEvent;\r\n\r\n  /**\r\n   * Holds the previous base event object.\r\n   */\r\n  let prevBaseEvent: TouchEvent | MouseEvent;\r\n\r\n  /**\r\n   * Indicates whether the drag mode is `free` or not.\r\n   */\r\n  let isFree: boolean;\r\n\r\n  /**\r\n   * Indicates whether the user is dragging the slider or not.\r\n   */\r\n  let dragging: boolean;\r\n\r\n  /**\r\n   * Indicates whether the slider exceeds limits or not.\r\n   * This must not be `undefined` for strict comparison.\r\n   */\r\n  let exceeded = false;\r\n\r\n  /**\r\n   * Turns into `true` when the user starts dragging the slider.\r\n   */\r\n  let clickPrevented: boolean;\r\n\r\n  /**\r\n   * Indicates whether the drag component is now disabled or not.\r\n   */\r\n  let disabled: boolean;\r\n\r\n  /**\r\n   * The target element to attach listeners.\r\n   */\r\n  let target: Window | HTMLElement;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    bind( track, POINTER_MOVE_EVENTS, noop, SCROLL_LISTENER_OPTIONS );\r\n    bind( track, POINTER_UP_EVENTS, noop, SCROLL_LISTENER_OPTIONS );\r\n    bind( track, POINTER_DOWN_EVENTS, onPointerDown, SCROLL_LISTENER_OPTIONS );\r\n    bind( track, 'click', onClick, { capture: true } );\r\n    bind( track, 'dragstart', prevent );\r\n    on( [ EVENT_MOUNTED, EVENT_UPDATED ], init );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   */\r\n  function init(): void {\r\n    const { drag } = options;\r\n    disable( ! drag );\r\n    isFree = drag === 'free';\r\n  }\r\n\r\n  /**\r\n   * Called when the user clicks or touches the slider.\r\n   * - Needs to prevent the default behaviour when the slider is busy to deny any action, such as dragging images\r\n   * - IE does not support MouseEvent and TouchEvent constructors\r\n   * - The `dragging` state always becomes `true` when the user starts dragging while the slider is moving\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\r\n  function onPointerDown( e: TouchEvent | MouseEvent ): void {\r\n    clickPrevented = false;\r\n\r\n    if ( ! disabled ) {\r\n      const isTouch = isTouchEvent( e );\r\n\r\n      if ( isDraggable( e.target ) && ( isTouch || ! e.button ) ) {\r\n        if ( ! Controller.isBusy() ) {\r\n          target        = isTouch ? track : window;\r\n          dragging      = state.is( [ MOVING, SCROLLING ] );\r\n          prevBaseEvent = null;\r\n\r\n          binder.bind( target, POINTER_MOVE_EVENTS, onPointerMove, SCROLL_LISTENER_OPTIONS );\r\n          binder.bind( target, POINTER_UP_EVENTS, onPointerUp, SCROLL_LISTENER_OPTIONS );\r\n          Move.cancel();\r\n          Scroll.cancel();\r\n          save( e );\r\n        } else {\r\n          prevent( e, true );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called while the user moves the pointer on the slider.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\r\n  function onPointerMove( e: TouchEvent | MouseEvent ): void {\r\n    if ( ! state.is( DRAGGING ) ) {\r\n      state.set( DRAGGING );\r\n      emit( EVENT_DRAG );\r\n    }\r\n\r\n    if ( e.cancelable ) {\r\n      if ( dragging ) {\r\n        Move.translate( basePosition + constrain( diffCoord( e ) ) );\r\n\r\n        const expired     = diffTime( e ) > LOG_INTERVAL;\r\n        const hasExceeded = exceeded !== ( exceeded = exceededLimit() );\r\n\r\n        if ( expired || hasExceeded ) {\r\n          save( e );\r\n        }\r\n\r\n        clickPrevented = true;\r\n        emit( EVENT_DRAGGING );\r\n        prevent( e );\r\n      } else if ( isSliderDirection( e ) ) {\r\n        dragging = shouldStart( e );\r\n        prevent( e );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the user releases pointing devices.\r\n   * Needs to move the slider when:\r\n   * - The user drags the slider and the distance exceeds the threshold\r\n   * - The user aborted the slider moving by pointerdown and just released it without dragging the slider\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\r\n  function onPointerUp( e: TouchEvent | MouseEvent ): void {\r\n    if ( state.is( DRAGGING ) ) {\r\n      state.set( IDLE );\r\n      emit( EVENT_DRAGGED );\r\n    }\r\n\r\n    if ( dragging ) {\r\n      move( e );\r\n      prevent( e );\r\n    }\r\n\r\n    binder.destroy();\r\n    dragging = false;\r\n  }\r\n\r\n  /**\r\n   * Called when the track element is clicked.\r\n   * Disables click any elements inside it while dragging.\r\n   *\r\n   * @param e - A MouseEvent object.\r\n   */\r\n  function onClick( e: MouseEvent ): void {\r\n    if ( ! disabled && clickPrevented ) {\r\n      prevent( e, true );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Saves data at the specific moment.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   */\r\n  function save( e: TouchEvent | MouseEvent ): void {\r\n    prevBaseEvent = baseEvent;\r\n    baseEvent     = e;\r\n    basePosition  = getPosition();\r\n  }\r\n\r\n  /**\r\n   * Calculates the destination by the drag velocity and moves the carousel.\r\n   * If motion is reduced, restores transition speed to the initial value\r\n   * because it's \"essential\" motion for the user to recognize what happens on the carousel.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   */\r\n  function move( e: TouchEvent | MouseEvent ): void {\r\n    const velocity    = computeVelocity( e );\r\n    const destination = computeDestination( velocity );\r\n    const rewind      = options.rewind && options.rewindByDrag;\r\n\r\n    reduce( false );\r\n\r\n    if ( isFree ) {\r\n      Controller.scroll( destination, 0, options.snap );\r\n    } else if ( Splide.is( FADE ) ) {\r\n      Controller.go( orient( sign( velocity ) ) < 0 ? ( rewind ? '<' : '-' ) : ( rewind ? '>' : '+' ) );\r\n    } else if ( Splide.is( SLIDE ) && exceeded && rewind ) {\r\n      Controller.go( exceededLimit( true ) ? '>' : '<' );\r\n    } else {\r\n      Controller.go( Controller.toDest( destination ), true );\r\n    }\r\n\r\n    reduce( true );\r\n  }\r\n\r\n  /**\r\n   * Checks if the drag distance exceeds the defined threshold.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   *\r\n   * @return `true` if the distance exceeds the threshold, or `false` if not.\r\n   */\r\n  function shouldStart( e: TouchEvent | MouseEvent ): boolean {\r\n    const { dragMinThreshold: thresholds } = options;\r\n    const isObj = isObject( thresholds );\r\n    const mouse = isObj && thresholds.mouse || 0;\r\n    const touch = ( isObj ? thresholds.touch : +thresholds ) || 10;\r\n    return abs( diffCoord( e ) ) > ( isTouchEvent( e ) ? touch : mouse );\r\n  }\r\n\r\n  /**\r\n   * Checks whether dragging towards the slider or the scroll direction.\r\n   *\r\n   * @return `true` if dragging towards the slider direction, or otherwise `false`.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\r\n  function isSliderDirection( e: TouchEvent | MouseEvent ): boolean {\r\n    return abs( diffCoord( e ) ) > abs( diffCoord( e, true ) );\r\n  }\r\n\r\n  /**\r\n   * Computes the drag velocity.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   *\r\n   * @return The drag velocity.\r\n   */\r\n  function computeVelocity( e: TouchEvent | MouseEvent ): number {\r\n    if ( Splide.is( LOOP ) || ! exceeded ) {\r\n      const time = diffTime( e );\r\n\r\n      if ( time && time < LOG_INTERVAL ) {\r\n        return diffCoord( e ) / time;\r\n      }\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Computes the destination by the velocity and the `flickPower` option.\r\n   *\r\n   * @param velocity - The drag velocity.\r\n   *\r\n   * @return The destination.\r\n   */\r\n  function computeDestination( velocity: number ): number {\r\n    return getPosition() + sign( velocity ) * min(\r\n      abs( velocity ) * ( options.flickPower || 600 ),\r\n      isFree ? Infinity : Components.Layout.listSize() * ( options.flickMaxPages || 1 )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the coord difference between the provided and base events.\r\n   *\r\n   * @param e          - A TouchEvent or MouseEvent object.\r\n   * @param orthogonal - Optional. If `true`, returns the coord of the orthogonal axis against the drag one.\r\n   *\r\n   * @return The difference of the coord.\r\n   */\r\n  function diffCoord( e: TouchEvent | MouseEvent, orthogonal?: boolean ): number {\r\n    return coordOf( e, orthogonal ) - coordOf( getBaseEvent( e ), orthogonal );\r\n  }\r\n\r\n  /**\r\n   * Returns the elapsed time from the base event to `e`.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   *\r\n   * @return The elapsed time in milliseconds.\r\n   */\r\n  function diffTime( e: TouchEvent | MouseEvent ): number {\r\n    return timeOf( e ) - timeOf( getBaseEvent( e ) );\r\n  }\r\n\r\n  /**\r\n   * Returns the base event.\r\n   * If the base event is same with `e`, returns previous one.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   *\r\n   * @return A base event.\r\n   */\r\n  function getBaseEvent( e: TouchEvent | MouseEvent ): TouchEvent | MouseEvent {\r\n    return baseEvent === e && prevBaseEvent || baseEvent;\r\n  }\r\n\r\n  /**\r\n   * Returns the `pageX` and `pageY` coordinates provided by the event.\r\n   * Be aware that IE does not support both TouchEvent and MouseEvent constructors.\r\n   *\r\n   * @param e          - A TouchEvent or MouseEvent object.\r\n   * @param orthogonal - Optional. If `true`, returns the coord of the orthogonal axis against the drag one.\r\n   *\r\n   * @return A pageX or pageY coordinate.\r\n   */\r\n  function coordOf( e: TouchEvent | MouseEvent, orthogonal?: boolean ): number {\r\n    return ( isTouchEvent( e ) ? e.changedTouches[ 0 ] : e )[ `page${ resolve( orthogonal ? 'Y' : 'X' ) }` ];\r\n  }\r\n\r\n  /**\r\n   * Reduces the distance to move by the predefined friction.\r\n   * This does nothing when the slider type is not `slide`, or the position is inside borders.\r\n   *\r\n   * @param diff - Diff to constrain.\r\n   *\r\n   * @return The constrained diff.\r\n   */\r\n  function constrain( diff: number ): number {\r\n    return diff / ( exceeded && Splide.is( SLIDE ) ? FRICTION : 1 );\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the user can drag the target.\r\n   *\r\n   * @param target - An event target.\r\n   *\r\n   * @return `true` if the target is draggable.\r\n   */\r\n  function isDraggable( target: EventTarget ): boolean {\r\n    const { noDrag } = options;\r\n\r\n    return ! matches( target, `.${ CLASS_PAGINATION_PAGE }, .${ CLASS_ARROW }` )\r\n      && ( ! noDrag || ! matches( target, noDrag ) );\r\n  }\r\n\r\n  /**\r\n   * Checks if the provided event is TouchEvent or MouseEvent.\r\n   *\r\n   * @param e - An event to check.\r\n   *\r\n   * @return `true` if the `e` is TouchEvent.\r\n   */\r\n  function isTouchEvent( e: TouchEvent | MouseEvent ): e is TouchEvent {\r\n    return typeof TouchEvent !== 'undefined' && e instanceof TouchEvent;\r\n  }\r\n\r\n  /**\r\n   * Checks if now the user is dragging the slider or not.\r\n   *\r\n   * @return `true` if the user is dragging the slider or otherwise `false`.\r\n   */\r\n  function isDragging(): boolean {\r\n    return dragging;\r\n  }\r\n\r\n  /**\r\n   * Disables the component.\r\n   *\r\n   * @param value - Set `true` to disable the component.\r\n   */\r\n  function disable( value: boolean ): void {\r\n    disabled = value;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    disable,\r\n    isDragging,\r\n  };\r\n}\r\n","import { ARROW_LEFT, ARROW_RIGHT } from '../../constants/arrows';\r\nimport { EVENT_MOVE, EVENT_UPDATED } from '../../constants/events';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { EventInterface, nextTick } from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The interface for the Keyboard component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface KeyboardComponent extends BaseComponent {\r\n  disable( disabled: boolean ): void;\r\n}\r\n\r\n/**\r\n * The keyboard event name.\r\n *\r\n * @since 3.6.0\r\n */\r\nconst KEYBOARD_EVENT = 'keydown';\r\n\r\n/**\r\n * The component for controlling the slider by keyboards.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Keyboard component object.\r\n */\r\nexport function Keyboard(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): KeyboardComponent {\r\n  const { on, bind, destroy } = event;\r\n  const { root } = Splide;\r\n  const { resolve } = Components.Direction;\r\n\r\n  /**\r\n   * The target element of the keyboard event.\r\n   */\r\n  let target: Window | HTMLElement;\r\n\r\n  /**\r\n   * Indicates whether the component is currently disabled or not.\r\n   */\r\n  let disabled: boolean;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on( EVENT_UPDATED, destroy );\r\n    on( EVENT_UPDATED, init );\r\n    on( EVENT_MOVE, onMove );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   */\r\n  function init(): void {\r\n    const { keyboard } = options;\r\n\r\n    if ( keyboard ) {\r\n      target = keyboard === 'global' ? window : root;\r\n      bind( target, KEYBOARD_EVENT, onKeydown );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disables the keyboard input.\r\n   *\r\n   * @param value - Toggles disabling/enabling the keyboard input.\r\n   */\r\n  function disable( value: boolean ): void {\r\n    disabled = value;\r\n  }\r\n\r\n  /**\r\n   * Called when the slider moves.\r\n   * To avoid the slider from moving twice, wait for a tick.\r\n   */\r\n  function onMove(): void {\r\n    const _disabled = disabled;\r\n    disabled = true;\r\n    nextTick( () => { disabled = _disabled } );\r\n  }\r\n\r\n  /**\r\n   * Called when any key is pressed on the target.\r\n   *\r\n   * @param e - A KeyboardEvent object.\r\n   */\r\n  function onKeydown( e: KeyboardEvent ): void {\r\n    if ( ! disabled ) {\r\n      if ( e.key === resolve( ARROW_LEFT ) ) {\r\n        Splide.go( '<' );\r\n      } else if ( e.key === resolve( ARROW_RIGHT ) ) {\r\n        Splide.go( '>' );\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy,\r\n    disable,\r\n  };\r\n}\r\n","import { CLASS_LOADING } from '../../constants/classes';\r\nimport {\r\n  EVENT_LAZYLOAD_LOADED,\r\n  EVENT_MOVED,\r\n  EVENT_REFRESH,\r\n  EVENT_RESIZE,\r\n  EVENT_SCROLLED,\r\n} from '../../constants/events';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport {\r\n  addClass,\r\n  apply,\r\n  child,\r\n  create,\r\n  display,\r\n  empty,\r\n  EventInterface,\r\n  getAttribute,\r\n  queryAll,\r\n  removeNode,\r\n  removeAttribute,\r\n  removeClass,\r\n  setAttribute,\r\n} from '@splidejs/utils';\r\nimport { SlideComponent } from '../Slides/Slide';\r\nimport { IMAGE_SELECTOR, SRC_DATA_ATTRIBUTE, SRCSET_DATA_ATTRIBUTE } from './constants';\r\n\r\n\r\n/**\r\n * The interface for the LazyLoad component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface LazyLoadComponent extends BaseComponent {\r\n  /** @internal */\r\n  check(): void;\r\n}\r\n\r\n/**\r\n * The type for each entry.\r\n * Use a tuple for better compression.\r\n *\r\n * @since 4.0.0\r\n */\r\ntype LazyLoadEntry = [ HTMLImageElement, SlideComponent, HTMLSpanElement ];\r\n\r\n/**\r\n * The component for lazily loading images.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return An LazyLoad component object.\r\n */\r\nexport function LazyLoad(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): LazyLoadComponent {\r\n  const { on, off, bind, emit } = event;\r\n  const isSequential = options.lazyLoad === 'sequential';\r\n  const events       = [ EVENT_MOVED, EVENT_SCROLLED ];\r\n\r\n  /**\r\n   * Stores data of images.\r\n   */\r\n  let entries: LazyLoadEntry[] = [];\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    if ( options.lazyLoad ) {\r\n      init();\r\n      on( EVENT_REFRESH, init );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes the component and start loading images.\r\n   * Be aware that `refresh` also calls this method.\r\n   */\r\n  function init() {\r\n    empty( entries );\r\n    register();\r\n\r\n    if ( isSequential ) {\r\n      loadNext();\r\n    } else {\r\n      off( events );\r\n      on( events, check );\r\n      check();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds images and register them as entries with creating spinner elements.\r\n   * Note that spinner can be already available because of `refresh()`.\r\n   */\r\n  function register(): void {\r\n    Components.Slides.forEach( Slide => {\r\n      queryAll<HTMLImageElement>( Slide.slide, IMAGE_SELECTOR ).forEach( img => {\r\n        const src    = getAttribute( img, SRC_DATA_ATTRIBUTE );\r\n        const srcset = getAttribute( img, SRCSET_DATA_ATTRIBUTE );\r\n\r\n        if ( src !== img.src || srcset !== img.srcset ) {\r\n          const className = options.classes.spinner;\r\n          const parent    = img.parentElement;\r\n          const spinner   = child( parent, `.${ className }` ) || create( 'span', className, parent );\r\n\r\n          entries.push( [ img, Slide, spinner ] );\r\n          img.src || display( img, 'none' );\r\n        }\r\n      } );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Checks how close each image is from the active slide, and determines whether to start loading or not.\r\n   * The last `+1` is for the current page.\r\n   */\r\n  function check(): void {\r\n    entries = entries.filter( data => {\r\n      const distance = options.perPage * ( ( options.preloadPages || 1 ) + 1 ) - 1;\r\n      return data[ 1 ].isWithin( Splide.index, distance ) ? load( data ) : true;\r\n    } );\r\n\r\n    entries.length || off( events );\r\n  }\r\n\r\n  /**\r\n   * Starts loading the image in the provided data.\r\n   *\r\n   * @param data - A LazyLoadEntry object.\r\n   */\r\n  function load( data: LazyLoadEntry ): void {\r\n    const [ img ] = data;\r\n\r\n    addClass( data[ 1 ].slide, CLASS_LOADING );\r\n    bind( img, 'load error', apply( onLoad, data ) );\r\n\r\n    setAttribute( img, 'src', getAttribute( img, SRC_DATA_ATTRIBUTE ) );\r\n    setAttribute( img, 'srcset', getAttribute( img, SRCSET_DATA_ATTRIBUTE ) );\r\n    removeAttribute( img, SRC_DATA_ATTRIBUTE );\r\n    removeAttribute( img, SRCSET_DATA_ATTRIBUTE );\r\n  }\r\n\r\n  /**\r\n   * Called when the image is loaded or any error occurs.\r\n   *\r\n   * @param data - A LazyLoadEntry object.\r\n   * @param e    - An Event object.\r\n   */\r\n  function onLoad( data: LazyLoadEntry, e: Event ): void {\r\n    const [ img, Slide ] = data;\r\n\r\n    removeClass( Slide.slide, CLASS_LOADING );\r\n\r\n    if ( e.type !== 'error' ) {\r\n      removeNode( data[ 2 ] );\r\n      display( img, '' );\r\n      emit( EVENT_LAZYLOAD_LOADED, img, Slide );\r\n      emit( EVENT_RESIZE );\r\n    }\r\n\r\n    isSequential && loadNext();\r\n  }\r\n\r\n  /**\r\n   * Starts loading a next image.\r\n   */\r\n  function loadNext(): void {\r\n    entries.length && load( entries.shift() );\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy: apply( empty, entries ),\r\n    check,\r\n  };\r\n}\r\n","import { ARROW_LEFT, ARROW_RIGHT } from '../../constants/arrows';\r\nimport {\r\n  ARIA_CONTROLS,\r\n  ARIA_LABEL,\r\n  ARIA_ORIENTATION,\r\n  ARIA_SELECTED,\r\n  ROLE,\r\n  TAB_INDEX,\r\n} from '../../constants/attributes';\r\nimport { CLASS_ACTIVE, CLASS_PAGINATION } from '../../constants/classes';\r\nimport { TTB } from '../../constants/directions';\r\nimport {\r\n  EVENT_END_INDEX_CHANGED,\r\n  EVENT_MOVE,\r\n  EVENT_PAGINATION_MOUNTED,\r\n  EVENT_PAGINATION_UPDATED,\r\n  EVENT_REFRESH,\r\n  EVENT_SCROLL,\r\n  EVENT_SCROLLED,\r\n  EVENT_UPDATED,\r\n} from '../../constants/events';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport {\r\n  addClass,\r\n  apply,\r\n  ceil,\r\n  create,\r\n  display,\r\n  empty,\r\n  EventInterface,\r\n  focus,\r\n  format,\r\n  prevent,\r\n  removeNode,\r\n  removeAttribute,\r\n  removeClass,\r\n  setAttribute,\r\n  slice,\r\n} from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The interface for the Pagination component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface PaginationComponent extends BaseComponent {\r\n  items: PaginationItem[];\r\n  getAt( index: number ): PaginationItem;\r\n  update(): void;\r\n}\r\n\r\n/**\r\n * The interface for data of the pagination.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface PaginationData {\r\n  list: HTMLUListElement;\r\n  items: PaginationItem[];\r\n}\r\n\r\n/**\r\n * The interface for each pagination item.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface PaginationItem {\r\n  li: HTMLLIElement;\r\n  button: HTMLButtonElement;\r\n  page: number;\r\n}\r\n\r\n/**\r\n * The component for the pagination UI (a slide picker).\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Pagination component object.\r\n */\r\nexport function Pagination(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): PaginationComponent {\r\n  const { on, emit, bind } = event;\r\n  const { Slides, Elements, Controller } = Components;\r\n  const { hasFocus, getIndex, go } = Controller;\r\n  const { resolve } = Components.Direction;\r\n  const { pagination: placeholder } = Elements;\r\n\r\n  /**\r\n   * Stores all pagination items.\r\n   */\r\n  const items: PaginationItem[] = [];\r\n\r\n  /**\r\n   * The pagination element.\r\n   */\r\n  let list: HTMLUListElement | null;\r\n\r\n  /**\r\n   * Holds modifier classes.\r\n   */\r\n  let paginationClasses: string;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    destroy();\r\n    on( [ EVENT_UPDATED, EVENT_REFRESH, EVENT_END_INDEX_CHANGED ], mount );\r\n\r\n    const enabled = options.pagination;\r\n    placeholder && display( placeholder, enabled ? '' : 'none' );\r\n\r\n    if ( enabled ) {\r\n      on( [ EVENT_MOVE, EVENT_SCROLL, EVENT_SCROLLED ], update );\r\n      createPagination();\r\n      update();\r\n      emit( EVENT_PAGINATION_MOUNTED, { list, items }, getAt( Splide.index ) );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    if ( list ) {\r\n      removeNode( placeholder ? slice( list.children ) : list );\r\n      removeClass( list, paginationClasses );\r\n      empty( items );\r\n      list = null;\r\n    }\r\n\r\n    event.destroy();\r\n  }\r\n\r\n  /**\r\n   * Creates the pagination element and appends it to the slider.\r\n   */\r\n  function createPagination(): void {\r\n    const { length } = Splide;\r\n    const { classes, i18n, perPage } = options;\r\n    const max = hasFocus() ? Controller.getEnd() + 1 : ceil( length / perPage );\r\n\r\n    list = placeholder || create( 'ul', classes.pagination, Elements.track.parentElement );\r\n\r\n    addClass( list, ( paginationClasses = `${ CLASS_PAGINATION }--${ getDirection() }` ) );\r\n    setAttribute( list, ROLE, 'tablist' );\r\n    setAttribute( list, ARIA_LABEL, i18n.select );\r\n    setAttribute( list, ARIA_ORIENTATION, getDirection() === TTB ? 'vertical' : '' );\r\n\r\n    for ( let i = 0; i < max; i++ ) {\r\n      const li       = create( 'li', null, list );\r\n      const button   = create( 'button', { class: classes.page, type: 'button' }, li );\r\n      const controls = Slides.getIn( i ).map( Slide => Slide.slide.id );\r\n      const text     = ! hasFocus() && perPage > 1 ? i18n.pageX : i18n.slideX;\r\n\r\n      bind( button, 'click', apply( onClick, i ) );\r\n\r\n      if ( options.paginationKeyboard ) {\r\n        bind( button, 'keydown', apply( onKeydown, i ) );\r\n      }\r\n\r\n      setAttribute( li, ROLE, 'presentation' );\r\n      setAttribute( button, ROLE, 'tab' );\r\n      setAttribute( button, ARIA_CONTROLS, controls.join( ' ' ) );\r\n      setAttribute( button, ARIA_LABEL, format( text, i + 1 ) );\r\n      setAttribute( button, TAB_INDEX, -1 );\r\n\r\n      items.push( { li, button, page: i } );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the user clicks each pagination dot.\r\n   * Moves the focus to the active slide for accessibility.\r\n   *\r\n   * @link https://www.w3.org/WAI/tutorials/carousels/functionality/\r\n   *\r\n   * @param page - A clicked page index.\r\n   */\r\n  function onClick( page: number ): void {\r\n    go( `>${ page }`, true );\r\n  }\r\n\r\n  /**\r\n   * Called when any key is pressed on the pagination.\r\n   *\r\n   * @link https://www.w3.org/TR/2021/NOTE-wai-aria-practices-1.2-20211129/#keyboard-interaction-21\r\n   *\r\n   * @param page - A page index.\r\n   * @param e    - A KeyboardEvent object.\r\n   */\r\n  function onKeydown( page: number, e: KeyboardEvent ): void {\r\n    const { length } = items;\r\n    const { key } = e;\r\n    const dir = getDirection();\r\n\r\n    let nextPage = -1;\r\n\r\n    if ( key === resolve( ARROW_RIGHT, false, dir ) ) {\r\n      nextPage = ++page % length;\r\n    } else if ( key === resolve( ARROW_LEFT, false, dir ) ) {\r\n      nextPage = ( --page + length ) % length;\r\n    } else if ( key === 'Home' ) {\r\n      nextPage = 0;\r\n    } else if ( key === 'End' ) {\r\n      nextPage = length - 1;\r\n    }\r\n\r\n    const item = items[ nextPage ];\r\n\r\n    if ( item ) {\r\n      focus( item.button );\r\n      go( `>${ nextPage }` );\r\n      prevent( e, true );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the latest direction for pagination.\r\n   */\r\n  function getDirection(): Options['direction'] {\r\n    return options.paginationDirection || options.direction;\r\n  }\r\n\r\n  /**\r\n   * Returns the pagination item at the specified index.\r\n   *\r\n   * @param index - An index.\r\n   *\r\n   * @return A pagination item object if available, or otherwise `undefined`.\r\n   */\r\n  function getAt( index: number ): PaginationItem | undefined {\r\n    return items[ Controller.toPage( index ) ];\r\n  }\r\n\r\n  /**\r\n   * Updates the pagination status.\r\n   */\r\n  function update(): void {\r\n    const prev = getAt( getIndex( true ) );\r\n    const curr = getAt( getIndex() );\r\n\r\n    if ( prev ) {\r\n      const { button } = prev;\r\n      removeClass( button, CLASS_ACTIVE );\r\n      removeAttribute( button, ARIA_SELECTED );\r\n      setAttribute( button, TAB_INDEX, -1 );\r\n    }\r\n\r\n    if ( curr ) {\r\n      const { button } = curr;\r\n      addClass( button, CLASS_ACTIVE );\r\n      setAttribute( button, ARIA_SELECTED, true );\r\n      setAttribute( button, TAB_INDEX, '' );\r\n    }\r\n\r\n    emit( EVENT_PAGINATION_UPDATED, { list, items }, prev, curr );\r\n  }\r\n\r\n  return {\r\n    items,\r\n    mount,\r\n    destroy,\r\n    getAt,\r\n    update,\r\n  };\r\n}\r\n","import { SCROLL_LISTENER_OPTIONS } from '../../constants/listener-options';\r\nimport { MOVING } from '../../constants/states';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { abs, EventInterface, prevent, timeOf } from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The interface for the Wheel component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface WheelComponent extends BaseComponent {\r\n}\r\n\r\n/**\r\n * The component for observing the mouse wheel and moving the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Wheel component object.\r\n */\r\nexport function Wheel(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): WheelComponent {\r\n  /**\r\n   * Holds the last time when the wheel moves the slider.\r\n   */\r\n  let lastTime = 0;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    if ( options.wheel ) {\r\n      event.bind( Components.Elements.track, 'wheel', onWheel, SCROLL_LISTENER_OPTIONS );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the user rotates the mouse wheel on the slider.\r\n   *\r\n   * @param e - A WheelEvent object.\r\n   */\r\n  function onWheel( e: WheelEvent ): void {\r\n    if ( e.cancelable ) {\r\n      const { deltaY } = e;\r\n      const backwards = deltaY < 0;\r\n      const timeStamp = timeOf( e );\r\n      const min       = options.wheelMinThreshold || 0;\r\n      const sleep     = options.wheelSleep || 0;\r\n\r\n      if ( abs( deltaY ) > min && timeStamp - lastTime > sleep ) {\r\n        Splide.go( backwards ? '<' : '>' );\r\n        lastTime = timeStamp;\r\n      }\r\n\r\n      shouldPrevent( backwards ) && prevent( e );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks whether the component should prevent the default action of the wheel event or not.\r\n   *\r\n   * @param backwards - Set this to `true` for backwards direction.\r\n   *\r\n   * @return `true` if the action should be prevented.\r\n   */\r\n  function shouldPrevent( backwards: boolean ): boolean {\r\n    return ! options.releaseWheel\r\n      || Splide.state.is( MOVING )\r\n      || Components.Controller.getAdjacent( backwards ) !== -1;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n  };\r\n}\r\n","import { ARIA_ATOMIC, ARIA_BUSY, ARIA_LIVE } from '../../constants/attributes';\r\nimport { CLASS_SR } from '../../constants/classes';\r\nimport { EVENT_AUTOPLAY_PAUSE, EVENT_AUTOPLAY_PLAY, EVENT_MOVED, EVENT_SCROLLED } from '../../constants/events';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport {\r\n  append,\r\n  apply,\r\n  create,\r\n  EventInterface,\r\n  removeNode,\r\n  removeAttribute,\r\n  RequestInterval,\r\n  setAttribute,\r\n} from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The interface for the Live component.\r\n *\r\n * @since 4.0.0\r\n */\r\nexport interface LiveComponent extends BaseComponent {\r\n  disable( disabled: boolean ): void;\r\n}\r\n\r\n/**\r\n * Delay in milliseconds before removing the SR field for Windows Narrator.\r\n */\r\nconst SR_REMOVAL_DELAY = 90;\r\n\r\n/**\r\n * The component for implementing Live Region to the slider.\r\n *\r\n * @link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions\r\n *\r\n * @since 4.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Live component object.\r\n */\r\nexport function Live(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): LiveComponent {\r\n  const { on } = event;\r\n  const { track } = Components.Elements;\r\n\r\n  /**\r\n   * Indicates whether the live region is enabled or not.\r\n   */\r\n  const enabled = options.live && ! options.isNavigation;\r\n\r\n  /**\r\n   * The span element for the SR only text.\r\n   */\r\n  const sr = create( 'span', CLASS_SR );\r\n\r\n  /**\r\n   * Holds the RequestInterval instance.\r\n   */\r\n  const interval = RequestInterval( SR_REMOVAL_DELAY, apply( toggle, false ) );\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   * - JAWS needs `aria-atomic` to make the `aria-busy` work.\r\n   * - Immediately removing the SR makes Windows Narrator silent, hence requires the delay around 50ms.\r\n   */\r\n  function mount(): void {\r\n    if ( enabled ) {\r\n      disable( ! Components.Autoplay.isPaused() );\r\n      setAttribute( track, ARIA_ATOMIC, true );\r\n      sr.textContent = '…';\r\n\r\n      on( EVENT_AUTOPLAY_PLAY, apply( disable, true ) );\r\n      on( EVENT_AUTOPLAY_PAUSE, apply( disable, false ) );\r\n      on( [ EVENT_MOVED, EVENT_SCROLLED ], apply( toggle, true ) );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggles the SR field and `aria-busy`.\r\n   *\r\n   * @param active - Determines whether to activate the field or not.\r\n   */\r\n  function toggle( active: boolean ): void {\r\n    setAttribute( track, ARIA_BUSY, active );\r\n\r\n    if ( active ) {\r\n      append( track, sr );\r\n      interval.start();\r\n    } else {\r\n      removeNode( sr );\r\n      interval.cancel();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    removeAttribute( track, [ ARIA_LIVE, ARIA_ATOMIC, ARIA_BUSY ] );\r\n    removeNode( sr );\r\n  }\r\n\r\n  /**\r\n   * Disables/enables the live region.\r\n   * Does nothing when the `live` option is not enabled.\r\n   *\r\n   * @param disabled - `true` to disable the live region or `false` to enable it again.\r\n   */\r\n  function disable( disabled: boolean ): void {\r\n    if ( enabled ) {\r\n      setAttribute( track, ARIA_LIVE, disabled ? 'off' : 'polite' );\r\n    }\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    disable,\r\n    destroy,\r\n  };\r\n}","import { Options } from '../types';\r\nimport { CLASSES } from './classes';\r\nimport { I18N } from './i18n';\r\n\r\n\r\n/**\r\n * The collection of default options.\r\n * Note that this collection does not contain all options.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const DEFAULTS: Options = {\r\n  type              : 'slide',\r\n  role              : 'region',\r\n  speed             : 400,\r\n  perPage           : 1,\r\n  cloneStatus       : true,\r\n  arrows            : true,\r\n  pagination        : true,\r\n  paginationKeyboard: true,\r\n  interval          : 5000,\r\n  pauseOnHover      : true,\r\n  pauseOnFocus      : true,\r\n  resetProgress     : true,\r\n  easing            : 'cubic-bezier(0.25, 1, 0.5, 1)',\r\n  drag              : true,\r\n  direction         : 'ltr',\r\n  trimSpace         : true,\r\n  focusableNodes    : 'a, button, textarea, input, select, iframe',\r\n  live              : true,\r\n  classes           : CLASSES,\r\n  i18n              : I18N,\r\n  reducedMotion: {\r\n    speed      : 0,\r\n    rewindSpeed: 0,\r\n    autoplay   : 'pause',\r\n  },\r\n};","/**\r\n * The collection of i18n strings.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const I18N = {\r\n  prev      : 'Previous slide',\r\n  next      : 'Next slide',\r\n  first     : 'Go to first slide',\r\n  last      : 'Go to last slide',\r\n  slideX    : 'Go to slide %s',\r\n  pageX     : 'Go to page %s',\r\n  play      : 'Start autoplay',\r\n  pause     : 'Pause autoplay',\r\n  carousel  : 'carousel',\r\n  slide     : 'slide',\r\n  select    : 'Select a slide to show',\r\n  slideLabel: '%s of %s', // [ slide number ] / [ slide size ]\r\n};\r\n","import { EVENT_MOUNTED, EVENT_REFRESH } from '../../constants/events';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { Components, Options, TransitionComponent } from '../../types';\r\nimport { EventInterface, nextTick, noop } from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The component for the fade transition.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Transition component object.\r\n */\r\nexport function Fade(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): TransitionComponent {\r\n  const { Slides } = Components;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    event.on( [ EVENT_MOUNTED, EVENT_REFRESH ], init );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   * Offsets all slides for stacking them onto the head of the list.\r\n   * The `nextTick` disables the initial fade transition of the first slide.\r\n   */\r\n  function init(): void {\r\n    Slides.forEach( Slide => {\r\n      Slide.style( 'transform', `translateX(-${ 100 * Slide.index }%)` );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Starts the transition.\r\n   *\r\n   * @param index - A slide index to be active.\r\n   * @param done  - The callback function that must be called after the transition ends.\r\n   */\r\n  function start( index: number, done: () => void ): void {\r\n    Slides.style( 'transition', `opacity ${ options.speed }ms ${ options.easing }` );\r\n    nextTick( done );\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    start,\r\n    cancel: noop,\r\n  };\r\n}\r\n","import { SLIDE } from '../../constants/types';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { Components, Options, TransitionComponent } from '../../types';\r\nimport { abs, apply, EventInterface, style } from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The component for the slide transition.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Transition component object.\r\n */\r\nexport function Slide(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): TransitionComponent {\r\n  const { Move, Controller, Scroll } = Components;\r\n  const { list } = Components.Elements;\r\n  const transition = apply( style, list, 'transition' );\r\n\r\n  /**\r\n   * Holds the `done` callback function.\r\n   */\r\n  let endCallback: () => void;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    event.bind( list, 'transitionend', e => {\r\n      if ( e.target === list && endCallback ) {\r\n        cancel();\r\n        endCallback();\r\n      }\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Starts the transition.\r\n   * The Move component calls this method just before the slider moves.\r\n   *\r\n   * @param index - A destination index.\r\n   * @param done  - The callback function that must be called after the transition ends.\r\n   */\r\n  function start( index: number, done: () => void ): void {\r\n    const destination = Move.toPosition( index, true );\r\n    const position    = Move.getPosition();\r\n    const speed       = getSpeed( index );\r\n\r\n    if ( abs( destination - position ) >= 1 && speed >= 1 ) {\r\n      if ( options.useScroll ) {\r\n        Scroll.scroll( destination, speed, false, done );\r\n      } else {\r\n        transition( `transform ${ speed }ms ${ options.easing }` );\r\n        Move.translate( destination, true );\r\n        endCallback = done;\r\n      }\r\n    } else {\r\n      Move.jump( index );\r\n      done();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancels the transition.\r\n   */\r\n  function cancel(): void {\r\n    transition( '' );\r\n    Scroll.cancel();\r\n  }\r\n\r\n  /**\r\n   * Returns the transition speed.\r\n   *\r\n   * @param index - A destination index.\r\n   */\r\n  function getSpeed( index: number ): number {\r\n    const { rewindSpeed } = options;\r\n\r\n    if ( Splide.is( SLIDE ) && rewindSpeed ) {\r\n      const prev = Controller.getIndex( true );\r\n      const end  = Controller.getEnd();\r\n\r\n      if ( ( prev === 0 && index >= end ) || ( prev >= end && index === 0 ) ) {\r\n        return rewindSpeed;\r\n      }\r\n    }\r\n\r\n    return options.speed;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    start,\r\n    cancel,\r\n  };\r\n}\r\n","import * as ComponentConstructors from '../../components';\r\nimport { SlideMatcher } from '../../components/Slides/Slides';\r\nimport { CLASS_INITIALIZED } from '../../constants/classes';\r\nimport { DEFAULTS } from '../../constants/defaults';\r\nimport { EVENT_DESTROY, EVENT_MOUNTED, EVENT_READY, EVENT_REFRESH } from '../../constants/events';\r\nimport { DATA_ATTRIBUTE } from '../../constants/project';\r\nimport { CREATED, DESTROYED, IDLE, STATES } from '../../constants/states';\r\nimport { FADE } from '../../constants/types';\r\nimport { Fade, Slide } from '../../transitions';\r\nimport { AnyFunction, ComponentConstructor, Components, EventMap, Options, SyncTarget } from '../../types';\r\nimport {\r\n  addClass,\r\n  assign,\r\n  empty,\r\n  EventInterface,\r\n  forOwn,\r\n  getAttribute,\r\n  isString,\r\n  merge,\r\n  query,\r\n  slice,\r\n  State,\r\n} from '@splidejs/utils';\r\nimport { assert } from '../../utils';\r\nimport { ARIA_LABEL, ARIA_LABELLEDBY } from '../../constants/attributes';\r\n\r\n\r\n/**\r\n * The frontend class for the Splide slider.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport class Splide {\r\n  /**\r\n   * Changes the default options for all Splide instances.\r\n   */\r\n  static defaults: Options = {};\r\n\r\n  /**\r\n   * The collection of state numbers.\r\n   */\r\n  static readonly STATES = STATES;\r\n\r\n  /**\r\n   * The root element where the Splide is applied.\r\n   */\r\n  readonly root: HTMLElement;\r\n\r\n  /**\r\n   * The EventBusObject object.\r\n   */\r\n  readonly event = EventInterface();\r\n\r\n  /**\r\n   * The collection of all component objects.\r\n   */\r\n  readonly Components: Components = {} as Components;\r\n\r\n  /**\r\n   * The StateObject object.\r\n   */\r\n  readonly state = State( CREATED );\r\n\r\n  /**\r\n   * An array with SyncTarget objects for splide instances to sync with.\r\n   */\r\n  readonly splides: SyncTarget[] = [];\r\n\r\n  /**\r\n   * The current options.\r\n   */\r\n  private readonly _o: Options = {};\r\n\r\n  /**\r\n   * The collection of all components.\r\n   */\r\n  private _C: Components;\r\n\r\n  /**\r\n   * The collection of extensions.\r\n   */\r\n  private _E: Record<string, ComponentConstructor> = {};\r\n\r\n  /**\r\n   * The Transition component.\r\n   */\r\n  private _T: ComponentConstructor;\r\n\r\n  /**\r\n   * The Splide constructor.\r\n   *\r\n   * @param target  - The selector for the target element, or the element itself.\r\n   * @param options - Optional. An object with options.\r\n   */\r\n  constructor( target: string | HTMLElement, options?: Options ) {\r\n    const root = isString( target ) ? query<HTMLElement>( document, target ) : target;\r\n    assert( root, `${ root } is invalid.` );\r\n\r\n    this.root = root;\r\n\r\n    options = merge( {\r\n      label     : getAttribute( root, ARIA_LABEL ) || '',\r\n      labelledby: getAttribute( root, ARIA_LABELLEDBY ) || '',\r\n    }, DEFAULTS, Splide.defaults, options || {} );\r\n\r\n    try {\r\n      merge( options, JSON.parse( getAttribute( root, DATA_ATTRIBUTE ) ) );\r\n    } catch ( e ) {\r\n      assert( false, 'Invalid JSON' );\r\n    }\r\n\r\n    this._o = Object.create( merge( {}, options ) );\r\n  }\r\n\r\n  /**\r\n   * Initializes the instance.\r\n   *\r\n   * @param Extensions - Optional. An object with extensions.\r\n   * @param Transition - Optional. A Transition component.\r\n   *\r\n   * @return `this`\r\n   */\r\n  mount( Extensions?: Record<string, ComponentConstructor>, Transition?: ComponentConstructor ): this {\r\n    const { state, Components } = this;\r\n    assert( state.is( [ CREATED, DESTROYED ] ), 'Already mounted!' );\r\n\r\n    state.set( CREATED );\r\n\r\n    this._C = Components;\r\n    this._T = Transition || this._T || ( this.is( FADE ) ? Fade : Slide );\r\n    this._E = Extensions || this._E;\r\n\r\n    const Constructors = assign( {}, ComponentConstructors, this._E, { Transition: this._T } );\r\n\r\n    forOwn( Constructors, ( Component, key ) => {\r\n      const component = Component( this, Components, this._o, this.event.create() );\r\n      Components[ key ] = component;\r\n      component.setup && component.setup();\r\n    } );\r\n\r\n    forOwn( Components, component => {\r\n      component.mount && component.mount();\r\n    } );\r\n\r\n    this.emit( EVENT_MOUNTED );\r\n\r\n    addClass( this.root, CLASS_INITIALIZED );\r\n\r\n    state.set( IDLE );\r\n    this.emit( EVENT_READY );\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Syncs the slider with the provided one.\r\n   * This method must be called before the `mount()`.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const primary   = new Splide();\r\n   * const secondary = new Splide();\r\n   *\r\n   * primary.sync( secondary );\r\n   * primary.mount();\r\n   * secondary.mount();\r\n   * ```\r\n   *\r\n   * @param splide - A Splide instance to sync with.\r\n   *\r\n   * @return `this`\r\n   */\r\n  sync( splide: Splide ): this {\r\n    this.splides.push( { splide } );\r\n    splide.splides.push( { splide: this, isParent: true } );\r\n\r\n    if ( this.state.is( IDLE ) ) {\r\n      this._C.Sync.remount();\r\n      splide.Components.Sync.remount();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Moves the slider with the following control pattern.\r\n   *\r\n   * | Pattern | Description |\r\n   * |---|---|\r\n   * | `i` | Goes to the slide `i` |\r\n   * | `'+${i}'` | Increments the slide index by `i` |\r\n   * | `'-${i}'` | Decrements the slide index by `i` |\r\n   * | `'>'` | Goes to the next page |\r\n   * | `'<'` | Goes to the previous page |\r\n   * | `>${i}` | Goes to the page `i` |\r\n   *\r\n   * In most cases, `'>'` and `'<'` notations are enough to control the slider\r\n   * because they respect `perPage` and `perMove` options.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const splide = new Splide();\r\n   *\r\n   * // Goes to the slide 1:\r\n   * splide.go( 1 );\r\n   *\r\n   * // Increments the index:\r\n   * splide.go( '+2' );\r\n   *\r\n   * // Goes to the next page:\r\n   * splide.go( '>' );\r\n   *\r\n   * // Goes to the page 2:\r\n   * splide.go( '>2' );\r\n   * ```\r\n   *\r\n   * @param control - A control pattern.\r\n   *\r\n   * @return `this`\r\n   */\r\n  go( control: number | string ): this {\r\n    this._C.Controller.go( control );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Registers an event handler.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const splide = new Splide();\r\n   *\r\n   * // Listens to a single event:\r\n   * splide.on( 'move', function() {} );\r\n   *\r\n   * // Listens to multiple events:\r\n   * splide.on( 'move resize', function() {} );\r\n   *\r\n   * // Appends a namespace:\r\n   * splide.on( 'move.myNamespace resize.myNamespace', function() {} );\r\n   * ```\r\n   *\r\n   * @param events   - An event name or names separated by spaces. Use a dot(.) to append a namespace.\r\n   * @param callback - A callback function.\r\n   *\r\n   * @return `this`\r\n   */\r\n  on<K extends keyof EventMap>( events: K, callback: EventMap[ K ] ): this;\r\n  on( events: string | string[], callback: AnyFunction ): this;\r\n  on( events: string | string[], callback: AnyFunction ): this {\r\n    this.event.on( events, callback );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes the registered all handlers for the specified event or events.\r\n   * If you want to only remove a particular handler, use namespace to identify it.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const splide = new Splide();\r\n   *\r\n   * // Removes all handlers assigned to \"move\":\r\n   * splide.off( 'move' );\r\n   *\r\n   * // Only removes handlers that belong to the specified namespace:\r\n   * splide.off( 'move.myNamespace' );\r\n   * ```\r\n   *\r\n   * @param events   - An event name or names separated by spaces. Use a dot(.) to append a namespace.\r\n   * @param callback - A callback function to remove.\r\n   *\r\n   * @return `this`\r\n   */\r\n  off<K extends keyof EventMap>( events: K | K[] | string | string[], callback: AnyFunction ): this {\r\n    this.event.off( events, callback );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Emits an event and triggers registered handlers.\r\n   *\r\n   * @param event - An event name to emit.\r\n   * @param args  - Optional. Any number of arguments to pass to handlers.\r\n   *\r\n   * @return `this`\r\n   */\r\n  emit<K extends keyof EventMap>( event: K, ...args: Parameters<EventMap[ K ]> ): this;\r\n  emit( event: string, ...args: any[] ): this;\r\n  emit( event: string ): this {\r\n    // eslint-disable-next-line prefer-rest-params, prefer-spread\r\n    this.event.emit( event, ...slice( arguments, 1 ) );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Inserts a slide at the specified position.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const splide = new Splide();\r\n   * splide.mount();\r\n   *\r\n   * // Adds the slide by the HTML:\r\n   * splide.add( '<li></li> );\r\n   *\r\n   * // or adds the element:\r\n   * splide.add( document.createElement( 'li' ) );\r\n   * ```\r\n   *\r\n   * @param slides - A slide element, an HTML string that represents a slide, or an array with them.\r\n   * @param index  - Optional. An index to insert a slide at.\r\n   *\r\n   * @return `this`\r\n   */\r\n  add( slides: string | HTMLElement | Array<string | HTMLElement>, index?: number ): this {\r\n    this._C.Slides.add( slides, index );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes slides that match the matcher\r\n   * that can be an index, an array with indices, a selector, or an iteratee function.\r\n   *\r\n   * @param matcher - An index, an array with indices, a selector string, or an iteratee function.\r\n   */\r\n  remove( matcher: SlideMatcher ): this {\r\n    this._C.Slides.remove( matcher );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Checks the slider type.\r\n   *\r\n   * @param type - A type to test.\r\n   *\r\n   * @return `true` if the type matches the current one, or otherwise `false`.\r\n   */\r\n  is( type: string ): boolean {\r\n    return this._o.type === type;\r\n  }\r\n\r\n  /**\r\n   * Refreshes the slider.\r\n   *\r\n   * @return `this`\r\n   */\r\n  refresh(): this {\r\n    this.emit( EVENT_REFRESH );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Destroys the slider.\r\n   *\r\n   * @param completely - Optional. If `true`, Splide will not remount the slider by breakpoints.\r\n   *\r\n   * @return `this`\r\n   */\r\n  destroy( completely = true ): this {\r\n    const { event, state } = this;\r\n\r\n    if ( state.is( CREATED ) ) {\r\n      // Postpones destruction requested before the slider becomes ready.\r\n      this.on( EVENT_READY, this.destroy.bind( this, completely ) );\r\n    } else {\r\n      forOwn( this._C, component => {\r\n        component.destroy && component.destroy( completely );\r\n      }, true );\r\n\r\n      event.emit( EVENT_DESTROY );\r\n      event.destroy();\r\n      completely && empty( this.splides );\r\n      state.set( DESTROYED );\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns options.\r\n   *\r\n   * @return An object with the latest options.\r\n   */\r\n  get options(): Options {\r\n    return this._o;\r\n  }\r\n\r\n  /**\r\n   * Merges options to the current options and emits `updated` event.\r\n   *\r\n   * @param options - An object with new options.\r\n   */\r\n  set options( options: Options ) {\r\n    this._C.Media.set( options, true, true );\r\n  }\r\n\r\n  /**\r\n   * Returns the number of slides without clones.\r\n   *\r\n   * @return The number of slides.\r\n   */\r\n  get length(): number {\r\n    return this._C.Slides.getLength( true );\r\n  }\r\n\r\n  /**\r\n   * Returns the active slide index.\r\n   *\r\n   * @return The active slide index.\r\n   */\r\n  get index(): number {\r\n    return this._C.Controller.getIndex();\r\n  }\r\n}\r\n"],"names":["MEDIA_PREFERS_REDUCED_MOTION","MOVING","SCROLLING","STATES","CREATED","MOUNTED","IDLE","DRAGGING","DESTROYED","N","n","length","a","t","bind","dn","setTimeout","an","P","requestAnimationFrame","m","y","S","g","Array","isArray","ln","p","Z","x","ownerDocument","defaultView","window","HTMLElement","q","d","forEach","G","includes","pn","push","D","prototype","F","e","slice","call","I","split","i","classList","toggle","J","Q","appendChild","yn","parentNode","insertBefore","W","matches","X","children","filter","Y","firstElementChild","v","Object","assign","A","keys","L","reverse","k","r","gn","U","removeAttribute","M","setAttribute","String","j","document","createElement","nn","getComputedStyle","style","An","$n","focus","preventScroll","wn","getAttribute","Cn","contains","tn","getBoundingClientRect","en","removeChild","qn","DOMParser","parseFromString","body","Ln","preventDefault","stopPropagation","stopImmediatePropagation","On","querySelector","Tn","querySelectorAll","Pn","Bn","timeStamp","Nn","class","_","reduce","trim","let","min","E","max","$","floor","Dn","ceil","Fn","abs","un","sign","In","Math","Mn","_n","o","bn","Kn","replace","cn","padStart","B","w","C","splice","b","f","u","c","addEventListener","s","removeEventListener","create","destroy","H","on","off","l","emit","sn","Date","now","O","T","cancelAnimationFrame","start","h","rewind","pause","cancel","set","isPaused","Rn","is","EVENT_MOUNTED","EVENT_MOVE","EVENT_MOVED","EVENT_CLICK","EVENT_ACTIVE","EVENT_INACTIVE","EVENT_VISIBLE","EVENT_HIDDEN","EVENT_REFRESH","EVENT_UPDATED","EVENT_RESIZE","EVENT_RESIZED","EVENT_SCROLL","EVENT_SCROLLED","EVENT_NAVIGATION_MOUNTED","EVENT_AUTOPLAY_PLAY","EVENT_AUTOPLAY_PAUSE","EVENT_LAZYLOAD_LOADED","EVENT_SLIDE_KEYDOWN","EVENT_SHIFTED","ARROW_LEFT","ARROW_RIGHT","TTB","ORIENTATION_MAP","width","left","right","ArrowLeft","ArrowRight","ROLE","TAB_INDEX","ARIA_CONTROLS","ARIA_CURRENT","ARIA_SELECTED","ARIA_LABEL","ARIA_LABELLEDBY","ARIA_HIDDEN","ARIA_ORIENTATION","ARIA_ROLEDESCRIPTION","ARIA_LIVE","ARIA_BUSY","ARIA_ATOMIC","ALL_ATTRIBUTES","PROJECT_CODE","DATA_ATTRIBUTE","CLASS_PREFIX","CLASS_ROOT","CLASS_TRACK","CLASS_LIST","CLASS_SLIDE","CLASS_CLONE","CLASS_CONTAINER","CLASS_ARROWS","CLASS_ARROW","CLASS_ARROW_PREV","CLASS_ARROW_NEXT","CLASS_PAGINATION","CLASS_PAGINATION_PAGE","CLASS_PROGRESS_BAR","CLASS_TOGGLE","CLASS_SR","CLASS_ACTIVE","CLASS_PREV","CLASS_NEXT","CLASS_VISIBLE","CLASS_LOADING","CLASS_FOCUS_IN","CLASS_OVERFLOW","STATUS_CLASSES","CLASSES","slide","clone","arrows","arrow","prev","next","pagination","page","spinner","assert","condition","message","Error","POINTER_DOWN_EVENTS","POINTER_MOVE_EVENTS","POINTER_UP_EVENTS","SLIDE","LOOP","FADE","Slide","Splide","index","slideIndex","event","Components","root","options","isNavigation","updateOnMove","i18n","slideFocus","resolve","Direction","styles","label","isClone","container","child","destroyed","initNavigation","controls","splides","map","target","splide","Slides","getAt","id","join","format","slideX","onMove","update","curr","hidden","active","isActive","hasClass","toggleClass","self","visible","trackRect","rect","Elements","track","slideRect","state","queryAll","focusableNodes","activeElement","cloneStatus","object","mount","pad","slideLabel","apply","removeClass","prop","value","useContainer","_style","isWithin","from","distance","diff","forOwn","pos","list","size","get","key","defineProperty","enumerable","INTERVAL_DATA_ATTRIBUTE","SCROLL_LISTENER_OPTIONS","passive","capture","SRC_DATA_ATTRIBUTE","SRCSET_DATA_ATTRIBUTE","IMAGE_SELECTOR","TRIGGER_KEYS","breakpoints","reducedMotion","binder","EventBinder","queries","completely","register","query","queryList","matchMedia","direction","merged","entry","merge","omit","refresh","opts","base","notify","getPrototypeOf","setup","isMin","mediaQuery","ownKeys","sort","enable","axisOnly","match","offset","replacement","toLowerCase","charAt","toUpperCase","orient","elements","slides","rootClasses","trackClasses","isUsingKey","find","bar","role","tagName","carousel","attrs","concat","empty","getClasses","addClass","labelledby","className","elm","closest","type","drag","init","Slide1","Slide2","excludeClones","iteratee","matcher","isFunction","isString","toArray","getIn","Controller","toIndex","hasFocus","perPage","between","add","items","forEachItem","isHTMLElement","parseHtml","ref","before","append","classes","observeImages","callback","images","img","remove","removeNode","getLength","isEnough","styleSlides","vertical","rootRect","overflow","unit","cssPadding","resize","force","newRect","height","cssHeight","gap","autoWidth","fixedWidth","cssSlideSize","fixedHeight","autoHeight","isOverflow","padding","isObject","heightRatio","listSize","slideSize","withoutGap","getGap","totalSize","sliderSize","first","second","getPadding","parseFloat","clones","cloneCount","remount","observe","computeCloneCount","generate","count","isHead","cloneNode","Layout","fixedCount","isUndefined","fixedSize","Transition","reposition","isBusy","Scroll","jump","translate","toPosition","position","preventLoop","destination","exceededMax","getEnd","shift","backwards","excess","getLimit","getPosition","minDistance","Infinity","trimming","trimSpace","clamp","move","dest","shifted","exceededLimit","exceededMin","Move","omitEnd","isLoop","isSlide","getNext","getAdjacent","getPrev","currIndex","endIndex","prevIndex","slideCount","perMove","end","onResized","number","computeDestIndex","approximatelyEqual","loop","snapPage","toPage","setIndex","waitForTransition","go","control","allowSameIndex","indicator","scroll","duration","snap","getIndex","toDest","placeholder","wrapper","created","wrapperClasses","enabled","createArrow","display","arrowPath","nextIndex","prevLabel","nextLabel","last","disabled","interval","RequestInterval","rate","autoplay","hovered","focused","stopped","play","resetProgress","stop","autoToggle","pauseOnHover","pauseOnFocus","cover","src","friction","onScrolled","noConstrain","noDistance","clear","onEnd","to","easingFunc","pow","Media","basePosition","baseEvent","prevBaseEvent","isFree","dragging","exceeded","clickPrevented","disable","onPointerDown","isTouch","noDrag","isTouchEvent","button","prevent","onPointerMove","onPointerUp","save","thresholds","isObj","mouse","cancelable","diffCoord","expired","diffTime","hasExceeded","touch","velocity","flickPower","flickMaxPages","time","rewindByDrag","onClick","orthogonal","coordOf","getBaseEvent","timeOf","changedTouches","TouchEvent","noop","isDragging","keyboard","onKeydown","_disabled","nextTick","isSequential","lazyLoad","events","entries","srcset","parent","parentElement","loadNext","check","preloadPages","data","load","onLoad","paginationClasses","dir","getDirection","nextPage","item","paginationDirection","select","li","text","pageX","paginationKeyboard","isParent","sync","navigate","ev","lastTime","onWheel","sleep","deltaY","wheelMinThreshold","wheelSleep","releaseWheel","wheel","live","sr","Autoplay","textContent","DEFAULTS","speed","easing","rewindSpeed","Fade","done","transition","endCallback","useScroll","defaults","fn","State","constructor","this","JSON","parse","_o","Extensions","_C","_T","_E","ComponentConstructors","Component","component","Sync","arguments"],"mappings":"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"}