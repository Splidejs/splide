{"version":3,"file":"splide.min.js","sources":["../../src/js/constants/media.ts","../../src/js/constants/states.ts","../../../utils/dist/splide-utils.esm.js","../../src/js/constants/events.ts","../../src/js/components/Breakpoints/Breakpoints.ts","../../src/js/constants/arrows.ts","../../src/js/constants/directions.ts","../../src/js/components/Direction/Direction.ts","../../src/js/constants/attributes.ts","../../src/js/constants/project.ts","../../src/js/constants/classes.ts","../../src/js/utils/error/assert/assert.ts","../../src/js/components/Drag/constants.ts","../../src/js/constants/types.ts","../../src/js/components/Slides/Slide.ts","../../src/js/components/Autoplay/constants.ts","../../src/js/constants/listener-options.ts","../../src/js/components/LazyLoad/constants.ts","../../src/js/components/Sync/Sync.ts","../../src/js/components/index.ts","../../src/js/components/Elements/Elements.ts","../../src/js/components/Slides/Slides.ts","../../src/js/components/Layout/Layout.ts","../../src/js/components/Clones/Clones.ts","../../src/js/components/Move/Move.ts","../../src/js/components/Controller/Controller.ts","../../src/js/components/Arrows/Arrows.ts","../../src/js/components/Arrows/path.ts","../../src/js/components/Autoplay/Autoplay.ts","../../src/js/components/Scroll/Scroll.ts","../../src/js/components/Scroll/constants.ts","../../src/js/components/Drag/Drag.ts","../../src/js/components/Keyboard/Keyboard.ts","../../src/js/components/LazyLoad/LazyLoad.ts","../../src/js/components/Pagination/Pagination.ts","../../src/js/components/Wheel/Wheel.ts","../../src/js/components/Live/Live.ts","../../src/js/components/Live/constants.ts","../../src/js/constants/defaults.ts","../../src/js/constants/i18n.ts","../../src/js/transitions/Fade/Fade.ts","../../src/js/transitions/Slide/Slide.ts","../../src/js/core/Splide/Splide.ts"],"sourcesContent":["/**\r\n * Matches when users request reducing non-essential animations.\r\n *\r\n * @link https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion\r\n */\r\nexport const MEDIA_PREFERS_REDUCED_MOTION = '(prefers-reduced-motion: reduce)';","/**\r\n * Splide has been just created.\r\n */\r\nexport const CREATED = 1;\r\n\r\n/**\r\n * Splide has mounted components.\r\n */\r\nexport const MOUNTED = 2;\r\n\r\n/**\r\n * Splide is ready.\r\n */\r\nexport const IDLE = 3;\r\n\r\n/**\r\n * Splide is moving.\r\n */\r\nexport const MOVING = 4;\r\n\r\n/**\r\n * Splide is moving.\r\n */\r\nexport const SCROLLING = 5;\r\n\r\n/**\r\n * The user is dragging the slider.\r\n */\r\nexport const DRAGGING = 6;\r\n\r\n/**\r\n * Splide has been destroyed.\r\n */\r\nexport const DESTROYED = 7;\r\n\r\n/**\r\n * The collection of all states.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const STATES = {\r\n  CREATED,\r\n  MOUNTED,\r\n  IDLE,\r\n  MOVING,\r\n  SCROLLING,\r\n  DRAGGING,\r\n  DESTROYED,\r\n};\r\n","function empty(array) {\n  array.length = 0;\n}\nfunction apply(func, ...args) {\n  return func.bind(null, ...args);\n}\nconst nextTick = setTimeout;\nconst noop = () => {\n};\nfunction raf(func) {\n  return requestAnimationFrame(func);\n}\nfunction typeOf(type, subject) {\n  return typeof subject === type;\n}\nfunction isObject(subject) {\n  return !isNull(subject) && typeOf(\"object\", subject);\n}\nconst isArray = Array.isArray;\nconst isFunction = apply(typeOf, \"function\");\nconst isString = apply(typeOf, \"string\");\nconst isBoolean = apply(typeOf, \"boolean\");\nconst isUndefined = apply(typeOf, \"undefined\");\nfunction isNull(subject) {\n  return subject === null;\n}\nfunction isHTMLElement(subject) {\n  try {\n    return subject instanceof (subject.ownerDocument.defaultView || window).HTMLElement;\n  } catch (e) {\n    return false;\n  }\n}\nfunction toArray(value) {\n  return isArray(value) ? value : [value];\n}\nfunction forEach(values, iteratee) {\n  toArray(values).forEach(iteratee);\n}\nfunction includes(array, value) {\n  return array.includes(value);\n}\nfunction push(array, items) {\n  array.push(...toArray(items));\n  return array;\n}\nconst arrayProto = Array.prototype;\nfunction slice(arrayLike, start, end) {\n  return arrayProto.slice.call(arrayLike, start, end);\n}\nfunction find(arrayLike, predicate) {\n  return arrayProto.find.call(arrayLike, predicate);\n}\nfunction toggleClass(elm, classes, force) {\n  if (elm) {\n    forEach(isString(classes) ? classes.split(\" \") : classes, (className) => {\n      className && elm.classList.toggle(className, force);\n    });\n  }\n}\nfunction addClass(elm, classes) {\n  toggleClass(elm, classes, true);\n}\nfunction append(parent, children2) {\n  forEach(children2, parent.appendChild.bind(parent));\n}\nfunction before(nodes, ref) {\n  forEach(nodes, (node) => {\n    const parent = (ref || node).parentNode;\n    if (parent) {\n      parent.insertBefore(node, ref);\n    }\n  });\n}\nfunction matches(elm, selector) {\n  return isHTMLElement(elm) && elm.matches(selector);\n}\nfunction children(parent, selector) {\n  const children2 = parent ? slice(parent.children) : [];\n  return selector ? children2.filter((child2) => matches(child2, selector)) : children2;\n}\nfunction child(parent, selector) {\n  return selector ? children(parent, selector)[0] : parent.firstElementChild;\n}\nfunction closest(from, selector) {\n  return from.closest(selector);\n}\nconst assign = Object.assign;\nconst ownKeys = Object.keys;\nfunction forOwn(object, iteratee, right) {\n  if (object) {\n    (right ? ownKeys(object).reverse() : ownKeys(object)).forEach((key) => {\n      key !== \"__proto__\" && iteratee(object[key], key);\n    });\n  }\n  return object;\n}\nfunction merge(object, ...sources) {\n  sources.forEach((source) => {\n    forOwn(source, (value, key) => {\n      if (isArray(value)) {\n        value = value.slice();\n      } else if (isObject(value)) {\n        value = merge({}, isObject(object[key]) ? object[key] : {}, value);\n      }\n      object[key] = value;\n    });\n  });\n  return object;\n}\nfunction omit(object, keys) {\n  forEach(keys || ownKeys(object), (key) => {\n    delete object[key];\n  });\n  return object;\n}\nfunction removeAttribute(elms, attrs) {\n  forEach(elms, (elm) => {\n    forEach(attrs, (attr) => {\n      elm && elm.removeAttribute(attr);\n    });\n  });\n}\nfunction setAttribute(elms, attrs, value) {\n  if (isObject(attrs)) {\n    forOwn(attrs, (value2, name) => {\n      setAttribute(elms, name, value2);\n    });\n  } else {\n    forEach(elms, (elm) => {\n      isNull(value) || value === \"\" ? removeAttribute(elm, attrs) : elm.setAttribute(attrs, String(value));\n    });\n  }\n}\nfunction create(tag2, attrs, parent) {\n  const elm = document.createElement(tag2);\n  if (attrs) {\n    isString(attrs) ? addClass(elm, attrs) : setAttribute(elm, attrs);\n  }\n  parent && append(parent, elm);\n  return elm;\n}\nfunction style(elm, prop, value) {\n  if (isUndefined(value)) {\n    return getComputedStyle(elm)[prop];\n  }\n  if (!isNull(value)) {\n    elm.style[prop] = `${value}`;\n  }\n}\nfunction display(elm, display2) {\n  style(elm, \"display\", display2);\n}\nfunction focus(elm) {\n  isHTMLElement(elm) && elm.focus({ preventScroll: true });\n}\nfunction getAttribute(elm, attr) {\n  return elm.getAttribute(attr);\n}\nfunction hasClass(elm, className) {\n  return !!elm && elm.classList.contains(className);\n}\nfunction rect(target) {\n  return target.getBoundingClientRect();\n}\nfunction removeNode(nodes) {\n  forEach(nodes, (node) => {\n    if (node && node.parentNode) {\n      node.parentNode.removeChild(node);\n    }\n  });\n}\nfunction measure(parent, value) {\n  if (isString(value)) {\n    const div2 = create(\"div\", { style: `width: ${value}; position: absolute;` }, parent);\n    value = rect(div2).width;\n    removeNode(div2);\n  }\n  return value;\n}\nfunction parseHtml(html) {\n  return child(new DOMParser().parseFromString(html, \"text/html\").body);\n}\nfunction prevent(e, stopPropagation) {\n  e.preventDefault();\n  if (stopPropagation) {\n    e.stopPropagation();\n    e.stopImmediatePropagation();\n  }\n}\nfunction query(parent, selector) {\n  return parent && parent.querySelector(selector);\n}\nfunction queryAll(parent, selector) {\n  return selector && parent ? slice(parent.querySelectorAll(selector)) : [];\n}\nfunction removeClass(elm, classes) {\n  toggleClass(elm, classes, false);\n}\nfunction timeOf(e) {\n  return e.timeStamp;\n}\nfunction unit(value) {\n  return isString(value) ? value : value ? `${value}px` : \"\";\n}\nfunction buildAttrs(attrs) {\n  let result = \"\";\n  forOwn(attrs, (value, key) => {\n    result += value || value === 0 ? ` ${key}${value !== true ? `=\"${value}\"` : \"\"}` : \"\";\n  });\n  return result.trim();\n}\nfunction classNames(...args) {\n  return args.reduce((classes, value) => {\n    return `${classes} ${isArray(value) ? classNames(...value) : value || \"\"}`.trim();\n  }, \"\");\n}\nfunction tag(tag2, attrs) {\n  attrs = isArray(attrs) || !isObject(attrs) ? { class: classNames(attrs) } : attrs;\n  return `<${`${tag2} ${attrs ? buildAttrs(attrs) : \"\"}`.trim()}>`;\n}\nfunction div(attrs) {\n  return tag(\"div\", attrs);\n}\nconst { min, max, floor, ceil, abs, sign } = Math;\nfunction approximatelyEqual(x, y, epsilon) {\n  return abs(x - y) < epsilon;\n}\nfunction between(number, x, y, exclusive) {\n  const minimum = min(x, y);\n  const maximum = max(x, y);\n  return exclusive ? minimum < number && number < maximum : minimum <= number && number <= maximum;\n}\nfunction clamp(number, x, y) {\n  const minimum = min(x, y);\n  const maximum = max(x, y);\n  return min(max(minimum, number), maximum);\n}\nfunction camelToKebab(string) {\n  return string.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\nfunction format(string, replacements) {\n  forEach(replacements, (replacement) => {\n    string = string.replace(\"%s\", `${replacement}`);\n  });\n  return string;\n}\nfunction pad(number, length = 2) {\n  return `${number}`.padStart(length, \"0\");\n}\nconst ids = {};\nfunction uniqueId(prefix) {\n  return `${prefix}${pad(ids[prefix] = (ids[prefix] || 0) + 1)}`;\n}\nfunction forEachEvent(events, iteratee) {\n  forEach(events, (event) => {\n    isString(event) && event.split(\" \").forEach(iteratee);\n  });\n}\nfunction arrayRemove(array, predicate) {\n  const removed = [];\n  for (let i = array.length - 1; i >= 0; i--) {\n    if (predicate(array[i])) {\n      removed.push(...array.splice(i, 1));\n    }\n  }\n  return removed;\n}\nfunction EventBinder(removersRef) {\n  const removers = removersRef || [];\n  const key = removersRef ? {} : void 0;\n  function bind(target, events, callback, options) {\n    forEachEvent(events, (event) => {\n      target.addEventListener(event, callback, options);\n      removers.push([target.removeEventListener.bind(target, event, callback, options), key]);\n    });\n  }\n  function destroy() {\n    if (key) {\n      arrayRemove(removers, (remover) => remover[1] === key).forEach((remover) => {\n        remover[0]();\n      });\n    } else {\n      removers.forEach((remover) => {\n        remover[0]();\n      });\n      empty(removers);\n    }\n  }\n  return {\n    bind,\n    create: apply(EventBinder, removers),\n    destroy\n  };\n}\nfunction EventBus(listenersRef) {\n  const listeners = listenersRef || [];\n  const key = listenersRef ? {} : void 0;\n  function on(events, callback) {\n    forEachEvent(events, (event) => {\n      listeners.push([event, callback, key]);\n    });\n  }\n  function off(events, callback) {\n    forEachEvent(events, (event) => {\n      arrayRemove(listeners, (listener) => {\n        return listener[0] === event && (!callback || listener[1] === callback) && listener[2] === key;\n      });\n    });\n  }\n  function emit(event, ...args) {\n    listeners.slice().forEach((listener) => {\n      listener[0] === event && listener[1](...args);\n    });\n  }\n  function destroy() {\n    if (key) {\n      arrayRemove(listeners, (listener) => listener[2] === key);\n    } else {\n      empty(listeners);\n    }\n  }\n  return {\n    on,\n    off,\n    emit,\n    create: apply(EventBus, listeners),\n    destroy\n  };\n}\nfunction EventInterface(binder = EventBinder(), bus = EventBus()) {\n  function create2() {\n    return EventInterface(binder.create(), bus.create());\n  }\n  function destroy() {\n    binder.destroy();\n    bus.destroy();\n  }\n  return assign({}, binder, bus, { create: create2, destroy });\n}\nfunction RequestInterval(interval, onInterval, onUpdate, limit) {\n  const { now } = Date;\n  let startTime;\n  let rate = 0;\n  let id;\n  let paused = true;\n  let count = 0;\n  function update() {\n    if (!paused) {\n      rate = interval ? min((now() - startTime) / interval, 1) : 1;\n      onUpdate && onUpdate(rate);\n      if (rate >= 1) {\n        onInterval();\n        startTime = now();\n        if (limit && ++count >= limit) {\n          return pause();\n        }\n      }\n      id = raf(update);\n    }\n  }\n  function start(resume) {\n    resume || cancel();\n    startTime = now() - (resume ? rate * interval : 0);\n    paused = false;\n    id = raf(update);\n  }\n  function pause() {\n    paused = true;\n  }\n  function rewind() {\n    startTime = now();\n    rate = 0;\n    if (onUpdate) {\n      onUpdate(rate);\n    }\n  }\n  function cancel() {\n    id && cancelAnimationFrame(id);\n    rate = 0;\n    id = 0;\n    paused = true;\n  }\n  function set(time) {\n    interval = time;\n  }\n  function isPaused() {\n    return paused;\n  }\n  return {\n    start,\n    rewind,\n    pause,\n    cancel,\n    set,\n    isPaused\n  };\n}\nfunction State(initialState) {\n  let state = initialState;\n  function set(value) {\n    state = value;\n  }\n  function is(states) {\n    return includes(toArray(states), state);\n  }\n  return { set, is };\n}\nfunction Throttle(func, duration) {\n  const interval = RequestInterval(duration || 0, func, void 0, 1);\n  return () => {\n    interval.isPaused() && interval.start();\n  };\n}\nexport {\n  EventBinder,\n  EventBus,\n  EventInterface,\n  RequestInterval,\n  State,\n  Throttle,\n  abs,\n  addClass,\n  append,\n  apply,\n  approximatelyEqual,\n  assign,\n  before,\n  between,\n  buildAttrs,\n  camelToKebab,\n  ceil,\n  child,\n  children,\n  clamp,\n  classNames,\n  closest,\n  create,\n  display,\n  div,\n  empty,\n  find,\n  floor,\n  focus,\n  forEach,\n  forOwn,\n  format,\n  getAttribute,\n  hasClass,\n  includes,\n  isArray,\n  isBoolean,\n  isFunction,\n  isHTMLElement,\n  isNull,\n  isObject,\n  isString,\n  isUndefined,\n  matches,\n  max,\n  measure,\n  merge,\n  min,\n  nextTick,\n  noop,\n  omit,\n  ownKeys,\n  pad,\n  parseHtml,\n  prevent,\n  push,\n  query,\n  queryAll,\n  raf,\n  rect,\n  removeAttribute,\n  removeClass,\n  removeNode,\n  setAttribute,\n  sign,\n  slice,\n  style,\n  tag,\n  timeOf,\n  toArray,\n  toggleClass,\n  uniqueId,\n  unit\n};\n","export const EVENT_MOUNTED            = 'mounted';\r\nexport const EVENT_READY              = 'ready';\r\nexport const EVENT_MOVE               = 'move';\r\nexport const EVENT_MOVED              = 'moved';\r\nexport const EVENT_CLICK              = 'click';\r\nexport const EVENT_ACTIVE             = 'active';\r\nexport const EVENT_INACTIVE           = 'inactive';\r\nexport const EVENT_VISIBLE            = 'visible';\r\nexport const EVENT_HIDDEN             = 'hidden';\r\nexport const EVENT_REFRESH            = 'refresh';\r\nexport const EVENT_UPDATED            = 'updated';\r\nexport const EVENT_RESIZE             = 'resize';\r\nexport const EVENT_RESIZED            = 'resized';\r\nexport const EVENT_DRAG               = 'drag';\r\nexport const EVENT_DRAGGING           = 'dragging';\r\nexport const EVENT_DRAGGED            = 'dragged';\r\nexport const EVENT_SCROLL             = 'scroll';\r\nexport const EVENT_SCROLLED           = 'scrolled';\r\nexport const EVENT_OVERFLOW           = 'overflow';\r\nexport const EVENT_DESTROY            = 'destroy';\r\nexport const EVENT_ARROWS_MOUNTED     = 'arrows:mounted';\r\nexport const EVENT_ARROWS_UPDATED     = 'arrows:updated';\r\nexport const EVENT_PAGINATION_MOUNTED = 'pagination:mounted';\r\nexport const EVENT_PAGINATION_UPDATED = 'pagination:updated';\r\nexport const EVENT_NAVIGATION_MOUNTED = 'navigation:mounted';\r\nexport const EVENT_AUTOPLAY_PLAY      = 'autoplay:play';\r\nexport const EVENT_AUTOPLAY_PLAYING   = 'autoplay:playing';\r\nexport const EVENT_AUTOPLAY_PAUSE     = 'autoplay:pause';\r\nexport const EVENT_LAZYLOAD_LOADED    = 'lazyload:loaded';\r\nexport const EVENT_LAZYLOAD_ERROR     = 'lazyload:error';\r\n\r\n/** @internal */\r\nexport const EVENT_SLIDE_KEYDOWN     = '_sk';\r\nexport const EVENT_SHIFTED           = '_sh';\r\nexport const EVENT_END_INDEX_CHANGED = '_ei';\r\n","import { MEDIA_PREFERS_REDUCED_MOTION } from '../../constants/media';\r\nimport { CREATED, DESTROYED } from '../../constants/states';\r\nimport { EventBinder, merge, omit, ownKeys } from '@splidejs/utils';\r\nimport { BaseComponent, ComponentConstructor, Options } from '../../types';\r\nimport { EVENT_OVERFLOW, EVENT_UPDATED } from '../../constants/events';\r\n\r\n\r\n/**\r\n * The interface for the Media component.\r\n *\r\n * @since 4.0.0\r\n */\r\nexport interface BreakpointsComponent extends BaseComponent {\r\n  /** @internal */\r\n  reduce( reduced: boolean ): void;\r\n  set( options: Options, base?: boolean, notify?: boolean ): void;\r\n}\r\n\r\n/**\r\n * The special breakpoints key when the number of slides are not enough for the list.\r\n *\r\n * @since 5.0.0\r\n */\r\nconst NOT_OVERFLOW_KEY = '!overflow';\r\n\r\n/**\r\n * The component for observing media queries and updating options if necessary.\r\n * This used to be the Options component.\r\n *\r\n * @since 4.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Media component object.\r\n */\r\nexport const Breakpoints: ComponentConstructor<BreakpointsComponent> = ( Splide, Components, options, event ) => {\r\n  const { state } = Splide;\r\n  const breakpoints   = options.breakpoints || {};\r\n  const reducedMotion = options.reducedMotion || {};\r\n  const binder        = EventBinder();\r\n\r\n  /**\r\n   * Stores options and a predicate function.\r\n   */\r\n  const entries: Array<[ Options, () => boolean ]> = [];\r\n\r\n  /**\r\n   * Called when the component is constructed.\r\n   */\r\n  function setup(): void {\r\n    const isMin = options.mediaQuery === 'min';\r\n\r\n    ownKeys( breakpoints )\r\n      .sort( ( n, m ) => isMin ? +n - +m : +m - +n )\r\n      .forEach( key => {\r\n        if ( key !== NOT_OVERFLOW_KEY ) {\r\n          register( breakpoints[ key ], `(${ isMin ? 'min' : 'max' }-width:${ key }px)` );\r\n        }\r\n      } );\r\n\r\n    if ( breakpoints[ NOT_OVERFLOW_KEY ] ) {\r\n      entries.push( [ breakpoints[ NOT_OVERFLOW_KEY ], () => Components.Layout && ! Components.Layout.isOverflow() ] );\r\n      event.on( EVENT_OVERFLOW, update );\r\n    }\r\n\r\n    register( reducedMotion, MEDIA_PREFERS_REDUCED_MOTION );\r\n    update();\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   *\r\n   * @param completely - Will be `true` for complete destruction.\r\n   */\r\n  function destroy( completely: boolean ): void {\r\n    if ( completely ) {\r\n      binder.destroy();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registers entries as `[ Options, media query string ]`.\r\n   *\r\n   * @param options - Options merged to current options when the document matches the query.\r\n   * @param query   - A query string.\r\n   */\r\n  function register( options: Options, query: string ): void {\r\n    const queryList = matchMedia( query );\r\n    binder.bind( queryList, 'change', update );\r\n    entries.push( [ options,  () => queryList.matches ] );\r\n  }\r\n\r\n  /**\r\n   * Checks all media queries in entries and updates options.\r\n   */\r\n  function update(): void {\r\n    const destroyed = state.is( DESTROYED );\r\n    const direction = options.direction;\r\n    const merged = entries.reduce<Options>( ( merged, entry ) => {\r\n      return merge( merged, entry[ 1 ]() ? entry[ 0 ] : {} );\r\n    }, {} );\r\n\r\n    omit( options );\r\n    set( merged, false, ! state.is( CREATED ) );\r\n\r\n    if ( options.destroy ) {\r\n      Splide.destroy( options.destroy === 'completely' );\r\n    } else if ( destroyed ) {\r\n      destroy( true );\r\n      Splide.mount();\r\n    } else {\r\n      direction !== options.direction && Splide.refresh();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disables or enables `reducedMotion` options.\r\n   * This method does nothing when the document does not match the query.\r\n   *\r\n   * @internal\r\n   *\r\n   * @param enable - Determines whether to apply `reducedMotion` options or not.\r\n   */\r\n  function reduce( enable: boolean ): void {\r\n    if ( matchMedia( MEDIA_PREFERS_REDUCED_MOTION ).matches ) {\r\n      enable ? merge( options, reducedMotion ) : omit( options, ownKeys( reducedMotion ) );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets current options or base options (prototype).\r\n   * If changing base options, always emits the `updated` event.\r\n   *\r\n   * @internal\r\n   *\r\n   * @param opts   - New options.\r\n   * @param base   - Optional. Determines whether to also update base options or not.\r\n   * @param notify - Optional. If `true`, emits the `update` event.\r\n   */\r\n  function set( opts: Options, base?: boolean, notify?: boolean ): void {\r\n    merge( options, opts );\r\n    base && merge( Object.getPrototypeOf( options ), opts );\r\n\r\n    if ( notify ) {\r\n      Splide.emit( EVENT_UPDATED, options );\r\n    }\r\n  }\r\n\r\n  return {\r\n    setup,\r\n    destroy,\r\n    reduce,\r\n    set,\r\n  };\r\n};\r\n","const ARROW = 'Arrow';\r\nexport const ARROW_LEFT  = `${ ARROW }Left`;\r\nexport const ARROW_RIGHT = `${ ARROW }Right`;\r\nexport const ARROW_UP    = `${ ARROW }Up`;\r\nexport const ARROW_DOWN  = `${ ARROW }Down`;","/**\r\n * Enumerates slides from left to right.\r\n */\r\nexport const LTR = 'ltr';\r\n\r\n/**\r\n * Enumerates slides from right to left.\r\n */\r\nexport const RTL = 'rtl';\r\n\r\n/**\r\n * Enumerates slides in a col.\r\n */\r\nexport const TTB = 'ttb';\r\n","import { ARROW_DOWN, ARROW_LEFT, ARROW_RIGHT, ARROW_UP } from '../../constants/arrows';\r\nimport { RTL, TTB } from '../../constants/directions';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, ComponentConstructor, Components, Options } from '../../types';\r\n\r\n\r\n/**\r\n * The interface for the Direction component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface DirectionComponent extends BaseComponent {\r\n  resolve<R extends string>( prop: string, axisOnly?: boolean, direction?: Options['direction'] ): R;\r\n  orient( value: number ): number;\r\n}\r\n\r\n/**\r\n * The translation map for directions.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const ORIENTATION_MAP = {\r\n  width     : [ 'height' ],\r\n  left      : [ 'top', 'right' ],\r\n  right     : [ 'bottom', 'left' ],\r\n  x         : [ 'y' ],\r\n  X         : [ 'Y' ],\r\n  Y         : [ 'X' ],\r\n  ArrowLeft : [ ARROW_UP, ARROW_RIGHT ],\r\n  ArrowRight: [ ARROW_DOWN, ARROW_LEFT ],\r\n};\r\n\r\n/**\r\n * The component that absorbs the difference among directions.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Direction component object.\r\n */\r\nexport const Direction: ComponentConstructor<DirectionComponent> = ( Splide: Splide, Components: Components, options: Options ) => {\r\n  /**\r\n   * Resolves the provided property name.\r\n   *\r\n   * @param prop      - A property name to translate.\r\n   * @param axisOnly  - Optional. If `ture`, returns the same property for LTR and RTL.\r\n   * @param direction - Optional. Specify the direction. The default value is the `direction` option.\r\n   */\r\n  function resolve<R extends string>( prop: string, axisOnly?: boolean, direction?: Options['direction'] ): R {\r\n    direction = direction || options.direction;\r\n    const index = direction === RTL && ! axisOnly ? 1 : direction === TTB ? 0 : -1;\r\n\r\n    return ORIENTATION_MAP[ prop ] && ORIENTATION_MAP[ prop ][ index ]\r\n      || prop.replace( /width|left|right/i, ( match, offset ) => {\r\n        const replacement = ORIENTATION_MAP[ match.toLowerCase() ][ index ] || match;\r\n        return offset > 0 ? replacement.charAt( 0 ).toUpperCase() + replacement.slice( 1 ) : replacement;\r\n      } );\r\n  }\r\n\r\n  /**\r\n   * Orients the value towards the current direction.\r\n   *\r\n   * @param value - A value to orient.\r\n   *\r\n   * @return The oriented value.\r\n   */\r\n  function orient( value: number ): number {\r\n    return value * ( options.direction === RTL ? 1 : -1 );\r\n  }\r\n\r\n  return {\r\n    resolve,\r\n    orient,\r\n  };\r\n};\r\n","export const ROLE      = 'role';\r\nexport const TAB_INDEX = 'tabindex';\r\nexport const DISABLED  = 'disabled';\r\n\r\nexport const ARIA_PREFIX          = 'aria-';\r\nexport const ARIA_CONTROLS        = `${ ARIA_PREFIX }controls`;\r\nexport const ARIA_CURRENT         = `${ ARIA_PREFIX }current`;\r\nexport const ARIA_SELECTED        = `${ ARIA_PREFIX }selected`;\r\nexport const ARIA_LABEL           = `${ ARIA_PREFIX }label`;\r\nexport const ARIA_LABELLEDBY      = `${ ARIA_PREFIX }labelledby`;\r\nexport const ARIA_HIDDEN          = `${ ARIA_PREFIX }hidden`;\r\nexport const ARIA_ORIENTATION     = `${ ARIA_PREFIX }orientation`;\r\nexport const ARIA_ROLEDESCRIPTION = `${ ARIA_PREFIX }roledescription`;\r\nexport const ARIA_LIVE            = `${ ARIA_PREFIX }live`;\r\nexport const ARIA_BUSY            = `${ ARIA_PREFIX }busy`;\r\nexport const ARIA_ATOMIC          = `${ ARIA_PREFIX }atomic`;\r\n\r\n/**\r\n * The array with all attributes to remove later.\r\n * Need to manually remove attributes that are not in this.\r\n * Note that removing `aria-live` disables the live region until the page reload.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const ALL_ATTRIBUTES = [\r\n  ROLE,\r\n  TAB_INDEX,\r\n  DISABLED,\r\n  ARIA_CONTROLS,\r\n  ARIA_CURRENT,\r\n  ARIA_LABEL,\r\n  ARIA_LABELLEDBY,\r\n  ARIA_HIDDEN,\r\n  ARIA_ORIENTATION,\r\n  ARIA_ROLEDESCRIPTION,\r\n];\r\n","/**\r\n * The project code.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const PROJECT_CODE = 'splide';\r\n\r\n/**\r\n * The data attribute prefix.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const DATA_ATTRIBUTE = `data-${ PROJECT_CODE }`;\r\n","import { PROJECT_CODE } from './project';\r\n\r\n/**\r\n * The prefix for classes.\r\n *\r\n * @since 4.1.0\r\n */\r\nconst CLASS_PREFIX = `${ PROJECT_CODE }__`;\r\n\r\n/**\r\n * The prefix for status classes.\r\n *\r\n * @since 4.1.0\r\n */\r\nconst STATUS_CLASS_PREFIX = 'is-';\r\n\r\n/**\r\n * All classes as constants.\r\n */\r\nexport const CLASS_ROOT            = PROJECT_CODE;\r\nexport const CLASS_TRACK           = `${ CLASS_PREFIX }track`;\r\nexport const CLASS_LIST            = `${ CLASS_PREFIX }list`;\r\nexport const CLASS_SLIDE           = `${ CLASS_PREFIX }slide`;\r\nexport const CLASS_CLONE           = `${ CLASS_SLIDE }--clone`;\r\nexport const CLASS_CONTAINER       = `${ CLASS_SLIDE }__container`;\r\nexport const CLASS_ARROWS          = `${ CLASS_PREFIX }arrows`;\r\nexport const CLASS_ARROW           = `${ CLASS_PREFIX }arrow`;\r\nexport const CLASS_ARROW_PREV      = `${ CLASS_ARROW }--prev`;\r\nexport const CLASS_ARROW_NEXT      = `${ CLASS_ARROW }--next`;\r\nexport const CLASS_PAGINATION      = `${ CLASS_PREFIX }pagination`;\r\nexport const CLASS_PAGINATION_PAGE = `${ CLASS_PAGINATION }__page`;\r\nexport const CLASS_PROGRESS        = `${ CLASS_PREFIX }progress`;\r\nexport const CLASS_PROGRESS_BAR    = `${ CLASS_PROGRESS }__bar`;\r\nexport const CLASS_TOGGLE          = `${ CLASS_PREFIX }toggle`;\r\nexport const CLASS_TOGGLE_PLAY     = `${ CLASS_TOGGLE }__play`;\r\nexport const CLASS_TOGGLE_PAUSE    = `${ CLASS_TOGGLE }__pause`;\r\nexport const CLASS_SPINNER         = `${ CLASS_PREFIX }spinner`;\r\nexport const CLASS_SR              = `${ CLASS_PREFIX }sr`;\r\nexport const CLASS_INITIALIZED     = `${ STATUS_CLASS_PREFIX }initialized`;\r\nexport const CLASS_ACTIVE          = `${ STATUS_CLASS_PREFIX }active`;\r\nexport const CLASS_PREV            = `${ STATUS_CLASS_PREFIX }prev`;\r\nexport const CLASS_NEXT            = `${ STATUS_CLASS_PREFIX }next`;\r\nexport const CLASS_VISIBLE         = `${ STATUS_CLASS_PREFIX }visible`;\r\nexport const CLASS_LOADING         = `${ STATUS_CLASS_PREFIX }loading`;\r\nexport const CLASS_FOCUS_IN        = `${ STATUS_CLASS_PREFIX }focus-in`;\r\nexport const CLASS_OVERFLOW        = `${ STATUS_CLASS_PREFIX }overflow`;\r\n\r\n/**\r\n * The array with all status classes except for `is-initialized`.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const STATUS_CLASSES = [\r\n  CLASS_ACTIVE,\r\n  CLASS_VISIBLE,\r\n  CLASS_PREV,\r\n  CLASS_NEXT,\r\n  CLASS_LOADING,\r\n  CLASS_FOCUS_IN,\r\n  CLASS_OVERFLOW,\r\n];\r\n\r\n/**\r\n * The collection of classes for elements that Splide dynamically creates.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const CLASSES = {\r\n  slide     : CLASS_SLIDE,\r\n  clone     : CLASS_CLONE,\r\n  arrows    : CLASS_ARROWS,\r\n  arrow     : CLASS_ARROW,\r\n  prev      : CLASS_ARROW_PREV,\r\n  next      : CLASS_ARROW_NEXT,\r\n  pagination: CLASS_PAGINATION,\r\n  page      : CLASS_PAGINATION_PAGE,\r\n  spinner   : CLASS_SPINNER,\r\n};\r\n","import { PROJECT_CODE } from '../../../constants/project';\r\n\r\n\r\n/**\r\n * Throws an error if the provided condition is falsy.\r\n *\r\n * @param condition - If falsy, an error is thrown.\r\n * @param message   - Optional. A message to display.\r\n */\r\nexport function assert( condition: any, message?: string ): void {\r\n  if ( ! condition ) {\r\n    throw new Error( `[${ PROJECT_CODE }] ${ message || '' }` );\r\n  }\r\n}\r\n","/**\r\n * The power of the friction.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const FRICTION = 5;\r\n\r\n/**\r\n * If the user stops dragging for this duration with keeping the pointer down, updates the base coord and time.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const LOG_INTERVAL = 200;\r\n\r\n/**\r\n * Start events for dragging.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const POINTER_DOWN_EVENTS = 'touchstart mousedown';\r\n\r\n/**\r\n * Update events for dragging.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const POINTER_MOVE_EVENTS = 'touchmove mousemove';\r\n\r\n/**\r\n * End events for dragging.\r\n * The `click` event is required because the browser sometimes dispatches `drag` events instead of `mouse`.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const POINTER_UP_EVENTS = 'touchend touchcancel mouseup click';\r\n","/**\r\n * The type for the regular slider.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const SLIDE = 'slide';\r\n\r\n/**\r\n * The type for the carousel slider.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const LOOP = 'loop';\r\n\r\n/**\r\n * The type for the fade slider that can not have multiple slides in a page.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const FADE = 'fade';\r\n","import {\r\n  ALL_ATTRIBUTES,\r\n  ARIA_CONTROLS,\r\n  ARIA_CURRENT,\r\n  ARIA_HIDDEN,\r\n  ARIA_LABEL,\r\n  ARIA_ROLEDESCRIPTION,\r\n  ROLE,\r\n  TAB_INDEX,\r\n} from '../../constants/attributes';\r\nimport {\r\n  CLASS_ACTIVE,\r\n  CLASS_CONTAINER,\r\n  CLASS_NEXT,\r\n  CLASS_PREV,\r\n  CLASS_VISIBLE,\r\n  STATUS_CLASSES,\r\n} from '../../constants/classes';\r\nimport {\r\n  EVENT_ACTIVE,\r\n  EVENT_CLICK,\r\n  EVENT_HIDDEN,\r\n  EVENT_INACTIVE,\r\n  EVENT_MOVE,\r\n  EVENT_MOVED,\r\n  EVENT_NAVIGATION_MOUNTED,\r\n  EVENT_SCROLLED,\r\n  EVENT_SHIFTED,\r\n  EVENT_SLIDE_KEYDOWN,\r\n  EVENT_VISIBLE,\r\n} from '../../constants/events';\r\nimport { MOVING, SCROLLING } from '../../constants/states';\r\nimport { FADE, LOOP } from '../../constants/types';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent } from '../../types';\r\nimport {\r\n  abs,\r\n  apply,\r\n  ceil,\r\n  child,\r\n  CSSProperties,\r\n  floor,\r\n  focus,\r\n  format,\r\n  getAttribute,\r\n  hasClass,\r\n  min,\r\n  pad,\r\n  queryAll,\r\n  rect,\r\n  removeAttribute,\r\n  removeClass,\r\n  setAttribute,\r\n  style as _style,\r\n  toggleClass,\r\n} from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The interface for the Slide sub component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface  SlideComponent extends BaseComponent {\r\n  readonly index: number;\r\n  readonly slideIndex: number;\r\n  readonly slide: HTMLElement;\r\n  readonly container: HTMLElement;\r\n  readonly isClone: boolean;\r\n\r\n  update(): void;\r\n  pos(): number;\r\n  size(): number;\r\n  style( prop: CSSProperties, value: string | number, useContainer?: boolean ): void\r\n  isWithin( from: number, distance: number ): boolean;\r\n}\r\n\r\n/**\r\n * The subcomponent for managing each slide.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param index      - A slide index.\r\n * @param slideIndex - A slide index for clones. This must be `-1` if the slide is not a clone.\r\n * @param slide      - A slide element.\r\n *\r\n * @return A Slide subcomponent.\r\n */\r\nexport const Slide = ( Splide: Splide, index: number, slideIndex: number, slide: HTMLElement ): SlideComponent => {\r\n  const event = Splide.event.create();\r\n  const { on, emit, bind } = event;\r\n  const { Components, root, options } = Splide;\r\n  const { isNavigation, updateOnMove, i18n, pagination, slideFocus } = options;\r\n  const { Elements } = Components;\r\n  const { resolve } = Components.Direction;\r\n  const styles    = getAttribute( slide, 'style' );\r\n  const label     = getAttribute( slide, ARIA_LABEL );\r\n  const isClone   = slideIndex > -1;\r\n  const container = child( slide, `.${ CLASS_CONTAINER }` );\r\n\r\n  /**\r\n   * Turns into `true` when the component is destroyed.\r\n   */\r\n  let destroyed: boolean;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount( this: SlideComponent ): void {\r\n    if ( ! isClone ) {\r\n      slide.id = `${ root.id }-slide${ pad( index + 1 ) }`;\r\n      setAttribute( slide, ROLE, pagination ? 'tabpanel' : 'group' );\r\n      setAttribute( slide, ARIA_ROLEDESCRIPTION, i18n.slide );\r\n      setAttribute( slide, ARIA_LABEL, label || format( i18n.slideLabel, [ index + 1, Splide.length ] ) );\r\n    }\r\n\r\n    listen();\r\n  }\r\n\r\n  /**\r\n   * Listens to some events.\r\n   */\r\n  function listen(): void {\r\n    bind( slide, 'click', apply( emit, EVENT_CLICK, self ) );\r\n    bind( slide, 'keydown', apply( emit, EVENT_SLIDE_KEYDOWN, self ) );\r\n    on( [ EVENT_MOVED, EVENT_SHIFTED, EVENT_SCROLLED ], update );\r\n    on( EVENT_NAVIGATION_MOUNTED, initNavigation );\r\n\r\n    if ( updateOnMove ) {\r\n      on( EVENT_MOVE, onMove );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    destroyed = true;\r\n    event.destroy();\r\n    removeClass( slide, STATUS_CLASSES );\r\n    removeAttribute( slide, ALL_ATTRIBUTES );\r\n    setAttribute( slide, 'style', styles );\r\n    setAttribute( slide, ARIA_LABEL, label || '' );\r\n  }\r\n\r\n  /**\r\n   * Initializes slides as navigation.\r\n   */\r\n  function initNavigation(): void {\r\n    const controls = Splide.splides.map( target => {\r\n      const Slide = target.splide.Components.Slides.getAt( index );\r\n      return Slide ? Slide.slide.id : '';\r\n    } ).join( ' ' );\r\n\r\n    setAttribute( slide, ARIA_LABEL, format( i18n.slideX, ( isClone ? slideIndex : index ) + 1 ) );\r\n    setAttribute( slide, ARIA_CONTROLS, controls );\r\n    setAttribute( slide, ROLE, slideFocus ? 'button' : '' );\r\n    slideFocus && removeAttribute( slide, ARIA_ROLEDESCRIPTION );\r\n  }\r\n\r\n  /**\r\n   * If the `updateOnMove` option is `true`, called when the slider starts moving.\r\n   */\r\n  function onMove(): void {\r\n    if ( ! destroyed ) {\r\n      update();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates attribute and classes of the slide.\r\n   */\r\n  function update(): void {\r\n    if ( ! destroyed ) {\r\n      const { index: curr } = Splide;\r\n\r\n      updateActivity();\r\n      updateVisibility();\r\n      toggleClass( slide, CLASS_PREV, index === curr - 1 );\r\n      toggleClass( slide, CLASS_NEXT, index === curr + 1 );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the status related with activity.\r\n   */\r\n  function updateActivity(): void {\r\n    const active = isActive();\r\n\r\n    if ( active !== hasClass( slide, CLASS_ACTIVE ) ) {\r\n      toggleClass( slide, CLASS_ACTIVE, active );\r\n      setAttribute( slide, ARIA_CURRENT, isNavigation && active || '' );\r\n      emit( active ? EVENT_ACTIVE : EVENT_INACTIVE, self );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates classes and attributes related with visibility.\r\n   * - Do not update aria-hidden on shifting to avoid Window Narrator from start reading contents.\r\n   * - If the slide has focus and gets hidden, moves focus to the active slide.\r\n   */\r\n  function updateVisibility(): void {\r\n    const visible = isVisible();\r\n    const hidden = ! visible && ( ! isActive() || isClone );\r\n\r\n    if ( ! Splide.state.is( [ MOVING, SCROLLING ] ) ) {\r\n      setAttribute( slide, ARIA_HIDDEN, hidden || '' );\r\n    }\r\n\r\n    setAttribute( queryAll( slide, options.focusableNodes || '' ), TAB_INDEX, hidden ? -1 : '' );\r\n\r\n    if ( slideFocus ) {\r\n      setAttribute( slide, TAB_INDEX, hidden ? -1 : 0 );\r\n    }\r\n\r\n    if ( visible !== hasClass( slide, CLASS_VISIBLE ) ) {\r\n      toggleClass( slide, CLASS_VISIBLE, visible );\r\n      emit( visible ? EVENT_VISIBLE : EVENT_HIDDEN, self );\r\n    }\r\n\r\n    if ( ! visible && document.activeElement === slide ) {\r\n      const Slide = Components.Slides.getAt( Splide.index );\r\n      Slide && focus( Slide.slide );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds a CSS rule to the slider or the container.\r\n   *\r\n   * @param prop         - A property name.\r\n   * @param value        - A CSS value to add.\r\n   * @param useContainer - Optional. Determines whether to apply the rule to the container or not.\r\n   */\r\n  function style( prop: CSSProperties, value: string | number, useContainer?: boolean ): void {\r\n    _style( ( useContainer && container ) || slide, prop, value );\r\n  }\r\n\r\n  /**\r\n   * Checks if the slide is active or not.\r\n   *\r\n   * @return `true` if the slide is active.\r\n   */\r\n  function isActive(): boolean {\r\n    const { index: curr } = Splide;\r\n    return curr === index || ( options.cloneStatus && curr === slideIndex );\r\n  }\r\n\r\n  /**\r\n   * Checks if the slide is visible or not.\r\n   */\r\n  function isVisible(): boolean {\r\n    if ( Splide.is( FADE ) ) {\r\n      return isActive();\r\n    }\r\n\r\n    const trackRect = rect( Elements.track );\r\n    const slideRect = rect( slide );\r\n    const left      = resolve( 'left', true );\r\n    const right     = resolve( 'right', true );\r\n\r\n    return floor( trackRect[ left ] ) <= ceil( slideRect[ left ] )\r\n      && floor( slideRect[ right ] ) <= ceil( trackRect[ right ] );\r\n  }\r\n\r\n  /**\r\n   * Calculates how far this slide is from another slide and\r\n   * returns `true` if the distance is within the given number.\r\n   *\r\n   * @param from     - An index of a base slide.\r\n   * @param distance - `true` if the slide is within this number.\r\n   *\r\n   * @return `true` if the slide is within the `distance` from the base slide, or otherwise `false`.\r\n   */\r\n  function isWithin( from: number, distance: number ): boolean {\r\n    let diff = abs( from - index );\r\n\r\n    if ( ! isClone && ( options.rewind || Splide.is( LOOP ) ) ) {\r\n      diff = min( diff, Splide.length - diff );\r\n    }\r\n\r\n    return diff <= distance;\r\n  }\r\n\r\n  /**\r\n   * Returns the slide offset position that is relative to the list element.\r\n   *\r\n   * @return The slide position.\r\n   */\r\n  function pos(): number {\r\n    const first = Components.Slides.get()[ 0 ];\r\n    const left  = resolve( 'left' );\r\n    return first ? abs( rect( slide )[ left ] - rect( first.slide )[ left ] ) : 0;\r\n  }\r\n\r\n  /**\r\n   * Returns width of the slide in a horizontal carousel, or height in a vertical one.\r\n   *\r\n   * @return Width of height of the slide.\r\n   */\r\n  function size(): number {\r\n    return rect( slide )[ resolve( 'width' ) ];\r\n  }\r\n\r\n  const self = {\r\n    index,\r\n    slideIndex,\r\n    slide,\r\n    container,\r\n    isClone,\r\n    mount,\r\n    destroy,\r\n    update,\r\n    pos,\r\n    size,\r\n    style,\r\n    isWithin,\r\n  };\r\n\r\n  return self;\r\n};\r\n","import { DATA_ATTRIBUTE } from '../../constants/project';\r\n\r\n\r\n/**\r\n * The data attribute for the autoplay interval duration.\r\n *\r\n * @since 3.5.0\r\n */\r\nexport const INTERVAL_DATA_ATTRIBUTE = `${ DATA_ATTRIBUTE }-interval`;\r\n","/**\r\n * AddEventListenerOptions for listeners that may prevent the browser scroll.\r\n *\r\n * @since 3.4.1\r\n */\r\nexport const SCROLL_LISTENER_OPTIONS = { passive: false, capture: true };\r\n","import { DATA_ATTRIBUTE } from '../../constants/project';\r\n\r\n\r\n/**\r\n * The data attribute for the src value.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const SRC_DATA_ATTRIBUTE = `${ DATA_ATTRIBUTE }-lazy`;\r\n\r\n/**\r\n * The data attribute for the srcset value.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const SRCSET_DATA_ATTRIBUTE = `${ SRC_DATA_ATTRIBUTE }-srcset`;\r\n\r\n/**\r\n * The selector string for images to load.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const IMAGE_SELECTOR = `[${ SRC_DATA_ATTRIBUTE }], [${ SRCSET_DATA_ATTRIBUTE }]`;\r\n","import { ARIA_ORIENTATION } from '../../constants/attributes';\r\nimport { TTB } from '../../constants/directions';\r\nimport {\r\n  EVENT_CLICK,\r\n  EVENT_MOUNTED,\r\n  EVENT_MOVE,\r\n  EVENT_NAVIGATION_MOUNTED,\r\n  EVENT_SLIDE_KEYDOWN,\r\n  EVENT_UPDATED,\r\n} from '../../constants/events';\r\nimport { LOOP } from '../../constants/types';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, ComponentConstructor, EventInterface } from '../../types';\r\nimport { apply, empty, includes, isUndefined, prevent, setAttribute } from '@splidejs/utils';\r\nimport { SlideComponent } from '../Slides/Slide';\r\n\r\n\r\n/**\r\n * The interface for the Sync component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface SyncComponent extends BaseComponent {\r\n  remount(): void;\r\n}\r\n\r\n/**\r\n * The keys for triggering the navigation slide.\r\n *\r\n * @since 3.0.0\r\n */\r\nconst TRIGGER_KEYS = [ ' ', 'Enter' ];\r\n\r\n/**\r\n * The component for syncing multiple sliders.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface object.\r\n *\r\n * @return A Sync component object.\r\n */\r\nexport const Sync: ComponentConstructor<SyncComponent> = ( Splide, Components, options, event ) => {\r\n  const { isNavigation, slideFocus } = options;\r\n\r\n  /**\r\n   * Stores event objects.\r\n   */\r\n  const events: EventInterface[] = [];\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    Splide.splides.forEach( target => {\r\n      if ( ! target.isParent ) {\r\n        sync( Splide, target.splide );\r\n        sync( target.splide, Splide );\r\n      }\r\n    } );\r\n\r\n    if ( isNavigation ) {\r\n      navigate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    events.forEach( event => { event.destroy() } );\r\n    empty( events );\r\n  }\r\n\r\n  /**\r\n   * Remounts the component.\r\n   *\r\n   * @internal\r\n   */\r\n  function remount(): void {\r\n    destroy();\r\n    mount();\r\n  }\r\n\r\n  /**\r\n   * Syncs the current index with a provided child splide instance.\r\n   *\r\n   * @param splide - A splide instance to sync with.\r\n   * @param target - A target splide instance.\r\n   */\r\n  function sync( splide: Splide, target: Splide ): void {\r\n    const event = splide.event.create();\r\n\r\n    event.on( EVENT_MOVE, ( index, prev, dest ) => {\r\n      target.go( target.is( LOOP ) ? dest : index );\r\n    } );\r\n\r\n    events.push( event );\r\n  }\r\n\r\n  /**\r\n   * Makes slides clickable and moves the slider to the index of clicked slide.\r\n   * Note that the direction of `menu` is implicitly `vertical` as default.\r\n   */\r\n  function navigate(): void {\r\n    const ev = event.create();\r\n    const { on } = ev;\r\n\r\n    on( EVENT_CLICK, onClick );\r\n    on( EVENT_SLIDE_KEYDOWN, onKeydown );\r\n    on( [ EVENT_MOUNTED, EVENT_UPDATED ], update );\r\n\r\n    events.push( ev );\r\n    ev.emit( EVENT_NAVIGATION_MOUNTED, Splide.splides );\r\n  }\r\n\r\n  /**\r\n   * Update attributes.\r\n   */\r\n  function update(): void {\r\n    setAttribute(\r\n      Components.Elements.list,\r\n      ARIA_ORIENTATION,\r\n      options.direction === TTB ? 'vertical' : ''\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Called when the navigation slide is clicked.\r\n   *\r\n   * @param Slide - A clicked Slide component.\r\n   */\r\n  function onClick( Slide: SlideComponent ): void {\r\n    Splide.go( Slide.index );\r\n  }\r\n\r\n  /**\r\n   * Called when any key is pressed on the navigation slide.\r\n   *\r\n   * @param Slide - A Slide component.\r\n   * @param e     - A KeyboardEvent object.\r\n   */\r\n  function onKeydown( Slide: SlideComponent, e: KeyboardEvent ): void {\r\n    if ( includes( TRIGGER_KEYS, e.key ) ) {\r\n      onClick( Slide );\r\n      prevent( e );\r\n    }\r\n  }\r\n\r\n  return {\r\n    setup: apply(\r\n      Components.Breakpoints.set,\r\n      { slideFocus: isUndefined( slideFocus ) ? isNavigation : slideFocus },\r\n      true\r\n    ),\r\n    mount,\r\n    destroy,\r\n    remount,\r\n  };\r\n};\r\n","import { ComponentConstructor } from '../types';\r\n\r\nimport { Breakpoints } from './Breakpoints/Breakpoints';\r\nimport { Direction } from './Direction/Direction';\r\nimport { Elements } from './Elements/Elements';\r\nimport { Slides } from './Slides/Slides';\r\nimport { Layout } from './Layout/Layout';\r\nimport { Clones } from './Clones/Clones';\r\nimport { Move } from './Move/Move';\r\nimport { Controller } from './Controller/Controller';\r\nimport { Arrows } from './Arrows/Arrows';\r\nimport { Autoplay } from './Autoplay/Autoplay';\r\nimport { Scroll } from './Scroll/Scroll';\r\nimport { Drag } from './Drag/Drag';\r\nimport { Keyboard } from './Keyboard/Keyboard';\r\nimport { LazyLoad } from './LazyLoad/LazyLoad';\r\nimport { Pagination } from './Pagination/Pagination';\r\nimport { Sync } from './Sync/Sync';\r\nimport { Wheel } from './Wheel/Wheel';\r\nimport { Live } from './Live/Live';\r\n\r\nexport { Breakpoints } from './Breakpoints/Breakpoints';\r\nexport { Direction }   from './Direction/Direction';\r\nexport { Elements }    from './Elements/Elements';\r\nexport { Slides }      from './Slides/Slides';\r\nexport { Layout }      from './Layout/Layout';\r\nexport { Clones }      from './Clones/Clones';\r\nexport { Move }        from './Move/Move';\r\nexport { Controller }  from './Controller/Controller';\r\nexport { Arrows }      from './Arrows/Arrows';\r\nexport { Autoplay }    from './Autoplay/Autoplay';\r\nexport { Scroll }      from './Scroll/Scroll';\r\nexport { Drag }        from './Drag/Drag';\r\nexport { Keyboard }    from './Keyboard/Keyboard';\r\nexport { LazyLoad }    from './LazyLoad/LazyLoad';\r\nexport { Pagination }  from './Pagination/Pagination';\r\nexport { Sync }        from './Sync/Sync';\r\nexport { Wheel }       from './Wheel/Wheel';\r\nexport { Live }        from './Live/Live';\r\n\r\n\r\n/**\r\n * The collection of core component constructors.\r\n *\r\n * @since 5.0.0\r\n */\r\nexport const COMPONENTS: Record<string, ComponentConstructor> = {\r\n  Breakpoints,\r\n  Direction,\r\n  Elements,\r\n  Slides,\r\n  Layout,\r\n  Clones,\r\n  Move,\r\n  Controller,\r\n  Arrows,\r\n  Autoplay,\r\n  Scroll,\r\n  Drag,\r\n  Keyboard,\r\n  LazyLoad,\r\n  Pagination,\r\n  Sync,\r\n  Wheel,\r\n  Live,\r\n};","import { ALL_ATTRIBUTES, ARIA_LABEL, ARIA_LABELLEDBY, ARIA_ROLEDESCRIPTION, ROLE } from '../../constants/attributes';\r\nimport {\r\n  CLASS_ACTIVE,\r\n  CLASS_ARROW_NEXT,\r\n  CLASS_ARROW_PREV,\r\n  CLASS_ARROWS,\r\n  CLASS_CLONE,\r\n  CLASS_FOCUS_IN,\r\n  CLASS_LIST,\r\n  CLASS_PAGINATION,\r\n  CLASS_PROGRESS_BAR,\r\n  CLASS_ROOT,\r\n  CLASS_SLIDE,\r\n  CLASS_TOGGLE,\r\n  CLASS_TRACK,\r\n} from '../../constants/classes';\r\nimport { EVENT_REFRESH, EVENT_UPDATED } from '../../constants/events';\r\nimport { PROJECT_CODE } from '../../constants/project';\r\nimport { BaseComponent, ComponentConstructor } from '../../types';\r\nimport {\r\n  addClass,\r\n  assign,\r\n  child,\r\n  children,\r\n  closest,\r\n  empty,\r\n  getAttribute,\r\n  push,\r\n  query,\r\n  removeAttribute,\r\n  removeClass,\r\n  setAttribute,\r\n  toggleClass,\r\n  uniqueId,\r\n} from '@splidejs/utils';\r\nimport { assert } from '../../utils';\r\nimport { POINTER_DOWN_EVENTS } from '../Drag/constants';\r\n\r\n\r\n/**\r\n * The interface for elements which the slider consists of.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ElementCollection {\r\n  root: HTMLElement;\r\n  track: HTMLElement;\r\n  list: HTMLElement;\r\n  slides: HTMLElement[];\r\n  arrows?: HTMLElement;\r\n  pagination?: HTMLUListElement;\r\n  prev?: HTMLButtonElement;\r\n  next?: HTMLButtonElement;\r\n  bar?: HTMLElement;\r\n  toggle?: HTMLElement;\r\n}\r\n\r\n/**\r\n * The interface for the Elements component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ElementsComponent extends BaseComponent, Readonly<ElementCollection> {\r\n}\r\n\r\n/**\r\n * The component that collects and handles elements which the slider consists of.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return An Elements component object.\r\n */\r\nexport const Elements: ComponentConstructor<ElementsComponent> = ( Splide, Components, options, event ) => {\r\n  const { on, bind } = event;\r\n  const { root } = Splide;\r\n  const { i18n } = options;\r\n  const elements: ElementCollection = {} as ElementCollection;\r\n\r\n  /**\r\n   * Stores all slide elements.\r\n   */\r\n  const slides: HTMLElement[] = [];\r\n\r\n  /**\r\n   * Stores all root classes.\r\n   */\r\n  let rootClasses: string[] = [];\r\n\r\n  /**\r\n   * Stores all list classes.\r\n   */\r\n  let trackClasses: string[] = [];\r\n\r\n  /**\r\n   * The track element.\r\n   */\r\n  let track: HTMLElement;\r\n\r\n  /**\r\n   * The list element.\r\n   */\r\n  let list: HTMLElement;\r\n\r\n  /**\r\n   * Turns into `true` when detecting keydown, and `false` when detecting pointerdown.\r\n   */\r\n  let isUsingKey: boolean;\r\n\r\n  /**\r\n   * Called when the component is constructed.\r\n   */\r\n  function setup(): void {\r\n    collect();\r\n    init();\r\n    update();\r\n  }\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    on( EVENT_REFRESH, destroy );\r\n    on( EVENT_REFRESH, setup );\r\n    on( EVENT_UPDATED, update );\r\n\r\n    bind( document, `${ POINTER_DOWN_EVENTS } keydown`, e => {\r\n      isUsingKey = e.type === 'keydown';\r\n    }, { capture: true } );\r\n\r\n    bind( root, 'focusin', () => {\r\n      toggleClass( root, CLASS_FOCUS_IN, !! isUsingKey );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   *\r\n   * @param completely - Whether to destroy the component completely or not.\r\n   */\r\n  function destroy( completely?: boolean ): void {\r\n    const attrs = ALL_ATTRIBUTES.concat( 'style' );\r\n\r\n    empty( slides );\r\n    removeClass( root, rootClasses );\r\n    removeClass( track, trackClasses );\r\n    removeAttribute( [ track, list ], attrs );\r\n    removeAttribute( root, completely ? attrs : [ 'style', ARIA_ROLEDESCRIPTION ] );\r\n  }\r\n\r\n  /**\r\n   * Updates the status of elements.\r\n   */\r\n  function update(): void {\r\n    removeClass( root, rootClasses );\r\n    removeClass( track, trackClasses );\r\n\r\n    rootClasses  = getClasses( CLASS_ROOT );\r\n    trackClasses = getClasses( CLASS_TRACK );\r\n\r\n    addClass( root, rootClasses );\r\n    addClass( track, trackClasses );\r\n\r\n    setAttribute( root, ARIA_LABEL, options.label );\r\n    setAttribute( root, ARIA_LABELLEDBY, options.labelledby );\r\n  }\r\n\r\n  /**\r\n   * Collects elements which the slider consists of.\r\n   */\r\n  function collect(): void {\r\n    track = find( CLASS_TRACK );\r\n    list  = child( track, `.${ CLASS_LIST }` );\r\n\r\n    assert( track && list, 'A track/list element is missing.' );\r\n    push( slides, children( list, `.${ CLASS_SLIDE }:not(.${ CLASS_CLONE })` ) );\r\n\r\n    assign( elements, {\r\n      root,\r\n      track,\r\n      list,\r\n      slides,\r\n      arrows    : find( CLASS_ARROWS ),\r\n      pagination: find( CLASS_PAGINATION ),\r\n      prev      : find( CLASS_ARROW_PREV ),\r\n      next      : find( CLASS_ARROW_NEXT ),\r\n      bar       : find( CLASS_PROGRESS_BAR ),\r\n      toggle    : find( CLASS_TOGGLE ),\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Initializes essential elements.\r\n   * Note that do not change the role of the root element,\r\n   * which removes the region from the accessibility tree.\r\n   */\r\n  function init(): void {\r\n    const id   = root.id || uniqueId( PROJECT_CODE );\r\n    const role = options.role;\r\n\r\n    root.id  = id;\r\n    track.id = track.id || `${ id }-track`;\r\n    list.id  = list.id || `${ id }-list`;\r\n\r\n    if ( ! getAttribute( root, ROLE ) && root.tagName !== 'SECTION' && role ) {\r\n      setAttribute( root, ROLE, role );\r\n    }\r\n\r\n    setAttribute( root, ARIA_ROLEDESCRIPTION, i18n.carousel );\r\n    setAttribute( list, ROLE, 'presentation' );\r\n  }\r\n\r\n  /**\r\n   * Finds an element only in this slider, ignoring elements in a nested slider.\r\n   *\r\n   * @param className - A class name.\r\n   *\r\n   * @return A found element or null.\r\n   */\r\n  function find( className: string ): HTMLElement | undefined {\r\n    const elm = query<HTMLElement>( root, `.${ className }` );\r\n    return elm && closest( elm, `.${ CLASS_ROOT }` ) === root ? elm : undefined;\r\n  }\r\n\r\n  /**\r\n   * Return an array with modifier classes.\r\n   *\r\n   * @param base - A base class name.\r\n   *\r\n   * @return An array with classes.\r\n   */\r\n  function getClasses( base: string ): string[] {\r\n    return [\r\n      `${ base }--${ options.type }`,\r\n      `${ base }--${ options.direction }`,\r\n      options.drag && `${ base }--draggable`,\r\n      options.isNavigation && `${ base }--nav`,\r\n      base === CLASS_ROOT && CLASS_ACTIVE,\r\n    ];\r\n  }\r\n\r\n  return assign( elements, {\r\n    setup,\r\n    mount,\r\n    destroy,\r\n  } );\r\n};\r\n","import { EVENT_REFRESH, EVENT_RESIZE } from '../../constants/events';\r\nimport { AnyFunction, BaseComponent, ComponentConstructor } from '../../types';\r\nimport {\r\n  addClass,\r\n  append,\r\n  apply,\r\n  before,\r\n  between,\r\n  CSSProperties,\r\n  empty,\r\n  forEach as forEachItem,\r\n  includes,\r\n  isFunction,\r\n  isHTMLElement,\r\n  isString,\r\n  matches,\r\n  parseHtml,\r\n  queryAll,\r\n  removeNode,\r\n  toArray,\r\n} from '@splidejs/utils';\r\nimport { Slide, SlideComponent } from './Slide';\r\n\r\n\r\n/**\r\n * The interface for the Slides component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface SlidesComponent extends BaseComponent {\r\n  update(): void;\r\n  register( slide: HTMLElement, index: number, slideIndex: number ): void;\r\n  get( excludeClones?: boolean ): SlideComponent[];\r\n  getIn( page: number ): SlideComponent[];\r\n  getAt( index: number ): SlideComponent | undefined;\r\n  add( slide: string | Element | Array<string | Element>, index?: number ): void;\r\n  remove( selector: SlideMatcher ): void;\r\n  forEach( iteratee: SlidesIteratee, excludeClones?: boolean ): void;\r\n  filter( matcher: SlideMatcher ): SlideComponent[];\r\n  style( prop: string, value: string | number, useContainer?: boolean ): void\r\n  getLength( excludeClones?: boolean ): number;\r\n  isEnough(): boolean;\r\n}\r\n\r\n/**\r\n * The iteratee function for Slides.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport type SlidesIteratee = ( Slide: SlideComponent, index: number, Slides: SlideComponent[] ) => void\r\n\r\n/**\r\n * The predicate function for Slides.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport type SlidesPredicate = ( Slide: SlideComponent, index: number, Slides: SlideComponent[] ) => any\r\n\r\n/**\r\n * The type for filtering SlideComponent objects.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport type SlideMatcher = number | number[] | string | SlidesPredicate;\r\n\r\n/**\r\n * The component for managing all slides include clones.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return An Slides component object.\r\n */\r\nexport const Slides: ComponentConstructor<SlidesComponent> = ( Splide, Components, options, event ) => {\r\n  const { on, emit, bind } = event;\r\n  const { slides, list } = Components.Elements;\r\n\r\n  /**\r\n   * Stores all SlideComponent objects.\r\n   */\r\n  const Slides: SlideComponent[] = [];\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on( EVENT_REFRESH, destroy );\r\n    on( EVENT_REFRESH, init );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   */\r\n  function init(): void {\r\n    slides.forEach( ( slide, index ) => { register( slide, index, -1 ) } );\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    forEach( Slide => { Slide.destroy() } );\r\n    empty( Slides );\r\n  }\r\n\r\n  /**\r\n   * Manually updates the status of all slides.\r\n   */\r\n  function update(): void {\r\n    forEach( Slide => { Slide.update() } );\r\n  }\r\n\r\n  /**\r\n   * Registers a slide element and creates a Slide object.\r\n   * Needs to sort every time when a new slide is registered especially for clones.\r\n   *\r\n   * @param slide      - A slide element to register.\r\n   * @param index      - A slide index.\r\n   * @param slideIndex - A slide index for clones. This must be `-1` for regular slides.\r\n   */\r\n  function register( slide: HTMLElement, index: number, slideIndex: number ): void {\r\n    const object = Slide( Splide, index, slideIndex, slide );\r\n    object.mount();\r\n    Slides.push( object );\r\n    Slides.sort( ( Slide1, Slide2 ) => Slide1.index - Slide2.index );\r\n  }\r\n\r\n  /**\r\n   * Returns all Slide objects.\r\n   *\r\n   * @param excludeClones - Optional. Determines whether to exclude clones or not.\r\n   *\r\n   * @return An array with Slide objects.\r\n   */\r\n  function get( excludeClones?: boolean ): SlideComponent[] {\r\n    return excludeClones ? filter( Slide => ! Slide.isClone ) : Slides;\r\n  }\r\n\r\n  /**\r\n   * Returns slides in the specified page.\r\n   *\r\n   * @param page - A page index.\r\n   *\r\n   * @return An array with slides that belong to the page.\r\n   */\r\n  function getIn( page: number ): SlideComponent[] {\r\n    const { Controller } = Components;\r\n    const index = Controller.toIndex( page );\r\n    const max   = Controller.hasFocus() ? 1 : options.perPage;\r\n    return filter( Slide => between( Slide.index, index, index + max - 1 ) );\r\n  }\r\n\r\n  /**\r\n   * Returns a Slide object at the specified index.\r\n   *\r\n   * @param index - A slide index.\r\n   *\r\n   * @return A Slide object if available, or otherwise `undefined`.\r\n   */\r\n  function getAt( index: number ): SlideComponent | undefined {\r\n    return filter( index )[ 0 ];\r\n  }\r\n\r\n  /**\r\n   * Inserts a slide or slides at a specified index.\r\n   *\r\n   * @param items - A slide element, an HTML string or an array with them.\r\n   * @param index - Optional. An index to insert the slide at. If omitted, appends it to the list.\r\n   */\r\n  function add( items: string | Element | Array<string | Element>, index?: number ): void {\r\n    forEachItem( items, slide => {\r\n      if ( isString( slide ) ) {\r\n        slide = parseHtml( slide );\r\n      }\r\n\r\n      if ( isHTMLElement( slide ) ) {\r\n        const ref = slides[ index ];\r\n        ref ? before( slide, ref ) : append( list, slide );\r\n        addClass( slide, options.classes.slide );\r\n        observeImages( slide, apply( emit, EVENT_RESIZE ) );\r\n      }\r\n    } );\r\n\r\n    emit( EVENT_REFRESH );\r\n  }\r\n\r\n  /**\r\n   * Removes slides that match the matcher\r\n   * that can be an index, an array with indices, a selector, or an iteratee function.\r\n   *\r\n   * @param matcher - An index, an array with indices, a selector string, or an iteratee function.\r\n   */\r\n  function remove( matcher: SlideMatcher ): void {\r\n    removeNode( filter( matcher ).map( Slide => Slide.slide ) );\r\n    emit( EVENT_REFRESH );\r\n  }\r\n\r\n  /**\r\n   * Iterates over Slide objects by the iteratee function.\r\n   *\r\n   * @param iteratee      - An iteratee function that takes a Slide object, an index and an array with Slides.\r\n   * @param excludeClones - Optional. Determines whether to exclude clones or not.\r\n   */\r\n  function forEach( iteratee: SlidesIteratee, excludeClones?: boolean ): void {\r\n    get( excludeClones ).forEach( iteratee );\r\n  }\r\n\r\n  /**\r\n   * Filters Slides by the matcher\r\n   * that can be an index, an array with indices, a selector, or a predicate function.\r\n   *\r\n   * @param matcher - An index, an array with indices, a selector string, or a predicate function.\r\n   *\r\n   * @return An array with SlideComponent objects.\r\n   */\r\n  function filter( matcher: SlideMatcher ): SlideComponent[] {\r\n    return Slides.filter( isFunction( matcher )\r\n      ? matcher\r\n      : Slide => isString( matcher )\r\n        ? matches( Slide.slide, matcher )\r\n        : includes( toArray( matcher ), Slide.index )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Adds a CSS rule to all slides or containers.\r\n   *\r\n   * @param prop         - A property name.\r\n   * @param value        - A CSS value to add.\r\n   * @param useContainer - Optional. Determines whether to apply the rule to the container or not.\r\n   */\r\n  function style( prop: CSSProperties, value: string | number, useContainer?: boolean ): void {\r\n    forEach( Slide => { Slide.style( prop, value, useContainer ) } );\r\n  }\r\n\r\n  /**\r\n   * Invokes the callback after all images in the element are loaded.\r\n   *\r\n   * @param elm      - An element that may contain images.\r\n   * @param callback - A callback function.\r\n   */\r\n  function observeImages( elm: Element, callback: AnyFunction ): void {\r\n    const images = queryAll( elm, 'img' );\r\n    let { length } = images;\r\n\r\n    if ( length ) {\r\n      images.forEach( img => {\r\n        bind( img, 'load error', () => {\r\n          if ( ! --length ) {\r\n            callback();\r\n          }\r\n        } );\r\n      } );\r\n    } else {\r\n      callback();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the length of slides.\r\n   *\r\n   * @param excludeClones - Optional. Determines whether to exclude clones or not.\r\n   *\r\n   * @return The length of slides.\r\n   */\r\n  function getLength( excludeClones?: boolean ): number {\r\n    return excludeClones ? slides.length : Slides.length;\r\n  }\r\n\r\n  /**\r\n   * Checks if the number of slides is over than the `perPage` option, including clones.\r\n   *\r\n   * @return `true` if there are enough slides, or otherwise `false`.\r\n   */\r\n  function isEnough(): boolean {\r\n    return Slides.length > options.perPage;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy,\r\n    update,\r\n    register,\r\n    get,\r\n    getIn,\r\n    getAt,\r\n    add,\r\n    remove,\r\n    forEach,\r\n    filter,\r\n    style,\r\n    getLength,\r\n    isEnough,\r\n  };\r\n};\r\n","import { TTB } from '../../constants/directions';\r\nimport { EVENT_OVERFLOW, EVENT_REFRESH, EVENT_RESIZE, EVENT_RESIZED, EVENT_UPDATED } from '../../constants/events';\r\nimport { BaseComponent, ComponentConstructor } from '../../types';\r\nimport { apply, isObject, rect, style, Throttle, toggleClass, unit } from '@splidejs/utils';\r\nimport { assert } from '../../utils';\r\nimport { FADE } from '../../constants/types';\r\nimport { CLASS_OVERFLOW } from '../../constants/classes';\r\n\r\n\r\n/**\r\n * The interface for the Layout component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface LayoutComponent extends BaseComponent {\r\n  listSize(): number;\r\n  slideSize( index: number, withoutGap?: boolean ): number;\r\n  sliderSize( withoutGap?: boolean ): number;\r\n  totalSize( index?: number, withoutGap?: boolean ): number;\r\n  getPadding( right: boolean ): number;\r\n  isOverflow(): boolean;\r\n\r\n  /** @internal */\r\n  resize( force?: boolean ): void;\r\n}\r\n\r\n/**\r\n * The component that adjusts slider styles and provides methods for dimensions.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return An Layout component object.\r\n */\r\nexport const Layout: ComponentConstructor<LayoutComponent> = ( Splide, Components, options, event ) => {\r\n  const { on, bind, emit } = event;\r\n  const { Slides } = Components;\r\n  const { resolve } = Components.Direction;\r\n  const { root, track, list } = Components.Elements;\r\n  const { getAt, style: styleSlides } = Slides;\r\n\r\n  /**\r\n   * Indicates whether the slider direction is vertical or not.\r\n   */\r\n  let vertical: boolean;\r\n\r\n  /**\r\n   * Keeps the DOMRect object of the root element.\r\n   */\r\n  let rootRect: DOMRect;\r\n\r\n  /**\r\n   * Turns into `true` when the carousel is wider than the list.\r\n   */\r\n  let overflow: boolean;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    bind( window, 'resize load', Throttle( apply( emit, EVENT_RESIZE ) ) );\r\n    on( [ EVENT_UPDATED, EVENT_REFRESH ], init );\r\n    on( EVENT_RESIZE, resize );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component on `mount` or `updated`.\r\n   * Uses `max-width` for the root to prevent the slider from exceeding the parent element.\r\n   */\r\n  function init(): void {\r\n    vertical = options.direction === TTB;\r\n\r\n    style( root, 'maxWidth', unit( options.width ) );\r\n    style( track, resolve( 'paddingLeft' ), cssPadding( false ) );\r\n    style( track, resolve( 'paddingRight' ), cssPadding( true ) );\r\n\r\n    resize( true );\r\n  }\r\n\r\n  /**\r\n   * Updates dimensions of some elements when the carousel is resized.\r\n   * Also checks the carousel size and emits `overflow` events when it exceeds the list width.\r\n   *\r\n   * @param force - Skips checking the root dimension change and always performs the resizing process.\r\n   */\r\n  function resize( force?: boolean ): void {\r\n    const newRect = rect( root );\r\n\r\n    if ( force || rootRect.width !== newRect.width || rootRect.height !== newRect.height ) {\r\n      style( track, 'height', cssTrackHeight() );\r\n\r\n      styleSlides( resolve( 'marginRight' ), unit( options.gap ) );\r\n      styleSlides( 'width', cssSlideWidth() );\r\n      styleSlides( 'height', cssSlideHeight(), true );\r\n\r\n      rootRect = newRect;\r\n      emit( EVENT_RESIZED );\r\n\r\n      if ( overflow !== ( overflow = isOverflow() ) ) {\r\n        toggleClass( root, CLASS_OVERFLOW, overflow );\r\n        emit( EVENT_OVERFLOW, overflow );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses the padding option and returns the value for each side.\r\n   * This method returns `paddingTop` or `paddingBottom` for the vertical slider.\r\n   *\r\n   * @param right - Determines whether to get `paddingRight/Bottom` or `paddingLeft/Top`.\r\n   *\r\n   * @return The padding value as a CSS string.\r\n   */\r\n  function cssPadding( right: boolean ): string {\r\n    const { padding } = options;\r\n    const prop = resolve( right ? 'right' : 'left' );\r\n    return padding\r\n      && unit( padding[ prop ] || ( isObject( padding ) ? 0 : padding ) )\r\n      || '0px';\r\n  }\r\n\r\n  /**\r\n   * Returns the height of the track element as a CSS string.\r\n   *\r\n   * @return The height of the track.\r\n   */\r\n  function cssTrackHeight(): string {\r\n    let height = '';\r\n\r\n    if ( vertical ) {\r\n      height = cssHeight();\r\n      assert( height, 'height or heightRatio is missing.' );\r\n      height = `calc(${ height } - ${ cssPadding( false ) } - ${ cssPadding( true ) })`;\r\n    }\r\n\r\n    return height;\r\n  }\r\n\r\n  /**\r\n   * Converts options related with height to a CSS string.\r\n   *\r\n   * @return The height as a CSS string if available, or otherwise an empty string.\r\n   */\r\n  function cssHeight(): string {\r\n    return unit( options.height || rect( list ).width * options.heightRatio );\r\n  }\r\n\r\n  /**\r\n   * Returns the width of the slide as a CSS string.\r\n   *\r\n   * @return The width of the slide.\r\n   */\r\n  function cssSlideWidth(): string | null {\r\n    return options.autoWidth\r\n      ? null\r\n      : unit( options.fixedWidth ) || ( vertical ? '' : cssSlideSize() );\r\n  }\r\n\r\n  /**\r\n   * Returns the height of the slide as a CSS string.\r\n   *\r\n   * @return The height of the slide.\r\n   */\r\n  function cssSlideHeight(): string | null {\r\n    return unit( options.fixedHeight )\r\n      || ( vertical ? ( options.autoHeight ? null : cssSlideSize() ) : cssHeight() );\r\n  }\r\n\r\n  /**\r\n   * Returns the CSS string for slide width or height without gap.\r\n   *\r\n   * @return The CSS string for slide width or height.\r\n   */\r\n  function cssSlideSize(): string {\r\n    const gap = unit( options.gap );\r\n    return `calc((100%${ gap && ` + ${ gap }` })/${ options.perPage || 1 }${ gap && ` - ${ gap }` })`;\r\n  }\r\n\r\n  /**\r\n   * Returns the list width for the horizontal slider, or the height for the vertical slider.\r\n   *\r\n   * @return The size of the list element in pixel.\r\n   */\r\n  function listSize(): number {\r\n    return rect( list )[ resolve( 'width' ) ];\r\n  }\r\n\r\n  /**\r\n   * Returns the slide width for the horizontal slider, or the height for the vertical slider.\r\n   *\r\n   * @param index      - Optional. A slide index.\r\n   * @param withoutGap - Optional. Determines whether to exclude the gap amount or not.\r\n   *\r\n   * @return The size of the specified slide element in pixel.\r\n   */\r\n  function slideSize( index = 0, withoutGap?: boolean ): number {\r\n    const Slide = getAt( index );\r\n    return ( Slide ? Slide.size() : 0 ) + ( withoutGap ? 0 : getGap() );\r\n  }\r\n\r\n  /**\r\n   * Returns the total width or height of slides from the head of the slider to the specified index.\r\n   * This includes sizes of clones before the first slide.\r\n   *\r\n   * @param index      - A slide index. If omitted, uses the last index.\r\n   * @param withoutGap - Optional. Determines whether to exclude the last gap or not.\r\n   *\r\n   * @return The total width of slides in the horizontal slider, or the height in the vertical one.\r\n   */\r\n  function totalSize( index: number, withoutGap?: boolean ): number {\r\n    const Slide = getAt( index );\r\n    return Slide ? Slide.pos() + Slide.size() + ( withoutGap ? 0 : getGap() ) : 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the slider size without clones before the first slide.\r\n   * Do not use the clone's size because it's unstable while initializing and refreshing process.\r\n   *\r\n   * @param withoutGap - Optional. Determines whether to exclude the last gap or not.\r\n   *\r\n   * @return The width or height of the slider without clones.\r\n   */\r\n  function sliderSize( withoutGap?: boolean ): number {\r\n    return totalSize( Splide.length - 1 ) - totalSize( 0 ) + slideSize( 0, withoutGap );\r\n  }\r\n\r\n  /**\r\n   * Computes the gap by the first and second slides,\r\n   * without using `margin` for the CSS grid `gap`.\r\n   * This always returns 0 if the number of slides is less than 2.\r\n   *\r\n   * @return The gap value in pixel.\r\n   */\r\n  function getGap(): number {\r\n    const first  = getAt( 0 );\r\n    const second = getAt( 1 );\r\n    return first && second ? second.pos() - first.pos() - first.size() : 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the padding value.\r\n   * This method resolves the difference of the direction.\r\n   *\r\n   * @param right - Determines whether to get `paddingRight/Bottom` or `paddingLeft/Top`.\r\n   *\r\n   * @return The padding value in pixel.\r\n   */\r\n  function getPadding( right: boolean ): number {\r\n    return parseFloat( style(\r\n      track,\r\n      resolve( `padding${ right ? 'Right' : 'Left' }` )\r\n    ) ) || 0;\r\n  }\r\n\r\n  /**\r\n   * Checks if the carousel is wider than the list.\r\n   * This method always returns `true` for a fade carousel.\r\n   *\r\n   * @return `true` if the carousel is wider than the list, or otherwise `false`.\r\n   */\r\n  function isOverflow(): boolean {\r\n    return Splide.is( FADE ) || sliderSize( true ) > listSize();\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    resize,\r\n    listSize,\r\n    slideSize,\r\n    sliderSize,\r\n    totalSize,\r\n    getPadding,\r\n    isOverflow,\r\n  };\r\n};\r\n","import { EVENT_REFRESH, EVENT_RESIZE, EVENT_UPDATED } from '../../constants/events';\r\nimport { LOOP } from '../../constants/types';\r\nimport { BaseComponent, ComponentConstructor } from '../../types';\r\nimport { addClass, append, before, ceil, empty, isUndefined, pad, push, rect, removeNode } from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The interface for the Clone component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ClonesComponent extends BaseComponent {\r\n}\r\n\r\n/**\r\n * The multiplier to determine the number of clones.\r\n *\r\n * @since 4.0.0\r\n */\r\nexport const MULTIPLIER = 2;\r\n\r\n/**\r\n * The component that generates clones for the loop slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Clones component object.\r\n */\r\nexport const Clones: ComponentConstructor<ClonesComponent> = ( Splide, Components, options, event ) => {\r\n  const { on } = event;\r\n  const { Elements, Slides, Layout: { resize } } = Components;\r\n  const { resolve } = Components.Direction;\r\n\r\n  /**\r\n   * Stores all cloned elements.\r\n   */\r\n  const clones: HTMLElement[] = [];\r\n\r\n  /**\r\n   * Keeps the current number of clones.\r\n   */\r\n  let cloneCount: number;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   * Needs to remount the component on refresh, otherwise `refresh` event will be triggered again while refreshing.\r\n   */\r\n  function mount(): void {\r\n    on( EVENT_REFRESH, remount );\r\n    on( [ EVENT_UPDATED, EVENT_RESIZE ], observe );\r\n\r\n    if ( ( cloneCount = computeCloneCount() ) ) {\r\n      generate( cloneCount );\r\n      resize( true );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remounts the component.\r\n   */\r\n  function remount(): void {\r\n    destroy();\r\n    mount();\r\n    resize( true );\r\n  }\r\n\r\n  /**\r\n   * Destroys clones.\r\n   */\r\n  function destroy(): void {\r\n    removeNode( clones );\r\n    empty( clones );\r\n    event.destroy();\r\n  }\r\n\r\n  /**\r\n   * Observes the required clone count and refreshes the slider if necessary.\r\n   * If clones are disabled by `0`, moves the carousel to the first slide.\r\n   */\r\n  function observe(): void {\r\n    const count = computeCloneCount();\r\n\r\n    if ( cloneCount !== count ) {\r\n      if ( cloneCount < count || ! count ) {\r\n        ! count && Splide.go( 0 );\r\n        event.emit( EVENT_REFRESH );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates the specified number of clones.\r\n   *\r\n   * @param count - The number of clones to generate for each side.\r\n   */\r\n  function generate( count: number ): void {\r\n    const slides = Slides.get().slice();\r\n    const { length } = slides;\r\n\r\n    if ( length ) {\r\n      while ( slides.length < count ) {\r\n        push( slides, slides );\r\n      }\r\n\r\n      push( slides.slice( -count ), slides.slice( 0, count ) ).forEach( ( Slide, index ) => {\r\n        const isHead = index < count;\r\n        const clone  = cloneDeep( Slide.slide, index );\r\n        isHead ? before( clone, slides[ 0 ].slide ) : append( Elements.list, clone );\r\n        push( clones, clone );\r\n        Slides.register( clone, index - count + ( isHead ? 0 : length ), Slide.index );\r\n      } );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deeply clones the provided element with removing the ID attribute.\r\n   *\r\n   * @param elm   - An element to clone.\r\n   * @param index - An index of the clone.\r\n   *\r\n   * @return A cloned element.\r\n   */\r\n  function cloneDeep( elm: HTMLElement, index: number ): HTMLElement {\r\n    const clone = elm.cloneNode( true ) as HTMLElement;\r\n    addClass( clone, options.classes.clone );\r\n    clone.id = `${ Splide.root.id }-clone${ pad( index + 1 ) }`;\r\n    return clone;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of elements to generate.\r\n   * This always returns 0 if the slider type is not `'loop'`.\r\n   *\r\n   * @return The number of clones.\r\n   */\r\n  function computeCloneCount(): number {\r\n    let { clones } = options;\r\n\r\n    if ( ! Splide.is( LOOP ) ) {\r\n      clones = 0;\r\n    } else if ( isUndefined( clones ) ) {\r\n      const fixedSize  = options[ resolve( 'fixedWidth' ) ] && Components.Layout.slideSize( 0 );\r\n      const fixedCount = fixedSize && ceil( rect( Elements.track )[ resolve( 'width' ) ] / fixedSize );\r\n      clones = fixedCount || ( options[ resolve( 'autoWidth' ) ] && Splide.length ) || options.perPage * MULTIPLIER;\r\n    }\r\n\r\n    return clones;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy,\r\n  };\r\n};\r\n","import {\r\n  EVENT_MOUNTED,\r\n  EVENT_MOVE,\r\n  EVENT_MOVED,\r\n  EVENT_REFRESH,\r\n  EVENT_RESIZED,\r\n  EVENT_SHIFTED,\r\n  EVENT_UPDATED,\r\n} from '../../constants/events';\r\nimport { IDLE, MOVING } from '../../constants/states';\r\nimport { FADE, LOOP, SLIDE } from '../../constants/types';\r\nimport { AnyFunction, BaseComponent, ComponentConstructor, TransitionComponent } from '../../types';\r\nimport { abs, ceil, clamp, rect, style } from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The interface for the Move component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface MoveComponent extends BaseComponent {\r\n  move( dest: number, index: number, prev: number, callback?: AnyFunction ): void;\r\n  jump( index: number ): void;\r\n  translate( position: number, preventLoop?: boolean ): void;\r\n  shift( position: number, backwards: boolean ): number;\r\n  cancel(): void;\r\n  toIndex( position: number ): number;\r\n  toPosition( index: number, trimming?: boolean ): number;\r\n  getPosition(): number;\r\n  getLimit( max: boolean ): number;\r\n  exceededLimit( max?: boolean | undefined, position?: number ): boolean;\r\n\r\n  /** @internal */\r\n  reposition(): void;\r\n}\r\n\r\n/**\r\n * The component for moving the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Move component object.\r\n */\r\nexport const Move: ComponentConstructor<MoveComponent> = ( Splide, Components, options, event ) => {\r\n  const { on, emit } = event;\r\n  const { set } = Splide.state;\r\n  const { Slides } = Components;\r\n  const { slideSize, getPadding, listSize, sliderSize, totalSize } = Components.Layout;\r\n  const { resolve, orient } = Components.Direction;\r\n  const { list, track } = Components.Elements;\r\n\r\n  /**\r\n   * Holds the Transition component.\r\n   */\r\n  let Transition: TransitionComponent;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    Transition = Components.Transition;\r\n    on( [ EVENT_MOUNTED, EVENT_RESIZED, EVENT_UPDATED, EVENT_REFRESH ], reposition );\r\n  }\r\n\r\n  /**\r\n   * Repositions the slider.\r\n   * - Do not call `cancel()` here because LazyLoad may emit resize while transitioning.\r\n   * - iOS Safari emits window resize event while the user swipes the slider because of the bottom bar.\r\n   */\r\n  function reposition(): void {\r\n    if ( ! Components.Controller.isBusy() ) {\r\n      Components.Scroll.cancel();\r\n      jump( Splide.index );\r\n      Components.Slides.update();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Moves the slider to the dest index with the Transition component.\r\n   *\r\n   * @param dest     - A destination index to go to, including clones'.\r\n   * @param index    - A slide index.\r\n   * @param prev     - A previous index.\r\n   * @param callback - Optional. A callback function invoked after transition ends.\r\n   */\r\n  function move( dest: number, index: number, prev: number, callback?: AnyFunction ): void {\r\n    if ( dest !== index && canShift( dest > prev ) ) {\r\n      cancel();\r\n      translate( shift( getPosition(), dest > prev ), true );\r\n    }\r\n\r\n    set( MOVING );\r\n    emit( EVENT_MOVE, index, prev, dest );\r\n\r\n    Transition.start( index, () => {\r\n      set( IDLE );\r\n      emit( EVENT_MOVED, index, prev, dest );\r\n      callback && callback();\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Jumps to the slide at the specified index (silently).\r\n   *\r\n   * @param index - An index to jump to.\r\n   */\r\n  function jump( index: number ): void {\r\n    translate( toPosition( index, true ) );\r\n  }\r\n\r\n  /**\r\n   * Moves the slider to the provided position.\r\n   *\r\n   * @param position    - The position to move to.\r\n   * @param preventLoop - Optional. If `true`, sets the provided position as is.\r\n   */\r\n  function translate( position: number, preventLoop?: boolean ): void {\r\n    if ( ! Splide.is( FADE ) ) {\r\n      const destination = preventLoop ? position : loop( position );\r\n      style( list, 'transform', `translate${ resolve( 'X' ) }(${ destination }px)` );\r\n      position !== destination && emit( EVENT_SHIFTED );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Loops the provided position if it exceeds bounds (limit indices).\r\n   *\r\n   * @param position - A position to loop.\r\n   */\r\n  function loop( position: number ): number {\r\n    if ( Splide.is( LOOP ) ) {\r\n      const index       = toIndex( position );\r\n      const exceededMax = index > Components.Controller.getEnd();\r\n      const exceededMin = index < 0;\r\n\r\n      if ( exceededMin || exceededMax ) {\r\n        position = shift( position, exceededMax );\r\n      }\r\n    }\r\n\r\n    return position;\r\n  }\r\n\r\n  /**\r\n   * Adds or subtracts the slider width to the provided position.\r\n   *\r\n   * @param position  - A position to shift.\r\n   * @param backwards - Determines whether to shift the slider backwards or forwards.\r\n   *\r\n   * @return The shifted position.\r\n   */\r\n  function shift( position: number, backwards: boolean ): number {\r\n    const excess = position - getLimit( backwards );\r\n    const size   = sliderSize();\r\n    position -= orient( size * ( ceil( abs( excess ) / size ) || 1 ) ) * ( backwards ? 1 : -1 );\r\n    return position;\r\n  }\r\n\r\n  /**\r\n   * Cancels transition.\r\n   */\r\n  function cancel(): void {\r\n    translate( getPosition(), true );\r\n    Transition.cancel();\r\n  }\r\n\r\n  /**\r\n   * Returns the closest index to the position.\r\n   *\r\n   * @param position - A position to convert.\r\n   *\r\n   * @return The closest index to the position.\r\n   */\r\n  function toIndex( position: number ): number {\r\n    const slides = Slides.get();\r\n\r\n    let index       = 0;\r\n    let minDistance = Infinity;\r\n\r\n    for ( let i = 0; i < slides.length; i++ ) {\r\n      const slideIndex = slides[ i ].index;\r\n      const distance   = abs( toPosition( slideIndex, true ) - position );\r\n\r\n      if ( distance <= minDistance ) {\r\n        minDistance = distance;\r\n        index       = slideIndex;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * Converts the slide index to the position.\r\n   *\r\n   * @param index    - An index to convert.\r\n   * @param trimming - Optional. Whether to trim edge spaces or not.\r\n   *\r\n   * @return The position corresponding with the index.\r\n   */\r\n  function toPosition( index: number, trimming?: boolean ): number {\r\n    const position = orient( totalSize( index - 1 ) - offset( index ) );\r\n    return trimming ? trim( position ) : position;\r\n  }\r\n\r\n  /**\r\n   * Returns the current position.\r\n   *\r\n   * @return The position of the list element.\r\n   */\r\n  function getPosition(): number {\r\n    const left = resolve( 'left' );\r\n    return rect( list )[ left ] - rect( track )[ left ] + orient( getPadding( false ) );\r\n  }\r\n\r\n  /**\r\n   * Trims spaces on the edge of the slider.\r\n   *\r\n   * @param position - A position to trim.\r\n   *\r\n   * @return A trimmed position.\r\n   */\r\n  function trim( position: number ): number {\r\n    if ( options.trimSpace && Splide.is( SLIDE ) ) {\r\n      position = clamp( position, 0, orient( sliderSize( true ) - listSize() ) );\r\n    }\r\n\r\n    return position;\r\n  }\r\n\r\n  /**\r\n   * Returns the offset amount.\r\n   *\r\n   * @param index - An index.\r\n   */\r\n  function offset( index: number ): number {\r\n    const { focus } = options;\r\n    return focus === 'center'\r\n      ? ( listSize() - slideSize( index, true ) ) / 2\r\n      : +focus * slideSize( index ) || 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the limit number that the slider can move to.\r\n   *\r\n   * @param max - Determines whether to return the maximum or minimum limit.\r\n   *\r\n   * @return The border number.\r\n   */\r\n  function getLimit( max: boolean ): number {\r\n    return toPosition( max ? Components.Controller.getEnd() : 0, !! options.trimSpace );\r\n  }\r\n\r\n  /**\r\n   * Checks if there is enough width to shift the slider.\r\n   *\r\n   * @param backwards - `true` for checking backwards, or `false` for doing forwards.\r\n   *\r\n   * @return `true` if the slider can be shifted for the specified direction, or otherwise `false`.\r\n   */\r\n  function canShift( backwards: boolean ): boolean {\r\n    const padding = getPadding( false );\r\n    const shifted = orient( shift( getPosition(), backwards ) );\r\n\r\n    return backwards\r\n      ? shifted >= padding\r\n      : shifted <= list[ resolve( 'scrollWidth' ) ] - rect( track )[ resolve( 'width' ) ] + padding;\r\n  }\r\n\r\n  /**\r\n   * Checks if the provided position exceeds the minimum or maximum limit or not.\r\n   *\r\n   * @param max      - Optional. `true` for testing max, `false` for min, and `undefined` for both.\r\n   * @param position - Optional. A position to test. If omitted, tests the current position.\r\n   *\r\n   * @return `true` if the position exceeds the limit, or otherwise `false`.\r\n   */\r\n  function exceededLimit( max?: boolean | undefined, position = getPosition() ): boolean {\r\n    const exceededMin = max !== true && orient( position ) < orient( getLimit( false ) );\r\n    const exceededMax = max !== false && orient( position ) > orient( getLimit( true ) );\r\n    return exceededMin || exceededMax;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    move,\r\n    jump,\r\n    translate,\r\n    shift,\r\n    cancel,\r\n    toIndex,\r\n    toPosition,\r\n    getPosition,\r\n    getLimit,\r\n    exceededLimit,\r\n    reposition,\r\n  };\r\n};\r\n","import { EVENT_END_INDEX_CHANGED, EVENT_REFRESH, EVENT_RESIZED, EVENT_UPDATED } from '../../constants/events';\r\nimport { MOVING, SCROLLING } from '../../constants/states';\r\nimport { LOOP, SLIDE } from '../../constants/types';\r\nimport { AnyFunction, BaseComponent, ComponentConstructor } from '../../types';\r\nimport { apply, approximatelyEqual, between, clamp, floor, isString, isUndefined, min } from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The interface for the Controller component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ControllerComponent extends BaseComponent {\r\n  go( control: number | string, allowSameIndex?: boolean, callback?: AnyFunction ): void;\r\n  jump( control: number | string ): void;\r\n  scroll( destination: number, duration?: number, snap?: boolean, callback?: AnyFunction ): void;\r\n  getNext( destination?: boolean ): number;\r\n  getPrev( destination?: boolean ): number;\r\n  getEnd(): number;\r\n  setIndex( index: number ): void;\r\n  getIndex( prev?: boolean ): number;\r\n  toIndex( page: number ): number;\r\n  toPage( index: number ): number;\r\n  toDest( position: number ): number;\r\n  hasFocus(): boolean;\r\n  isBusy(): boolean;\r\n\r\n  /** @internal */\r\n  getAdjacent( prev: boolean, destination?: boolean ): number;\r\n}\r\n\r\n/**\r\n * The component for controlling the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Controller component object.\r\n */\r\nexport const Controller: ComponentConstructor<ControllerComponent> = ( Splide, Components, options, event ) => {\r\n  const { on, emit } = event;\r\n  const { Move } = Components;\r\n  const { getPosition, getLimit, toPosition } = Move;\r\n  const { isEnough, getLength } = Components.Slides;\r\n  const { omitEnd } = options;\r\n  const isLoop  = Splide.is( LOOP );\r\n  const isSlide = Splide.is( SLIDE );\r\n  const getNext = apply( getAdjacent, false );\r\n  const getPrev = apply( getAdjacent, true );\r\n\r\n  /**\r\n   * The current index.\r\n   */\r\n  let currIndex = options.start || 0;\r\n\r\n  /**\r\n   * The latest end index.\r\n   */\r\n  let endIndex: number;\r\n\r\n  /**\r\n   * The previous index.\r\n   */\r\n  let prevIndex = currIndex;\r\n\r\n  /**\r\n   * The latest number of slides.\r\n   */\r\n  let slideCount: number;\r\n\r\n  /**\r\n   * The latest `perMove` value.\r\n   */\r\n  let perMove: number;\r\n\r\n  /**\r\n   * The latest `perMove` value.\r\n   */\r\n  let perPage: number;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on( [ EVENT_UPDATED, EVENT_REFRESH, EVENT_END_INDEX_CHANGED ], init );\r\n    on( EVENT_RESIZED, onResized );\r\n  }\r\n\r\n  /**\r\n   * Initializes some parameters.\r\n   * Needs to check the number of slides since the current index may be out of the range after refresh.\r\n   * The process order must be Elements -> Controller -> Move.\r\n   */\r\n  function init(): void {\r\n    slideCount = getLength( true );\r\n    perMove    = options.perMove;\r\n    perPage    = options.perPage;\r\n    endIndex   = getEnd();\r\n\r\n    const end   = omitEnd ? endIndex : slideCount - 1;\r\n    const index = clamp( currIndex, 0, end );\r\n\r\n    prevIndex = index;\r\n\r\n    if ( index !== currIndex ) {\r\n      currIndex = index;\r\n      Move.reposition();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the viewport width is changed.\r\n   * The end index can change if `autoWidth` or `fixedWidth` is enabled.\r\n   */\r\n  function onResized(): void {\r\n    if ( endIndex !== getEnd() ) {\r\n      emit( EVENT_END_INDEX_CHANGED );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Moves the slider by the control pattern.\r\n   *\r\n   * @see `Splide#go()`\r\n   *\r\n   * @param control        - A control pattern.\r\n   * @param allowSameIndex - Optional. Determines whether to allow going to the current index or not.\r\n   * @param callback       - Optional. A callback function invoked after transition ends.\r\n   */\r\n  function go( control: number | string, allowSameIndex?: boolean, callback?: AnyFunction ): void {\r\n    if ( ! isBusy() ) {\r\n      const dest  = parse( control );\r\n      const index = loop( dest );\r\n\r\n      if ( index > -1 && ( allowSameIndex || index !== currIndex ) ) {\r\n        setIndex( index );\r\n        Move.move( dest, index, prevIndex, callback );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Immediately jumps to the specified index.\r\n   *\r\n   * @param control - An index where to jump.\r\n   */\r\n  function jump( control: number | string ): void {\r\n    const { set } = Components.Breakpoints;\r\n    const { speed } = options;\r\n\r\n    set( { speed: 0 } );\r\n    go( control );\r\n    set( { speed } );\r\n  }\r\n\r\n  /**\r\n   * Scrolls the slider to the specified destination with updating indices.\r\n   *\r\n   * @param destination - The position to scroll the slider to.\r\n   * @param duration    - Optional. Specifies the scroll duration.\r\n   * @param snap        - Optional. Whether to snap the slider to the closest slide or not.\r\n   * @param callback    - Optional. A callback function invoked after scroll ends.\r\n   */\r\n  function scroll( destination: number, duration?: number, snap?: boolean, callback?: AnyFunction ): void {\r\n    Components.Scroll.scroll( destination, duration, snap, () => {\r\n      const index = loop( Move.toIndex( getPosition() ) );\r\n      setIndex( omitEnd ? min( index, endIndex ) : index );\r\n      callback && callback();\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Parses the control and returns a slide index.\r\n   *\r\n   * @param control - A control pattern to parse.\r\n   *\r\n   * @return A `dest` index.\r\n   */\r\n  function parse( control: number | string ): number {\r\n    let index = currIndex;\r\n\r\n    if ( isString( control ) ) {\r\n      const [ , indicator, number ] = control.match( /([+\\-<>])(\\d+)?/ ) || [];\r\n\r\n      if ( indicator === '+' || indicator === '-' ) {\r\n        index = computeDestIndex( currIndex + +`${ indicator }${ +number || 1 }`, currIndex );\r\n      } else if ( indicator === '>' ) {\r\n        index = number ? toIndex( +number ) : getNext( true );\r\n      } else if ( indicator === '<' ) {\r\n        index = getPrev( true );\r\n      }\r\n    } else {\r\n      index = isLoop ? control : clamp( control, 0, endIndex );\r\n    }\r\n\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * Returns an adjacent destination index.\r\n   *\r\n   * @internal\r\n   *\r\n   * @param prev        - Determines whether to return a previous or next index.\r\n   * @param destination - Optional. Determines whether to get a destination index or a slide one.\r\n   *\r\n   * @return An adjacent index if available, or otherwise `-1`.\r\n   */\r\n  function getAdjacent( prev: boolean, destination?: boolean ): number {\r\n    const number = perMove || ( hasFocus() ? 1 : perPage );\r\n    const dest   = computeDestIndex( currIndex + number * ( prev ? -1 : 1 ), currIndex, ! ( perMove || hasFocus() ) );\r\n\r\n    if ( dest === -1 && isSlide ) {\r\n      if ( ! approximatelyEqual( getPosition(), getLimit( ! prev ), 1 ) ) {\r\n        return prev ? 0 : endIndex;\r\n      }\r\n    }\r\n\r\n    return destination ? dest : loop( dest );\r\n  }\r\n\r\n  /**\r\n   * Converts the desired destination index to the valid one.\r\n   * - If the `move` option is `true`, finds the dest index whose position is different with the current one.\r\n   * - This may return clone indices if the editor is the loop mode,\r\n   *   or `-1` if there is no slide to go.\r\n   * - There are still slides where the carousel can go if borders are between `from` and `dest`.\r\n   * - If `focus` is available, needs to calculate the dest index even if there are enough number of slides.\r\n   *\r\n   * @param dest     - The desired destination index.\r\n   * @param from     - A base index.\r\n   * @param snapPage - Optional. Whether to snap a page or not.\r\n   *\r\n   * @return A converted destination index, including clones.\r\n   */\r\n  function computeDestIndex( dest: number, from: number, snapPage?: boolean ): number {\r\n    if ( isEnough() || hasFocus() ) {\r\n      const index = computeMovableDestIndex( dest );\r\n\r\n      if ( index !== dest ) {\r\n        from     = dest;\r\n        dest     = index;\r\n        snapPage = false;\r\n      }\r\n\r\n      if ( dest < 0 || dest > endIndex ) {\r\n        if ( ! perMove && ( between( 0, dest, from, true ) || between( endIndex, from, dest, true ) ) ) {\r\n          dest = toIndex( toPage( dest ) );\r\n        } else {\r\n          if ( isLoop ) {\r\n            dest = snapPage\r\n              ? dest < 0 ? - ( slideCount % perPage || perPage ) : slideCount\r\n              : dest;\r\n          } else if ( options.rewind ) {\r\n            dest = dest < 0 ? endIndex : 0;\r\n          } else {\r\n            dest = -1;\r\n          }\r\n        }\r\n      } else {\r\n        if ( snapPage && dest !== from ) {\r\n          dest = toIndex( toPage( from ) + ( dest < from ? -1 : 1 ) );\r\n        }\r\n      }\r\n    } else {\r\n      dest = -1;\r\n    }\r\n\r\n    return dest;\r\n  }\r\n\r\n  /**\r\n   * Finds the dest index whose position is different with the current one for `trimSpace: 'move'`.\r\n   * This can be negative or greater than `length - 1`.\r\n   *\r\n   * @param dest - A dest index.\r\n   *\r\n   * @return A dest index.\r\n   */\r\n  function computeMovableDestIndex( dest: number ): number {\r\n    if ( isSlide && options.trimSpace === 'move' && dest !== currIndex ) {\r\n      const position = getPosition();\r\n\r\n      while ( position === toPosition( dest, true ) && between( dest, 0, Splide.length - 1, ! options.rewind ) ) {\r\n        dest < currIndex ? --dest : ++dest;\r\n      }\r\n    }\r\n\r\n    return dest;\r\n  }\r\n\r\n  /**\r\n   * Loops the provided index only in the loop mode.\r\n   *\r\n   * @param index - An index to loop.\r\n   *\r\n   * @return A looped index.\r\n   */\r\n  function loop( index: number ): number {\r\n    return isLoop ? ( index + slideCount ) % slideCount || 0 : index;\r\n  }\r\n\r\n  /**\r\n   * Returns the end index where the slider can go.\r\n   * For example, if the slider has 10 slides and the `perPage` option is 3,\r\n   * the slider can go to the slide 8 (the index is 7).\r\n   * If the `omitEnd` option is available, computes the index from the slide position.\r\n   *\r\n   * @return An end index.\r\n   */\r\n  function getEnd(): number {\r\n    let end = slideCount - ( hasFocus() || ( isLoop && perMove ) ? 1 : perPage );\r\n\r\n    while ( omitEnd && end-- > 0 ) {\r\n      if ( toPosition( slideCount - 1, true ) !== toPosition( end, true ) ) {\r\n        end++;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return clamp( end, 0, slideCount - 1 );\r\n  }\r\n\r\n  /**\r\n   * Converts the page index to the slide index.\r\n   *\r\n   * @param page - A page index to convert.\r\n   *\r\n   * @return A slide index.\r\n   */\r\n  function toIndex( page: number ): number {\r\n    return clamp( hasFocus() ? page : perPage * page, 0, endIndex );\r\n  }\r\n\r\n  /**\r\n   * Converts the slide index to the page index.\r\n   *\r\n   * @param index - An index to convert.\r\n   *\r\n   * @return A page index.\r\n   */\r\n  function toPage( index: number ): number {\r\n    return hasFocus()\r\n      ? min( index, endIndex )\r\n      : floor( ( index >= endIndex ? slideCount - 1 : index ) / perPage );\r\n  }\r\n\r\n  /**\r\n   * Converts the destination position to the dest index.\r\n   *\r\n   * @param destination - A position to convert.\r\n   *\r\n   * @return A dest index.\r\n   */\r\n  function toDest( destination: number ): number {\r\n    const closest = Move.toIndex( destination );\r\n    return isSlide ? clamp( closest, 0, endIndex ) : closest;\r\n  }\r\n\r\n  /**\r\n   * Sets a new index and retains old one.\r\n   *\r\n   * @param index - A new index to set.\r\n   */\r\n  function setIndex( index: number ): void {\r\n    if ( index !== currIndex ) {\r\n      prevIndex = currIndex;\r\n      currIndex = index;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the current/previous index.\r\n   *\r\n   * @param prev - Optional. Whether to return previous index or not.\r\n   */\r\n  function getIndex( prev?: boolean ): number {\r\n    return prev ? prevIndex : currIndex;\r\n  }\r\n\r\n  /**\r\n   * Verifies if the focus option is available or not.\r\n   *\r\n   * @return `true` if the slider has the focus option.\r\n   */\r\n  function hasFocus(): boolean {\r\n    return ! isUndefined( options.focus ) || options.isNavigation;\r\n  }\r\n\r\n  /**\r\n   * Checks if the slider is moving/scrolling or not.\r\n   *\r\n   * @return `true` if the slider can move, or otherwise `false`.\r\n   */\r\n  function isBusy(): boolean {\r\n    return Splide.state.is( [ MOVING, SCROLLING ] ) && !! options.waitForTransition;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    go,\r\n    jump,\r\n    scroll,\r\n    getNext,\r\n    getPrev,\r\n    getAdjacent,\r\n    getEnd,\r\n    setIndex,\r\n    getIndex,\r\n    toIndex,\r\n    toPage,\r\n    toDest,\r\n    hasFocus,\r\n    isBusy,\r\n  };\r\n};\r\n","import { ALL_ATTRIBUTES, ARIA_CONTROLS, ARIA_LABEL } from '../../constants/attributes';\r\nimport { CLASS_ARROWS } from '../../constants/classes';\r\nimport {\r\n  EVENT_ARROWS_MOUNTED,\r\n  EVENT_ARROWS_UPDATED,\r\n  EVENT_END_INDEX_CHANGED,\r\n  EVENT_MOUNTED,\r\n  EVENT_MOVED,\r\n  EVENT_REFRESH,\r\n  EVENT_SCROLLED,\r\n  EVENT_UPDATED,\r\n} from '../../constants/events';\r\nimport { BaseComponent, ComponentConstructor } from '../../types';\r\nimport {\r\n  addClass,\r\n  append,\r\n  apply,\r\n  assign,\r\n  before,\r\n  create,\r\n  display,\r\n  parseHtml,\r\n  removeAttribute,\r\n  removeClass,\r\n  removeNode,\r\n  setAttribute,\r\n} from '@splidejs/utils';\r\nimport { PATH, SIZE, XML_NAME_SPACE } from './path';\r\n\r\n\r\n/**\r\n * The interface for the Arrows component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ArrowsComponent extends BaseComponent {\r\n  readonly arrows: { readonly prev?: HTMLButtonElement, readonly next?: HTMLButtonElement };\r\n\r\n  /** @internal */\r\n  update(): void;\r\n}\r\n\r\n/**\r\n * The component for handling previous and next arrows.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return An Arrows component object.\r\n */\r\nexport const Arrows: ComponentConstructor<ArrowsComponent> = ( Splide, Components, options, event ) => {\r\n  const { on, bind, emit } = event;\r\n  const { classes, i18n } = options;\r\n  const { Elements, Controller } = Components;\r\n  const { arrows: placeholder, track } = Elements;\r\n\r\n  /**\r\n   * The wrapper element.\r\n   */\r\n  let wrapper = placeholder;\r\n\r\n  /**\r\n   * The previous arrow element.\r\n   */\r\n  let prev = Elements.prev;\r\n\r\n  /**\r\n   * The next arrow element.\r\n   */\r\n  let next = Elements.next;\r\n\r\n  /**\r\n   * Indicates whether the component creates arrows or retrieved from the DOM.\r\n   */\r\n  let created: boolean;\r\n\r\n  /**\r\n   * Holds modifier classes.\r\n   */\r\n  let wrapperClasses: string;\r\n\r\n  /**\r\n   * An object with previous and next arrows.\r\n   */\r\n  const arrows: ArrowsComponent[ 'arrows' ] = {};\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on( EVENT_UPDATED, remount );\r\n  }\r\n\r\n  /**\r\n   * Remounts the component.\r\n   */\r\n  function remount(): void {\r\n    destroy();\r\n    mount();\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   */\r\n  function init(): void {\r\n    const enabled = options.arrows;\r\n\r\n    if ( enabled && ! ( prev && next ) ) {\r\n      createArrows();\r\n    }\r\n\r\n    if ( prev && next ) {\r\n      assign( arrows, { prev, next } );\r\n      display( wrapper, enabled ? '' : 'none' );\r\n      addClass( wrapper, ( wrapperClasses = `${ CLASS_ARROWS }--${ options.direction }` ) );\r\n\r\n      if ( enabled ) {\r\n        listen();\r\n        update();\r\n        setAttribute( [ prev, next ], ARIA_CONTROLS, track.id );\r\n        emit( EVENT_ARROWS_MOUNTED, prev, next );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    event.destroy();\r\n    removeClass( wrapper, wrapperClasses );\r\n\r\n    if ( created ) {\r\n      removeNode( placeholder ? [ prev, next ] : wrapper );\r\n      prev = next = null;\r\n    } else {\r\n      removeAttribute( [ prev, next ], ALL_ATTRIBUTES );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Listens to some events.\r\n   */\r\n  function listen(): void {\r\n    on( [ EVENT_MOUNTED, EVENT_MOVED, EVENT_REFRESH, EVENT_SCROLLED, EVENT_END_INDEX_CHANGED ], update );\r\n    bind( next, 'click', apply( go, '>' ) );\r\n    bind( prev, 'click', apply( go, '<' ) );\r\n  }\r\n\r\n  /**\r\n   * The wrapper function of Controller#go().\r\n   *\r\n   * @param control - The control pattern.\r\n   */\r\n  function go( control: string ): void {\r\n    Controller.go( control, true );\r\n  }\r\n\r\n  /**\r\n   * Create arrows and append them to the slider.\r\n   */\r\n  function createArrows(): void {\r\n    wrapper = placeholder || create( 'div', classes.arrows );\r\n    prev    = createArrow( true );\r\n    next    = createArrow( false );\r\n    created = true;\r\n\r\n    append( wrapper, [ prev, next ] );\r\n    ! placeholder && before( wrapper, track );\r\n  }\r\n\r\n  /**\r\n   * Creates an arrow button.\r\n   * In IE, A SVG element is focusable.\r\n   *\r\n   * @param prev - Determines whether to create a previous or next arrow.\r\n   *\r\n   * @return A created button element.\r\n   */\r\n  function createArrow( prev: boolean ): HTMLButtonElement {\r\n    const arrow = `<button class=\"${ classes.arrow } ${ prev ? classes.prev : classes.next }\" type=\"button\">`\r\n      +\t`<svg xmlns=\"${ XML_NAME_SPACE }\" viewBox=\"0 0 ${ SIZE } ${ SIZE }\" width=\"${ SIZE }\" height=\"${ SIZE }\">`\r\n      + `<path d=\"${ options.arrowPath || PATH }\" />`;\r\n\r\n    return parseHtml<HTMLButtonElement>( arrow );\r\n  }\r\n\r\n  /**\r\n   * Updates status of arrows, such as `disabled` and `aria-label`.\r\n   */\r\n  function update(): void {\r\n    if ( prev && next ) {\r\n      const index     = Splide.index;\r\n      const prevIndex = Controller.getPrev();\r\n      const nextIndex = Controller.getNext();\r\n      const prevLabel = prevIndex > -1 && index < prevIndex ? i18n.last : i18n.prev;\r\n      const nextLabel = nextIndex > -1 && index > nextIndex ? i18n.first : i18n.next;\r\n\r\n      prev.disabled = prevIndex < 0;\r\n      next.disabled = nextIndex < 0;\r\n\r\n      setAttribute( prev, ARIA_LABEL, prevLabel );\r\n      setAttribute( next, ARIA_LABEL, nextLabel );\r\n\r\n      emit( EVENT_ARROWS_UPDATED, prev, next, prevIndex, nextIndex );\r\n    }\r\n  }\r\n\r\n  return {\r\n    arrows,\r\n    mount,\r\n    destroy,\r\n    update,\r\n  };\r\n};\r\n","/**\r\n * The namespace for SVG elements.\r\n */\r\nexport const XML_NAME_SPACE = 'http://www.w3.org/2000/svg';\r\n\r\n/**\r\n * The arrow path.\r\n */\r\nexport const PATH = 'm15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z';\r\n\r\n/**\r\n * SVG width and height.\r\n */\r\nexport const SIZE = 40;\r\n","import { ARIA_CONTROLS, ARIA_LABEL } from '../../constants/attributes';\r\nimport { CLASS_ACTIVE } from '../../constants/classes';\r\nimport {\r\n  EVENT_AUTOPLAY_PAUSE,\r\n  EVENT_AUTOPLAY_PLAY,\r\n  EVENT_AUTOPLAY_PLAYING,\r\n  EVENT_MOVE,\r\n  EVENT_REFRESH,\r\n  EVENT_SCROLL,\r\n} from '../../constants/events';\r\nimport { BaseComponent, ComponentConstructor } from '../../types';\r\nimport { getAttribute, RequestInterval, setAttribute, style, toggleClass } from '@splidejs/utils';\r\nimport { INTERVAL_DATA_ATTRIBUTE } from './constants';\r\n\r\n\r\n/**\r\n * The interface for the Autoplay component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface AutoplayComponent extends BaseComponent {\r\n  play(): void;\r\n  pause(): void;\r\n  isPaused(): boolean;\r\n}\r\n\r\n/**\r\n * The component for autoplay, handling a progress bar and a toggle button.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return An Autoplay component object.\r\n */\r\nexport const Autoplay: ComponentConstructor<AutoplayComponent> = ( Splide, Components, options, event ) => {\r\n  const { on, bind, emit } = event;\r\n  const interval = RequestInterval( options.interval, Splide.go.bind( Splide, '>' ), onAnimationFrame );\r\n  const { isPaused } = interval;\r\n  const { Elements, Elements: { root, toggle } } = Components;\r\n  const { autoplay } = options;\r\n\r\n  /**\r\n   * Indicates whether the slider is hovered or not.\r\n   */\r\n  let hovered: boolean;\r\n\r\n  /**\r\n   * Indicates whether one of slider elements has focus or not.\r\n   */\r\n  let focused: boolean;\r\n\r\n  /**\r\n   * Indicates whether the autoplay is stopped or not.\r\n   * If stopped, autoplay won't start automatically unless `play()` is explicitly called.\r\n   */\r\n  let stopped = autoplay === 'pause';\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    if ( autoplay ) {\r\n      listen();\r\n      toggle && setAttribute( toggle, ARIA_CONTROLS, Elements.track.id );\r\n      stopped || play();\r\n      update();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Listens to some events.\r\n   */\r\n  function listen(): void {\r\n    if ( options.pauseOnHover ) {\r\n      bind( root, 'mouseenter mouseleave', e => {\r\n        hovered = e.type === 'mouseenter';\r\n        autoToggle();\r\n      } );\r\n    }\r\n\r\n    if ( options.pauseOnFocus ) {\r\n      bind( root, 'focusin focusout', e => {\r\n        focused = e.type === 'focusin';\r\n        autoToggle();\r\n      } );\r\n    }\r\n\r\n    if ( toggle ) {\r\n      bind( toggle, 'click', () => {\r\n        stopped ? play() : pause( true );\r\n      } );\r\n    }\r\n\r\n    on( [ EVENT_MOVE, EVENT_SCROLL, EVENT_REFRESH ], interval.rewind );\r\n    on( EVENT_MOVE, onMove );\r\n  }\r\n\r\n  /**\r\n   * Starts autoplay and clears all flags.\r\n   */\r\n  function play(): void {\r\n    if ( isPaused() && Components.Slides.isEnough() ) {\r\n      interval.start( ! options.resetProgress );\r\n      focused = hovered = stopped = false;\r\n      update();\r\n      emit( EVENT_AUTOPLAY_PLAY );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pauses autoplay.\r\n   *\r\n   * @param stop - If `true`, autoplay keeps paused until `play()` is explicitly called.\r\n   */\r\n  function pause( stop = true ): void {\r\n    stopped = !! stop;\r\n    update();\r\n\r\n    if ( ! isPaused() ) {\r\n      interval.pause();\r\n      emit( EVENT_AUTOPLAY_PAUSE );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggles play/pause according to current flags.\r\n   * If autoplay is manually paused, this will do nothing.\r\n   */\r\n  function autoToggle(): void {\r\n    if ( ! stopped ) {\r\n      hovered || focused ? pause( false ) : play();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the toggle button status.\r\n   */\r\n  function update(): void {\r\n    if ( toggle ) {\r\n      toggleClass( toggle, CLASS_ACTIVE, ! stopped );\r\n      setAttribute( toggle, ARIA_LABEL, options.i18n[ stopped ? 'play' : 'pause' ] );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called on every animation frame while autoplay is active.\r\n   *\r\n   * @param rate - The progress rate between 0 and 1.\r\n   */\r\n  function onAnimationFrame( rate: number ): void {\r\n    const { bar } = Elements;\r\n    bar && style( bar, 'width', `${ rate * 100 }%` );\r\n    emit( EVENT_AUTOPLAY_PLAYING, rate );\r\n  }\r\n\r\n  /**\r\n   * Updates or restores the interval duration.\r\n   *\r\n   * @param index - An index to move to.\r\n   */\r\n  function onMove( index: number ): void {\r\n    const Slide = Components.Slides.getAt( index );\r\n    interval.set( Slide && +getAttribute( Slide.slide, INTERVAL_DATA_ATTRIBUTE ) || options.interval );\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy: interval.cancel,\r\n    play,\r\n    pause,\r\n    isPaused,\r\n  };\r\n};\r\n","import { EVENT_MOVE, EVENT_REFRESH, EVENT_SCROLL, EVENT_SCROLLED, EVENT_UPDATED } from '../../constants/events';\r\nimport { IDLE, SCROLLING } from '../../constants/states';\r\nimport { SLIDE } from '../../constants/types';\r\nimport { AnyFunction, BaseComponent, ComponentConstructor } from '../../types';\r\nimport { abs, apply, approximatelyEqual, floor, max, RequestInterval, sign } from '@splidejs/utils';\r\nimport { BASE_VELOCITY, BOUNCE_DIFF_THRESHOLD, BOUNCE_DURATION, FRICTION_FACTOR, MIN_DURATION } from './constants';\r\n\r\n\r\n/**\r\n * The interface for the Scroll component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ScrollComponent extends BaseComponent {\r\n  scroll( position: number, duration?: number, snap?: boolean, callback?: AnyFunction ): void;\r\n  cancel(): void;\r\n}\r\n\r\n/**\r\n * The component for scrolling the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Scroll component object.\r\n */\r\nexport const Scroll: ComponentConstructor<ScrollComponent> = ( Splide, Components, options, event ) => {\r\n  const { on, emit } = event;\r\n  const { state: { set } } = Splide;\r\n  const { Move } = Components;\r\n  const { getPosition, getLimit, exceededLimit, translate } = Move;\r\n  const isSlide = Splide.is( SLIDE );\r\n\r\n  /**\r\n   * Retains the active RequestInterval object.\r\n   */\r\n  let interval: RequestInterval;\r\n\r\n  /**\r\n   * Holds the callback function.\r\n   */\r\n  let callback: AnyFunction;\r\n\r\n  /**\r\n   * The current friction (<= 1).\r\n   */\r\n  let friction = 1;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    on( EVENT_MOVE, clear );\r\n    on( [ EVENT_UPDATED, EVENT_REFRESH ], cancel );\r\n  }\r\n\r\n  /**\r\n   * Scrolls the slider to the provided destination.\r\n   *\r\n   * @param destination - The destination to scroll the slider to.\r\n   * @param duration    - Optional. The scroll duration. If omitted, calculates it by the distance.\r\n   * @param snap        - Optional. Whether to snap the slider to the closest slide or not.\r\n   * @param onScrolled  - Optional. A callback invoked after scroll ends.\r\n   * @param noConstrain - Optional. Whether to suppress constraint process when the slider exceeds bounds.\r\n   */\r\n  function scroll(\r\n    destination: number,\r\n    duration?: number,\r\n    snap?: boolean,\r\n    onScrolled?: AnyFunction,\r\n    noConstrain?: boolean\r\n  ): void {\r\n    const from = getPosition();\r\n\r\n    clear();\r\n\r\n    if ( snap && ( ! isSlide || ! exceededLimit() ) ) {\r\n      const size   = Components.Layout.sliderSize();\r\n      const offset = sign( destination ) * size * floor( abs( destination ) / size ) || 0;\r\n      destination = Move.toPosition( Components.Controller.toDest( destination % size ) ) + offset;\r\n    }\r\n\r\n    const immediately = approximatelyEqual( from, destination, 1 ) || duration === 0;\r\n\r\n    friction = 1;\r\n    duration = immediately ? 0 : duration || max( abs( destination - from ) / BASE_VELOCITY, MIN_DURATION );\r\n    callback = onScrolled;\r\n    interval = RequestInterval( duration, onEnd, apply( update, from, destination, noConstrain ), 1 );\r\n\r\n    set( SCROLLING );\r\n    emit( EVENT_SCROLL );\r\n    interval.start();\r\n  }\r\n\r\n  /**\r\n   * Called when scroll ends or has been just canceled.\r\n   */\r\n  function onEnd(): void {\r\n    set( IDLE );\r\n    callback && callback();\r\n    emit( EVENT_SCROLLED );\r\n  }\r\n\r\n  /**\r\n   * Called whenever the interval timer is updated.\r\n   *\r\n   * @param from        - A position where scroll starts.\r\n   * @param to          - A destination where the slider goes.\r\n   * @param noConstrain - Whether to suppress constraint process when the slider exceeds bounds.\r\n   * @param rate        - A current rate.\r\n   */\r\n  function update( from: number, to: number, noConstrain: boolean | undefined, rate: number ): void {\r\n    const position = getPosition();\r\n    const target   = from + ( to - from ) * easing( rate );\r\n    const diff     = ( target - position ) * friction;\r\n\r\n    translate( position + diff );\r\n\r\n    if ( isSlide && ! noConstrain && exceededLimit() ) {\r\n      friction *= FRICTION_FACTOR;\r\n\r\n      if ( abs( diff ) < BOUNCE_DIFF_THRESHOLD ) {\r\n        scroll( getLimit( exceededLimit( true ) ), BOUNCE_DURATION, false, callback, true );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clears the active interval.\r\n   */\r\n  function clear(): void {\r\n    if ( interval ) {\r\n      interval.cancel();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancels the active interval and emits the `scrolled` event.\r\n   */\r\n  function cancel(): void {\r\n    if ( interval && ! interval.isPaused() ) {\r\n      clear();\r\n      onEnd();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The easing function.\r\n   *\r\n   * @param t - A value to ease.\r\n   *\r\n   * @return An eased value.\r\n   */\r\n  function easing( t: number ): number {\r\n    const { easingFunc } = options;\r\n    return easingFunc ? easingFunc( t ) : 1 - Math.pow( 1 - t, 4 );\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy: clear,\r\n    scroll,\r\n    cancel,\r\n  };\r\n};\r\n","/**\r\n * Triggers the bounce effect when the diff becomes less than this value.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const BOUNCE_DIFF_THRESHOLD = 10;\r\n\r\n/**\r\n * The duration of the bounce effect.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const BOUNCE_DURATION = 600;\r\n\r\n/**\r\n * The friction factor.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const FRICTION_FACTOR = 0.6;\r\n\r\n/**\r\n * The velocity to calculate the scroll duration.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const BASE_VELOCITY = 1.5;\r\n\r\n/**\r\n * The minimum duration of scroll.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const MIN_DURATION = 800;\r\n","import { CLASS_ARROW, CLASS_PAGINATION_PAGE } from '../../constants/classes';\r\nimport { EVENT_DRAG, EVENT_DRAGGED, EVENT_DRAGGING, EVENT_MOUNTED, EVENT_UPDATED } from '../../constants/events';\r\nimport { SCROLL_LISTENER_OPTIONS } from '../../constants/listener-options';\r\nimport { DRAGGING, IDLE, MOVING, SCROLLING } from '../../constants/states';\r\nimport { FADE, LOOP, SLIDE } from '../../constants/types';\r\nimport { BaseComponent, ComponentConstructor } from '../../types';\r\nimport { abs, isObject, matches, min, noop, prevent, sign, timeOf } from '@splidejs/utils';\r\nimport { FRICTION, LOG_INTERVAL, POINTER_DOWN_EVENTS, POINTER_MOVE_EVENTS, POINTER_UP_EVENTS } from './constants';\r\n\r\n\r\n/**\r\n * The interface for the Drag component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface DragComponent extends BaseComponent {\r\n  disable( disabled: boolean ): void;\r\n  isDragging(): boolean;\r\n}\r\n\r\n/**\r\n * The component for dragging the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Drag component object.\r\n */\r\nexport const Drag: ComponentConstructor<DragComponent> = ( Splide, Components, options, event ) => {\r\n  const { on, emit, bind } = event;\r\n  const binder = event.create();\r\n  const { state } = Splide;\r\n  const { Move, Scroll, Controller, Elements: { track }, Breakpoints: { reduce } } = Components;\r\n  const { resolve, orient } = Components.Direction;\r\n  const { getPosition, exceededLimit } = Move;\r\n\r\n  /**\r\n   * The base slider position to calculate the delta of coords.\r\n   */\r\n  let basePosition: number;\r\n\r\n  /**\r\n   * The base event object saved per specific sampling interval.\r\n   */\r\n  let baseEvent: TouchEvent | MouseEvent;\r\n\r\n  /**\r\n   * Holds the previous base event object.\r\n   */\r\n  let prevBaseEvent: TouchEvent | MouseEvent;\r\n\r\n  /**\r\n   * Indicates whether the drag mode is `free` or not.\r\n   */\r\n  let isFree: boolean;\r\n\r\n  /**\r\n   * Indicates whether the user is dragging the slider or not.\r\n   */\r\n  let dragging: boolean;\r\n\r\n  /**\r\n   * Indicates whether the slider exceeds limits or not.\r\n   * This must not be `undefined` for strict comparison.\r\n   */\r\n  let exceeded = false;\r\n\r\n  /**\r\n   * Turns into `true` when the user starts dragging the slider.\r\n   */\r\n  let clickPrevented: boolean;\r\n\r\n  /**\r\n   * Indicates whether the drag component is now disabled or not.\r\n   */\r\n  let disabled: boolean;\r\n\r\n  /**\r\n   * The target element to attach listeners.\r\n   */\r\n  let target: Window | HTMLElement;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    bind( track, POINTER_MOVE_EVENTS, noop, SCROLL_LISTENER_OPTIONS );\r\n    bind( track, POINTER_UP_EVENTS, noop, SCROLL_LISTENER_OPTIONS );\r\n    bind( track, POINTER_DOWN_EVENTS, onPointerDown, SCROLL_LISTENER_OPTIONS );\r\n    bind( track, 'click', onClick, { capture: true } );\r\n    bind( track, 'dragstart', prevent );\r\n    on( [ EVENT_MOUNTED, EVENT_UPDATED ], init );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   */\r\n  function init(): void {\r\n    const { drag } = options;\r\n    disable( ! drag );\r\n    isFree = drag === 'free';\r\n  }\r\n\r\n  /**\r\n   * Called when the user clicks or touches the slider.\r\n   * - Needs to prevent the default behaviour when the slider is busy to deny any action, such as dragging images\r\n   * - IE does not support MouseEvent and TouchEvent constructors\r\n   * - The `dragging` state always becomes `true` when the user starts dragging while the slider is moving\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\r\n  function onPointerDown( e: TouchEvent | MouseEvent ): void {\r\n    clickPrevented = false;\r\n\r\n    if ( ! disabled ) {\r\n      const isTouch = isTouchEvent( e );\r\n\r\n      if ( isDraggable( e.target ) && ( isTouch || ! e.button ) ) {\r\n        if ( ! Controller.isBusy() ) {\r\n          target        = isTouch ? track : window;\r\n          dragging      = state.is( [ MOVING, SCROLLING ] );\r\n          prevBaseEvent = null;\r\n\r\n          binder.bind( target, POINTER_MOVE_EVENTS, onPointerMove, SCROLL_LISTENER_OPTIONS );\r\n          binder.bind( target, POINTER_UP_EVENTS, onPointerUp, SCROLL_LISTENER_OPTIONS );\r\n          Move.cancel();\r\n          Scroll.cancel();\r\n          save( e );\r\n        } else {\r\n          prevent( e, true );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called while the user moves the pointer on the slider.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\r\n  function onPointerMove( e: TouchEvent | MouseEvent ): void {\r\n    if ( ! state.is( DRAGGING ) ) {\r\n      state.set( DRAGGING );\r\n      emit( EVENT_DRAG );\r\n    }\r\n\r\n    if ( shouldRelease( e ) ) {\r\n      return onPointerUp( e );\r\n    }\r\n\r\n    if ( e.cancelable ) {\r\n      if ( dragging ) {\r\n        Move.translate( basePosition + constrain( diffCoord( e ) ) );\r\n\r\n        const expired     = diffTime( e ) > LOG_INTERVAL;\r\n        const hasExceeded = exceeded !== ( exceeded = exceededLimit() );\r\n\r\n        expired || hasExceeded && save( e );\r\n        clickPrevented = true;\r\n        emit( EVENT_DRAGGING );\r\n        prevent( e );\r\n      } else if ( isSliderDirection( e ) ) {\r\n        dragging = shouldStart( e );\r\n        prevent( e );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the user releases pointing devices.\r\n   * Needs to move the slider when:\r\n   * - The user drags the slider and the distance exceeds the threshold\r\n   * - The user aborted the slider moving by pointerdown and just released it without dragging the slider\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\r\n  function onPointerUp( e: TouchEvent | MouseEvent ): void {\r\n    if ( state.is( DRAGGING ) ) {\r\n      state.set( IDLE );\r\n      emit( EVENT_DRAGGED );\r\n    }\r\n\r\n    if ( dragging ) {\r\n      move( e );\r\n      prevent( e );\r\n    }\r\n\r\n    binder.destroy();\r\n    dragging = false;\r\n    exceeded = false;\r\n  }\r\n\r\n  /**\r\n   * Called when the track element is clicked.\r\n   * Disables click any elements inside it while dragging.\r\n   *\r\n   * @param e - A MouseEvent object.\r\n   */\r\n  function onClick( e: MouseEvent ): void {\r\n    if ( ! disabled && clickPrevented ) {\r\n      prevent( e, true );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Saves data at the specific moment.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   */\r\n  function save( e: TouchEvent | MouseEvent ): void {\r\n    prevBaseEvent = baseEvent;\r\n    baseEvent     = e;\r\n    basePosition  = getPosition();\r\n  }\r\n\r\n  /**\r\n   * Calculates the destination by the drag velocity and moves the carousel.\r\n   * If motion is reduced, restores transition speed to the initial value\r\n   * because it's \"essential\" motion for the user to recognize what happens on the carousel.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   */\r\n  function move( e: TouchEvent | MouseEvent ): void {\r\n    const velocity    = computeVelocity( e );\r\n    const destination = computeDestination( velocity );\r\n    const rewind      = options.rewind && options.rewindByDrag;\r\n\r\n    reduce( false );\r\n\r\n    if ( isFree ) {\r\n      Controller.scroll( destination, 0, options.snap );\r\n    } else if ( Splide.is( FADE ) ) {\r\n      Controller.go( orient( sign( velocity ) ) < 0 ? ( rewind ? '<' : '-' ) : ( rewind ? '>' : '+' ) );\r\n    } else if ( Splide.is( SLIDE ) && exceeded && rewind ) {\r\n      Controller.go( exceededLimit( true ) ? '>' : '<' );\r\n    } else {\r\n      Controller.go( Controller.toDest( destination ), true );\r\n    }\r\n\r\n    reduce( true );\r\n  }\r\n\r\n  /**\r\n   * Checks if the provided touch event should be released or not.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   */\r\n  function shouldRelease( e: TouchEvent | MouseEvent ): boolean {\r\n    if ( options.releaseTouch && Splide.is( SLIDE ) && isTouchEvent( e ) ) {\r\n      const { index } = Splide;\r\n      const diff = diffCoord( e );\r\n\r\n      if ( exceededLimit() || index === 0 && diff > 0 || index === Splide.length - 1 && diff < 0 ) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Checks if the drag distance exceeds the defined threshold.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   *\r\n   * @return `true` if the distance exceeds the threshold, or `false` if not.\r\n   */\r\n  function shouldStart( e: TouchEvent | MouseEvent ): boolean {\r\n    const { dragMinThreshold: thresholds } = options;\r\n    const isObj = isObject( thresholds );\r\n    const mouse = isObj && thresholds.mouse || 0;\r\n    const touch = ( isObj ? thresholds.touch : +thresholds ) || 10;\r\n    return abs( diffCoord( e ) ) > ( isTouchEvent( e ) ? touch : mouse );\r\n  }\r\n\r\n  /**\r\n   * Checks whether dragging towards the slider or the scroll direction.\r\n   *\r\n   * @return `true` if dragging towards the slider direction, or otherwise `false`.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\r\n  function isSliderDirection( e: TouchEvent | MouseEvent ): boolean {\r\n    return abs( diffCoord( e ) ) > abs( diffCoord( e, true ) );\r\n  }\r\n\r\n  /**\r\n   * Computes the drag velocity.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   *\r\n   * @return The drag velocity.\r\n   */\r\n  function computeVelocity( e: TouchEvent | MouseEvent ): number {\r\n    if ( Splide.is( LOOP ) || ! exceeded ) {\r\n      const time = diffTime( e );\r\n\r\n      if ( time && time < LOG_INTERVAL ) {\r\n        return diffCoord( e ) / time;\r\n      }\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Computes the destination by the velocity and the `flickPower` option.\r\n   *\r\n   * @param velocity - The drag velocity.\r\n   *\r\n   * @return The destination.\r\n   */\r\n  function computeDestination( velocity: number ): number {\r\n    return getPosition() + sign( velocity ) * min(\r\n      abs( velocity ) * ( options.flickPower || 600 ),\r\n      isFree ? Infinity : Components.Layout.listSize() * ( options.flickMaxPages || 1 )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the coord difference between the provided and base events.\r\n   *\r\n   * @param e          - A TouchEvent or MouseEvent object.\r\n   * @param orthogonal - Optional. If `true`, returns the coord of the orthogonal axis against the drag one.\r\n   *\r\n   * @return The difference of the coord.\r\n   */\r\n  function diffCoord( e: TouchEvent | MouseEvent, orthogonal?: boolean ): number {\r\n    return coordOf( e, orthogonal ) - coordOf( getBaseEvent( e ), orthogonal );\r\n  }\r\n\r\n  /**\r\n   * Returns the elapsed time from the base event to `e`.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   *\r\n   * @return The elapsed time in milliseconds.\r\n   */\r\n  function diffTime( e: TouchEvent | MouseEvent ): number {\r\n    return timeOf( e ) - timeOf( getBaseEvent( e ) );\r\n  }\r\n\r\n  /**\r\n   * Returns the base event.\r\n   * If the base event is same with `e`, returns previous one.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   *\r\n   * @return A base event.\r\n   */\r\n  function getBaseEvent( e: TouchEvent | MouseEvent ): TouchEvent | MouseEvent {\r\n    return baseEvent === e && prevBaseEvent || baseEvent;\r\n  }\r\n\r\n  /**\r\n   * Returns the `pageX` and `pageY` coordinates provided by the event.\r\n   * Be aware that IE does not support both TouchEvent and MouseEvent constructors.\r\n   *\r\n   * @param e          - A TouchEvent or MouseEvent object.\r\n   * @param orthogonal - Optional. If `true`, returns the coord of the orthogonal axis against the drag one.\r\n   *\r\n   * @return A pageX or pageY coordinate.\r\n   */\r\n  function coordOf( e: TouchEvent | MouseEvent, orthogonal?: boolean ): number {\r\n    return ( isTouchEvent( e ) ? e.changedTouches[ 0 ] : e )[ `page${ resolve( orthogonal ? 'Y' : 'X' ) }` ];\r\n  }\r\n\r\n  /**\r\n   * Reduces the distance to move by the predefined friction.\r\n   * This does nothing when the slider type is not `slide`, or the position is inside borders.\r\n   *\r\n   * @param diff - Diff to constrain.\r\n   *\r\n   * @return The constrained diff.\r\n   */\r\n  function constrain( diff: number ): number {\r\n    return diff / ( exceeded && Splide.is( SLIDE ) ? FRICTION : 1 );\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the user can drag the target.\r\n   *\r\n   * @param target - An event target.\r\n   *\r\n   * @return `true` if the target is draggable.\r\n   */\r\n  function isDraggable( target: EventTarget ): boolean {\r\n    const { noDrag } = options;\r\n\r\n    return ! matches( target, `.${ CLASS_PAGINATION_PAGE }, .${ CLASS_ARROW }` )\r\n      && ( ! noDrag || ! matches( target, noDrag ) );\r\n  }\r\n\r\n  /**\r\n   * Checks if the provided event is TouchEvent or MouseEvent.\r\n   *\r\n   * @param e - An event to check.\r\n   *\r\n   * @return `true` if the `e` is TouchEvent.\r\n   */\r\n  function isTouchEvent( e: TouchEvent | MouseEvent ): e is TouchEvent {\r\n    return typeof TouchEvent !== 'undefined' && e instanceof TouchEvent;\r\n  }\r\n\r\n  /**\r\n   * Checks if now the user is dragging the slider or not.\r\n   *\r\n   * @return `true` if the user is dragging the slider or otherwise `false`.\r\n   */\r\n  function isDragging(): boolean {\r\n    return dragging;\r\n  }\r\n\r\n  /**\r\n   * Disables the component.\r\n   *\r\n   * @param value - Set `true` to disable the component.\r\n   */\r\n  function disable( value: boolean ): void {\r\n    disabled = value;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    disable,\r\n    isDragging,\r\n  };\r\n};\r\n","import { ARROW_LEFT, ARROW_RIGHT } from '../../constants/arrows';\r\nimport { EVENT_MOVE, EVENT_UPDATED } from '../../constants/events';\r\nimport { BaseComponent, ComponentConstructor } from '../../types';\r\nimport { nextTick } from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The interface for the Keyboard component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface KeyboardComponent extends BaseComponent {\r\n  disable( disabled: boolean ): void;\r\n}\r\n\r\n/**\r\n * The keyboard event name.\r\n *\r\n * @since 3.6.0\r\n */\r\nconst KEYBOARD_EVENT = 'keydown';\r\n\r\n/**\r\n * The component for controlling the slider by keyboards.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Keyboard component object.\r\n */\r\nexport const Keyboard: ComponentConstructor<KeyboardComponent> = ( Splide, Components, options, event ) => {\r\n  const { on, bind, destroy } = event;\r\n  const { root } = Splide;\r\n  const { resolve } = Components.Direction;\r\n\r\n  /**\r\n   * The target element of the keyboard event.\r\n   */\r\n  let target: Window | HTMLElement;\r\n\r\n  /**\r\n   * Indicates whether the component is currently disabled or not.\r\n   */\r\n  let disabled: boolean;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on( EVENT_UPDATED, destroy );\r\n    on( EVENT_UPDATED, init );\r\n    on( EVENT_MOVE, onMove );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   */\r\n  function init(): void {\r\n    const { keyboard } = options;\r\n\r\n    if ( keyboard ) {\r\n      target = keyboard === 'global' ? window : root;\r\n      bind( target, KEYBOARD_EVENT, onKeydown );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disables the keyboard input.\r\n   *\r\n   * @param value - Toggles disabling/enabling the keyboard input.\r\n   */\r\n  function disable( value: boolean ): void {\r\n    disabled = value;\r\n  }\r\n\r\n  /**\r\n   * Called when the slider moves.\r\n   * To avoid the slider from moving twice, wait for a tick.\r\n   */\r\n  function onMove(): void {\r\n    const _disabled = disabled;\r\n    disabled = true;\r\n    nextTick( () => { disabled = _disabled } );\r\n  }\r\n\r\n  /**\r\n   * Called when any key is pressed on the target.\r\n   *\r\n   * @param e - A KeyboardEvent object.\r\n   */\r\n  function onKeydown( e: KeyboardEvent ): void {\r\n    if ( ! disabled ) {\r\n      if ( e.key === resolve( ARROW_LEFT ) ) {\r\n        Splide.go( '<' );\r\n      } else if ( e.key === resolve( ARROW_RIGHT ) ) {\r\n        Splide.go( '>' );\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy,\r\n    disable,\r\n  };\r\n};\r\n","import { CLASS_LOADING } from '../../constants/classes';\r\nimport {\r\n  EVENT_LAZYLOAD_ERROR,\r\n  EVENT_LAZYLOAD_LOADED,\r\n  EVENT_MOVED,\r\n  EVENT_REFRESH,\r\n  EVENT_RESIZE,\r\n  EVENT_SCROLLED,\r\n} from '../../constants/events';\r\nimport { BaseComponent, ComponentConstructor } from '../../types';\r\nimport {\r\n  addClass,\r\n  apply,\r\n  child,\r\n  create,\r\n  display,\r\n  empty,\r\n  getAttribute,\r\n  queryAll,\r\n  removeAttribute,\r\n  removeClass,\r\n  removeNode,\r\n  setAttribute,\r\n} from '@splidejs/utils';\r\nimport { SlideComponent } from '../Slides/Slide';\r\nimport { IMAGE_SELECTOR, SRC_DATA_ATTRIBUTE, SRCSET_DATA_ATTRIBUTE } from './constants';\r\n\r\n\r\n/**\r\n * The interface for the LazyLoad component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface LazyLoadComponent extends BaseComponent {\r\n  /** @internal */\r\n  check(): void;\r\n}\r\n\r\n/**\r\n * The type for each entry.\r\n * Use a tuple for better compression.\r\n *\r\n * @since 4.0.0\r\n */\r\ntype LazyLoadEntry = [ HTMLImageElement, SlideComponent, HTMLSpanElement ];\r\n\r\n/**\r\n * The component for lazily loading images.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return An LazyLoad component object.\r\n */\r\nexport const LazyLoad: ComponentConstructor<LazyLoadComponent> = ( Splide, Components, options, event ) => {\r\n  const { on, off, bind, emit } = event;\r\n  const isSequential = options.lazyLoad === 'sequential';\r\n  const events       = [ EVENT_MOVED, EVENT_SCROLLED ];\r\n\r\n  /**\r\n   * Stores data of images.\r\n   */\r\n  let entries: LazyLoadEntry[] = [];\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    if ( options.lazyLoad ) {\r\n      init();\r\n      on( EVENT_REFRESH, init );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes the component and start loading images.\r\n   * Be aware that `refresh` also calls this method.\r\n   */\r\n  function init() {\r\n    empty( entries );\r\n    register();\r\n\r\n    if ( isSequential ) {\r\n      loadNext();\r\n    } else {\r\n      off( events );\r\n      on( events, check );\r\n      check();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds images and register them as entries with creating spinner elements.\r\n   * Note that spinner can be already available because of `refresh()`.\r\n   */\r\n  function register(): void {\r\n    Components.Slides.forEach( Slide => {\r\n      queryAll<HTMLImageElement>( Slide.slide, IMAGE_SELECTOR ).forEach( img => {\r\n        const src    = getAttribute( img, SRC_DATA_ATTRIBUTE );\r\n        const srcset = getAttribute( img, SRCSET_DATA_ATTRIBUTE );\r\n\r\n        if ( src !== img.src || srcset !== img.srcset ) {\r\n          const className = options.classes.spinner;\r\n          const parent    = img.parentElement;\r\n          const spinner   = child( parent, `.${ className }` ) || create( 'span', className, parent );\r\n\r\n          entries.push( [ img, Slide, spinner ] );\r\n          img.src || display( img, 'none' );\r\n        }\r\n      } );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Checks how close each image is from the active slide, and determines whether to start loading or not.\r\n   * The last `+1` is for the current page.\r\n   */\r\n  function check(): void {\r\n    entries = entries.filter( data => {\r\n      const distance = options.perPage * ( ( options.preloadPages || 1 ) + 1 ) - 1;\r\n      return data[ 1 ].isWithin( Splide.index, distance ) ? load( data ) : true;\r\n    } );\r\n\r\n    entries.length || off( events );\r\n  }\r\n\r\n  /**\r\n   * Starts loading the image in the provided data.\r\n   *\r\n   * @param data - A LazyLoadEntry object.\r\n   */\r\n  function load( data: LazyLoadEntry ): void {\r\n    const [ img ] = data;\r\n\r\n    addClass( data[ 1 ].slide, CLASS_LOADING );\r\n    bind( img, 'load error', apply( onLoad, data ) );\r\n\r\n    setAttribute( img, 'src', getAttribute( img, SRC_DATA_ATTRIBUTE ) );\r\n    setAttribute( img, 'srcset', getAttribute( img, SRCSET_DATA_ATTRIBUTE ) );\r\n    removeAttribute( img, SRC_DATA_ATTRIBUTE );\r\n    removeAttribute( img, SRCSET_DATA_ATTRIBUTE );\r\n  }\r\n\r\n  /**\r\n   * Called when the image is loaded or any error occurs.\r\n   *\r\n   * @param data - A LazyLoadEntry object.\r\n   * @param e    - An Event object.\r\n   */\r\n  function onLoad( data: LazyLoadEntry, e: Event ): void {\r\n    const [ img, Slide ] = data;\r\n\r\n    removeClass( Slide.slide, CLASS_LOADING );\r\n\r\n    if ( e.type !== 'error' ) {\r\n      removeNode( data[ 2 ] );\r\n      display( img, '' );\r\n      emit( EVENT_LAZYLOAD_LOADED, img, Slide );\r\n      emit( EVENT_RESIZE );\r\n    } else {\r\n      emit( EVENT_LAZYLOAD_ERROR, img, Slide );\r\n    }\r\n\r\n    isSequential && loadNext();\r\n  }\r\n\r\n  /**\r\n   * Starts loading a next image.\r\n   */\r\n  function loadNext(): void {\r\n    entries.length && load( entries.shift() );\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy: apply( empty, entries ),\r\n    check,\r\n  };\r\n};\r\n","import { ARROW_LEFT, ARROW_RIGHT } from '../../constants/arrows';\r\nimport {\r\n  ARIA_CONTROLS,\r\n  ARIA_LABEL,\r\n  ARIA_ORIENTATION,\r\n  ARIA_SELECTED,\r\n  ROLE,\r\n  TAB_INDEX,\r\n} from '../../constants/attributes';\r\nimport { CLASS_ACTIVE, CLASS_PAGINATION } from '../../constants/classes';\r\nimport { TTB } from '../../constants/directions';\r\nimport {\r\n  EVENT_END_INDEX_CHANGED,\r\n  EVENT_MOVE,\r\n  EVENT_PAGINATION_MOUNTED,\r\n  EVENT_PAGINATION_UPDATED,\r\n  EVENT_REFRESH,\r\n  EVENT_SCROLL,\r\n  EVENT_SCROLLED,\r\n  EVENT_UPDATED,\r\n} from '../../constants/events';\r\nimport { BaseComponent, ComponentConstructor, Options } from '../../types';\r\nimport {\r\n  addClass,\r\n  apply,\r\n  ceil,\r\n  create,\r\n  display,\r\n  empty,\r\n  focus,\r\n  format,\r\n  prevent,\r\n  removeAttribute,\r\n  removeClass,\r\n  removeNode,\r\n  setAttribute,\r\n  slice,\r\n} from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The interface for the Pagination component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface PaginationComponent extends BaseComponent {\r\n  readonly items: PaginationItem[];\r\n  getAt( index: number ): PaginationItem;\r\n  update(): void;\r\n}\r\n\r\n/**\r\n * The interface for data of the pagination.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface PaginationData {\r\n  readonly list: HTMLUListElement;\r\n  readonly items: PaginationItem[];\r\n}\r\n\r\n/**\r\n * The interface for each pagination item.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface PaginationItem {\r\n  readonly li: HTMLLIElement;\r\n  readonly button: HTMLButtonElement;\r\n  readonly page: number;\r\n}\r\n\r\n/**\r\n * The component for the pagination UI (a slide picker).\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Pagination component object.\r\n */\r\nexport const Pagination: ComponentConstructor<PaginationComponent> = ( Splide, Components, options, event ) => {\r\n  const { on, emit, bind } = event;\r\n  const { Slides, Elements, Controller } = Components;\r\n  const { hasFocus, getIndex, go } = Controller;\r\n  const { resolve } = Components.Direction;\r\n  const { pagination: placeholder } = Elements;\r\n\r\n  /**\r\n   * Stores all pagination items.\r\n   */\r\n  const items: PaginationItem[] = [];\r\n\r\n  /**\r\n   * The pagination element.\r\n   */\r\n  let list: HTMLUListElement | null;\r\n\r\n  /**\r\n   * Holds modifier classes.\r\n   */\r\n  let paginationClasses: string;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    destroy();\r\n    on( [ EVENT_UPDATED, EVENT_REFRESH, EVENT_END_INDEX_CHANGED ], mount );\r\n\r\n    const enabled = options.pagination;\r\n    placeholder && display( placeholder, enabled ? '' : 'none' );\r\n\r\n    if ( enabled ) {\r\n      on( [ EVENT_MOVE, EVENT_SCROLL, EVENT_SCROLLED ], update );\r\n      createPagination();\r\n      update();\r\n      emit( EVENT_PAGINATION_MOUNTED, { list, items }, getAt( Splide.index ) );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    if ( list ) {\r\n      removeNode( placeholder ? slice( list.children ) : list );\r\n      removeClass( list, paginationClasses );\r\n      empty( items );\r\n      list = null;\r\n    }\r\n\r\n    event.destroy();\r\n  }\r\n\r\n  /**\r\n   * Creates the pagination element and appends it to the slider.\r\n   */\r\n  function createPagination(): void {\r\n    const { length } = Splide;\r\n    const { classes, i18n, perPage } = options;\r\n    const max = hasFocus() ? Controller.getEnd() + 1 : ceil( length / perPage );\r\n\r\n    list = placeholder || create( 'ul', classes.pagination, Elements.track.parentElement );\r\n\r\n    addClass( list, ( paginationClasses = `${ CLASS_PAGINATION }--${ getDirection() }` ) );\r\n    setAttribute( list, ROLE, 'tablist' );\r\n    setAttribute( list, ARIA_LABEL, i18n.select );\r\n    setAttribute( list, ARIA_ORIENTATION, getDirection() === TTB ? 'vertical' : '' );\r\n\r\n    for ( let i = 0; i < max; i++ ) {\r\n      const li       = create( 'li', null, list );\r\n      const button   = create( 'button', { class: classes.page, type: 'button' }, li );\r\n      const controls = Slides.getIn( i ).map( Slide => Slide.slide.id );\r\n      const text     = ! hasFocus() && perPage > 1 ? i18n.pageX : i18n.slideX;\r\n\r\n      bind( button, 'click', apply( onClick, i ) );\r\n\r\n      if ( options.paginationKeyboard ) {\r\n        bind( button, 'keydown', apply( onKeydown, i ) );\r\n      }\r\n\r\n      setAttribute( li, ROLE, 'presentation' );\r\n      setAttribute( button, ROLE, 'tab' );\r\n      setAttribute( button, ARIA_CONTROLS, controls.join( ' ' ) );\r\n      setAttribute( button, ARIA_LABEL, format( text, i + 1 ) );\r\n      setAttribute( button, TAB_INDEX, -1 );\r\n\r\n      items.push( { li, button, page: i } );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the user clicks each pagination dot.\r\n   * Moves the focus to the active slide for accessibility.\r\n   *\r\n   * @param page - A clicked page index.\r\n   */\r\n  function onClick( page: number ): void {\r\n    go( `>${ page }`, true );\r\n  }\r\n\r\n  /**\r\n   * Called when any key is pressed on the pagination.\r\n   *\r\n   * @link https://www.w3.org/WAI/ARIA/apg/patterns/tabpanel/#keyboard-interaction-21\r\n   *\r\n   * @param page - A page index.\r\n   * @param e    - A KeyboardEvent object.\r\n   */\r\n  function onKeydown( page: number, e: KeyboardEvent ): void {\r\n    const { length } = items;\r\n    const { key } = e;\r\n    const dir = getDirection();\r\n\r\n    let nextPage = -1;\r\n\r\n    if ( key === resolve( ARROW_RIGHT, false, dir ) ) {\r\n      nextPage = ++page % length;\r\n    } else if ( key === resolve( ARROW_LEFT, false, dir ) ) {\r\n      nextPage = ( --page + length ) % length;\r\n    } else if ( key === 'Home' ) {\r\n      nextPage = 0;\r\n    } else if ( key === 'End' ) {\r\n      nextPage = length - 1;\r\n    }\r\n\r\n    const item = items[ nextPage ];\r\n\r\n    if ( item ) {\r\n      focus( item.button );\r\n      go( `>${ nextPage }` );\r\n      prevent( e, true );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the latest direction for pagination.\r\n   */\r\n  function getDirection(): Options['direction'] {\r\n    return options.paginationDirection || options.direction;\r\n  }\r\n\r\n  /**\r\n   * Returns the pagination item at the specified index.\r\n   *\r\n   * @param index - An index.\r\n   *\r\n   * @return A pagination item object if available, or otherwise `undefined`.\r\n   */\r\n  function getAt( index: number ): PaginationItem | undefined {\r\n    return items[ Controller.toPage( index ) ];\r\n  }\r\n\r\n  /**\r\n   * Updates the pagination status.\r\n   */\r\n  function update(): void {\r\n    const prev = getAt( getIndex( true ) );\r\n    const curr = getAt( getIndex() );\r\n\r\n    if ( prev ) {\r\n      const { button } = prev;\r\n      removeClass( button, CLASS_ACTIVE );\r\n      removeAttribute( button, ARIA_SELECTED );\r\n      setAttribute( button, TAB_INDEX, -1 );\r\n    }\r\n\r\n    if ( curr ) {\r\n      const { button } = curr;\r\n      addClass( button, CLASS_ACTIVE );\r\n      setAttribute( button, ARIA_SELECTED, true );\r\n      setAttribute( button, TAB_INDEX, '' );\r\n    }\r\n\r\n    emit( EVENT_PAGINATION_UPDATED, { list, items }, prev, curr );\r\n  }\r\n\r\n  return {\r\n    items,\r\n    mount,\r\n    destroy,\r\n    getAt,\r\n    update,\r\n  };\r\n};\r\n","import { SCROLL_LISTENER_OPTIONS } from '../../constants/listener-options';\r\nimport { MOVING } from '../../constants/states';\r\nimport { BaseComponent, ComponentConstructor } from '../../types';\r\nimport { abs, prevent, timeOf } from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The interface for the Wheel component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface WheelComponent extends BaseComponent {\r\n}\r\n\r\n/**\r\n * The component for observing the mouse wheel and moving the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Wheel component object.\r\n */\r\nexport const Wheel: ComponentConstructor<WheelComponent> = ( Splide, Components, options, event ) => {\r\n  /**\r\n   * Holds the last time when the wheel moves the slider.\r\n   */\r\n  let lastTime = 0;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    if ( options.wheel ) {\r\n      event.bind( Components.Elements.track, 'wheel', onWheel, SCROLL_LISTENER_OPTIONS );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the user rotates the mouse wheel on the slider.\r\n   *\r\n   * @param e - A WheelEvent object.\r\n   */\r\n  function onWheel( e: WheelEvent ): void {\r\n    if ( e.cancelable ) {\r\n      const { deltaY } = e;\r\n      const backwards = deltaY < 0;\r\n      const timeStamp = timeOf( e );\r\n      const min       = options.wheelMinThreshold || 0;\r\n      const sleep     = options.wheelSleep || 0;\r\n\r\n      if ( abs( deltaY ) > min && timeStamp - lastTime > sleep ) {\r\n        Splide.go( backwards ? '<' : '>' );\r\n        lastTime = timeStamp;\r\n      }\r\n\r\n      shouldPrevent( backwards ) && prevent( e );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks whether the component should prevent the default action of the wheel event or not.\r\n   *\r\n   * @param backwards - Set this to `true` for backwards direction.\r\n   *\r\n   * @return `true` if the action should be prevented.\r\n   */\r\n  function shouldPrevent( backwards: boolean ): boolean {\r\n    return ! options.releaseWheel\r\n      || Splide.state.is( MOVING )\r\n      || Components.Controller.getAdjacent( backwards ) !== -1;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n  };\r\n};\r\n","import { ARIA_ATOMIC, ARIA_BUSY, ARIA_LIVE } from '../../constants/attributes';\r\nimport { CLASS_SR } from '../../constants/classes';\r\nimport { EVENT_AUTOPLAY_PAUSE, EVENT_AUTOPLAY_PLAY, EVENT_MOVED, EVENT_SCROLLED } from '../../constants/events';\r\nimport { BaseComponent, ComponentConstructor } from '../../types';\r\nimport { append, apply, create, removeAttribute, removeNode, RequestInterval, setAttribute } from '@splidejs/utils';\r\nimport { VISUALLY_HIDDEN } from './constants';\r\n\r\n\r\n/**\r\n * The interface for the Live component.\r\n *\r\n * @since 4.0.0\r\n */\r\nexport interface LiveComponent extends BaseComponent {\r\n  disable( disabled: boolean ): void;\r\n}\r\n\r\n/**\r\n * Delay in milliseconds before removing the SR field for Windows Narrator.\r\n */\r\nconst SR_REMOVAL_DELAY = 90;\r\n\r\n/**\r\n * The component for implementing Live Region to the slider.\r\n *\r\n * @link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions\r\n *\r\n * @since 4.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Live component object.\r\n */\r\nexport const Live: ComponentConstructor<LiveComponent> = ( Splide, Components, options, event ) => {\r\n  const { on } = event;\r\n  const { track } = Components.Elements;\r\n\r\n  /**\r\n   * Indicates whether the live region is enabled or not.\r\n   */\r\n  const enabled = options.live && ! options.isNavigation;\r\n\r\n  /**\r\n   * The span element for the SR only text.\r\n   */\r\n  const sr = create( 'span', CLASS_SR );\r\n\r\n  /**\r\n   * Holds the RequestInterval instance.\r\n   */\r\n  const interval = RequestInterval( SR_REMOVAL_DELAY, apply( toggle, false ) );\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   * - JAWS needs `aria-atomic` to make the `aria-busy` work.\r\n   * - Immediately removing the SR makes Windows Narrator silent, hence requires the delay around 50ms.\r\n   */\r\n  function mount(): void {\r\n    if ( enabled ) {\r\n      disable( ! Components.Autoplay.isPaused() );\r\n      setAttribute( track, ARIA_ATOMIC, true );\r\n      sr.textContent   = '…';\r\n      sr.style.cssText = VISUALLY_HIDDEN;\r\n\r\n      on( EVENT_AUTOPLAY_PLAY, apply( disable, true ) );\r\n      on( EVENT_AUTOPLAY_PAUSE, apply( disable, false ) );\r\n      on( [ EVENT_MOVED, EVENT_SCROLLED ], apply( toggle, true ) );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggles the SR field and `aria-busy`.\r\n   *\r\n   * @param active - Determines whether to activate the field or not.\r\n   */\r\n  function toggle( active: boolean ): void {\r\n    setAttribute( track, ARIA_BUSY, active );\r\n\r\n    if ( active ) {\r\n      append( track, sr );\r\n      interval.start();\r\n    } else {\r\n      removeNode( sr );\r\n      interval.cancel();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    removeAttribute( track, [ ARIA_LIVE, ARIA_ATOMIC, ARIA_BUSY ] );\r\n    removeNode( sr );\r\n  }\r\n\r\n  /**\r\n   * Disables/enables the live region.\r\n   * Does nothing when the `live` option is not enabled.\r\n   *\r\n   * @param disabled - `true` to disable the live region or `false` to enable it again.\r\n   */\r\n  function disable( disabled: boolean ): void {\r\n    if ( enabled ) {\r\n      setAttribute( track, ARIA_LIVE, disabled ? 'off' : 'polite' );\r\n    }\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    disable,\r\n    destroy,\r\n  };\r\n};","/**\r\n * Styles for visually hidden.\r\n *\r\n * @since 5.0.0\r\n */\r\nexport const VISUALLY_HIDDEN = `border:0;clip:rect(0,0,0,0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px`;","import { Options } from '../types';\r\nimport { CLASSES } from './classes';\r\nimport { I18N } from './i18n';\r\n\r\n\r\n/**\r\n * The collection of default options.\r\n * Note that this collection does not contain all options.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const DEFAULTS: Options = {\r\n  type              : 'slide',\r\n  role              : 'region',\r\n  speed             : 400,\r\n  perPage           : 1,\r\n  cloneStatus       : true,\r\n  arrows            : true,\r\n  pagination        : true,\r\n  paginationKeyboard: true,\r\n  interval          : 5000,\r\n  pauseOnHover      : true,\r\n  pauseOnFocus      : true,\r\n  resetProgress     : true,\r\n  easing            : 'cubic-bezier(0.25, 1, 0.5, 1)',\r\n  drag              : true,\r\n  direction         : 'ltr',\r\n  trimSpace         : true,\r\n  focusableNodes    : 'a, button, textarea, input, select, iframe',\r\n  live              : true,\r\n  classes           : CLASSES,\r\n  i18n              : I18N,\r\n  reducedMotion: {\r\n    speed      : 0,\r\n    rewindSpeed: 0,\r\n    autoplay   : 'pause',\r\n  },\r\n};","/**\r\n * The collection of i18n strings.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const I18N = {\r\n  prev      : 'Previous slide',\r\n  next      : 'Next slide',\r\n  first     : 'Go to first slide',\r\n  last      : 'Go to last slide',\r\n  slideX    : 'Go to slide %s',\r\n  pageX     : 'Go to page %s',\r\n  play      : 'Start autoplay',\r\n  pause     : 'Pause autoplay',\r\n  carousel  : 'carousel',\r\n  slide     : 'slide',\r\n  select    : 'Select a slide to show',\r\n  slideLabel: '%s of %s', // [ slide number ] / [ slide size ]\r\n};\r\n","import { EVENT_MOUNTED, EVENT_REFRESH } from '../../constants/events';\r\nimport { ComponentConstructor, TransitionComponent } from '../../types';\r\nimport { nextTick, noop } from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The component for the fade transition.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Transition component object.\r\n */\r\nexport const Fade: ComponentConstructor<TransitionComponent> = ( Splide, Components, options, event ) => {\r\n  const { Slides } = Components;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    event.on( [ EVENT_MOUNTED, EVENT_REFRESH ], init );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   * Offsets all slides for stacking them onto the head of the list.\r\n   * The `nextTick` disables the initial fade transition of the first slide.\r\n   */\r\n  function init(): void {\r\n    Slides.forEach( Slide => {\r\n      Slide.style( 'transform', `translateX(-${ 100 * Slide.index }%)` );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Starts the transition.\r\n   *\r\n   * @param index - A slide index to be active.\r\n   * @param done  - The callback function that must be called after the transition ends.\r\n   */\r\n  function start( index: number, done: () => void ): void {\r\n    Slides.style( 'transition', `opacity ${ options.speed }ms ${ options.easing }` );\r\n    nextTick( done );\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    start,\r\n    cancel: noop,\r\n  };\r\n};\r\n","import { SLIDE } from '../../constants/types';\r\nimport { ComponentConstructor, TransitionComponent } from '../../types';\r\nimport { abs, apply, style } from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The component for the slide transition.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Transition component object.\r\n */\r\nexport const Slide: ComponentConstructor<TransitionComponent> = ( Splide, Components, options, event ) => {\r\n  const { Move, Controller, Scroll } = Components;\r\n  const { list } = Components.Elements;\r\n  const transition = apply( style, list, 'transition' );\r\n\r\n  /**\r\n   * Holds the `done` callback function.\r\n   */\r\n  let endCallback: () => void;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    event.bind( list, 'transitionend', e => {\r\n      if ( e.target === list && endCallback ) {\r\n        cancel();\r\n        endCallback();\r\n      }\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Starts the transition.\r\n   * The Move component calls this method just before the slider moves.\r\n   *\r\n   * @param index - A destination index.\r\n   * @param done  - The callback function that must be called after the transition ends.\r\n   */\r\n  function start( index: number, done: () => void ): void {\r\n    const destination = Move.toPosition( index, true );\r\n    const position    = Move.getPosition();\r\n    const speed       = getSpeed( index );\r\n\r\n    if ( abs( destination - position ) >= 1 && speed >= 1 ) {\r\n      if ( options.useScroll ) {\r\n        Scroll.scroll( destination, speed, false, done );\r\n      } else {\r\n        transition( `transform ${ speed }ms ${ options.easing }` );\r\n        Move.translate( destination, true );\r\n        endCallback = done;\r\n      }\r\n    } else {\r\n      Move.jump( index );\r\n      done();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancels the transition.\r\n   */\r\n  function cancel(): void {\r\n    transition( '' );\r\n    Scroll.cancel();\r\n  }\r\n\r\n  /**\r\n   * Returns the transition speed.\r\n   *\r\n   * @param index - A destination index.\r\n   */\r\n  function getSpeed( index: number ): number {\r\n    const { rewindSpeed } = options;\r\n\r\n    if ( Splide.is( SLIDE ) && rewindSpeed ) {\r\n      const prev = Controller.getIndex( true );\r\n      const end  = Controller.getEnd();\r\n\r\n      if ( ( prev === 0 && index >= end ) || ( prev >= end && index === 0 ) ) {\r\n        return rewindSpeed;\r\n      }\r\n    }\r\n\r\n    return options.speed;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    start,\r\n    cancel,\r\n  };\r\n};\r\n","import { COMPONENTS } from '../../components';\r\nimport { SlideMatcher } from '../../components/Slides/Slides';\r\nimport { CLASS_INITIALIZED } from '../../constants/classes';\r\nimport { DEFAULTS } from '../../constants/defaults';\r\nimport { EVENT_DESTROY, EVENT_MOUNTED, EVENT_READY, EVENT_REFRESH } from '../../constants/events';\r\nimport { DATA_ATTRIBUTE } from '../../constants/project';\r\nimport { CREATED, DESTROYED, IDLE, STATES } from '../../constants/states';\r\nimport { FADE } from '../../constants/types';\r\nimport { Fade, Slide } from '../../transitions';\r\nimport { AnyFunction, ComponentConstructor, Components, EventMap, Options, SyncTarget } from '../../types';\r\nimport {\r\n  addClass,\r\n  assign,\r\n  empty,\r\n  EventInterface,\r\n  forOwn,\r\n  getAttribute,\r\n  isString,\r\n  merge,\r\n  query,\r\n  State,\r\n} from '@splidejs/utils';\r\nimport { assert } from '../../utils';\r\nimport { ARIA_LABEL, ARIA_LABELLEDBY } from '../../constants/attributes';\r\n\r\n\r\n/**\r\n * The frontend class for the Splide slider.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport class Splide {\r\n  /**\r\n   * Changes the default options for all Splide instances.\r\n   */\r\n  static defaults: Options = {};\r\n\r\n  /**\r\n   * The collection of state numbers.\r\n   */\r\n  static readonly STATES = STATES;\r\n\r\n  /**\r\n   * The root element where the Splide is applied.\r\n   */\r\n  readonly root: HTMLElement;\r\n\r\n  /**\r\n   * The EventBusObject object.\r\n   */\r\n  readonly event = EventInterface();\r\n\r\n  /**\r\n   * The collection of all component objects.\r\n   */\r\n  readonly Components: Components = {} as Components;\r\n\r\n  /**\r\n   * The StateObject object.\r\n   */\r\n  readonly state = State( CREATED );\r\n\r\n  /**\r\n   * An array with SyncTarget objects for splide instances to sync with.\r\n   */\r\n  readonly splides: SyncTarget[] = [];\r\n\r\n  /**\r\n   * The current options.\r\n   */\r\n  private readonly _o: Options = {};\r\n\r\n  /**\r\n   * The collection of all components.\r\n   */\r\n  private _C: Components;\r\n\r\n  /**\r\n   * The collection of extensions.\r\n   */\r\n  private _E: Record<string, ComponentConstructor> = {};\r\n\r\n  /**\r\n   * The Transition component.\r\n   */\r\n  private _T: ComponentConstructor;\r\n\r\n  /**\r\n   * The Splide constructor.\r\n   *\r\n   * @param target  - The selector for the target element, or the element itself.\r\n   * @param options - Optional. An object with options.\r\n   */\r\n  constructor( target: string | HTMLElement, options: Options = {} ) {\r\n    const root = isString( target ) ? query<HTMLElement>( document, target ) : target;\r\n    assert( root, `${ root } is invalid.` );\r\n\r\n    this.root = root;\r\n\r\n    options = merge( {\r\n      label     : getAttribute( root, ARIA_LABEL ) || '',\r\n      labelledby: getAttribute( root, ARIA_LABELLEDBY ) || '',\r\n    }, DEFAULTS, Splide.defaults, options );\r\n\r\n    try {\r\n      merge( options, JSON.parse( getAttribute( root, DATA_ATTRIBUTE ) ) );\r\n    } catch ( e ) {\r\n      assert( false, 'Invalid JSON' );\r\n    }\r\n\r\n    this._o = Object.create( merge( {}, options ) );\r\n  }\r\n\r\n  /**\r\n   * Initializes the instance.\r\n   *\r\n   * @param Extensions - Optional. An object with extensions.\r\n   * @param Transition - Optional. A Transition component.\r\n   *\r\n   * @return `this`\r\n   */\r\n  mount( Extensions: Record<string, ComponentConstructor> = this._E, Transition: ComponentConstructor = this._T ): this {\r\n    const { state, Components } = this;\r\n    assert( state.is( [ CREATED, DESTROYED ] ), 'Already mounted!' );\r\n\r\n    state.set( CREATED );\r\n\r\n    this._C = Components;\r\n    this._T = Transition || ( this.is( FADE ) ? Fade : Slide );\r\n    this._E = Extensions;\r\n\r\n    const Constructors = assign( {}, COMPONENTS, this._E, { Transition: this._T } );\r\n\r\n    forOwn( Constructors, ( Component, key ) => {\r\n      const component = Component( this, Components, this._o, this.event.create() );\r\n      Components[ key ] = component;\r\n      component.setup && component.setup();\r\n    } );\r\n\r\n    forOwn( Components, component => {\r\n      component.mount && component.mount();\r\n    } );\r\n\r\n    this.emit( EVENT_MOUNTED );\r\n\r\n    addClass( this.root, CLASS_INITIALIZED );\r\n\r\n    state.set( IDLE );\r\n    this.emit( EVENT_READY );\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Syncs the slider with the provided one.\r\n   * This method must be called before the `mount()`.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const primary   = new Splide();\r\n   * const secondary = new Splide();\r\n   *\r\n   * primary.sync( secondary );\r\n   * primary.mount();\r\n   * secondary.mount();\r\n   * ```\r\n   *\r\n   * @param splide - A Splide instance to sync with.\r\n   *\r\n   * @return `this`\r\n   */\r\n  sync( splide: Splide ): this {\r\n    this.splides.push( { splide } );\r\n    splide.splides.push( { splide: this, isParent: true } );\r\n\r\n    if ( this.state.is( IDLE ) ) {\r\n      this._C.Sync.remount();\r\n      splide.Components.Sync.remount();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Moves the carousel with the following control pattern.\r\n   *\r\n   * | Pattern | Description |\r\n   * |---|---|\r\n   * | `i` | Goes to the slide `i` |\r\n   * | `'+${i}'` | Increments the slide index by `i` |\r\n   * | `'-${i}'` | Decrements the slide index by `i` |\r\n   * | `'>'` | Goes to the next page |\r\n   * | `'<'` | Goes to the previous page |\r\n   * | `>${i}` | Goes to the page `i` |\r\n   *\r\n   * In most cases, `'>'` and `'<'` notations are enough to control the slider\r\n   * because they respect `perPage` and `perMove` options.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const splide = new Splide();\r\n   *\r\n   * // Goes to the slide 1:\r\n   * splide.go( 1 );\r\n   *\r\n   * // Increments the index:\r\n   * splide.go( '+2' );\r\n   *\r\n   * // Goes to the next page:\r\n   * splide.go( '>' );\r\n   *\r\n   * // Goes to the page 2:\r\n   * splide.go( '>2' );\r\n   * ```\r\n   *\r\n   * @param control - A control pattern.\r\n   *\r\n   * @return `this`\r\n   */\r\n  go( control: number | string ): this {\r\n    this._C.Controller.go( control );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Moves the carousel without transition.\r\n   *\r\n   * @param control - A control pattern. See `move()` for more details.\r\n   *\r\n   * @return `this`\r\n   */\r\n  jump( control: number | string ): this {\r\n    this._C.Controller.jump( control );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Registers an event handler.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const splide = new Splide();\r\n   *\r\n   * // Listens to a single event:\r\n   * splide.on( 'move', function() {} );\r\n   *\r\n   * // Listens to multiple events:\r\n   * splide.on( 'move resize', function() {} );\r\n   *\r\n   * // Appends a namespace:\r\n   * splide.on( 'move.myNamespace resize.myNamespace', function() {} );\r\n   * ```\r\n   *\r\n   * @param events   - An event name or names separated by spaces. Use a dot(.) to append a namespace.\r\n   * @param callback - A callback function.\r\n   *\r\n   * @return `this`\r\n   */\r\n  on<K extends keyof EventMap>( events: K, callback: EventMap[ K ] ): this;\r\n  on( events: string | string[], callback: AnyFunction ): this;\r\n  on( events: string | string[], callback: AnyFunction ): this {\r\n    this.event.on( events, callback );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes the registered all handlers for the specified event or events.\r\n   * If you want to only remove a particular handler, use namespace to identify it.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const splide = new Splide();\r\n   *\r\n   * // Removes all handlers assigned to \"move\":\r\n   * splide.off( 'move' );\r\n   *\r\n   * // Only removes handlers that belong to the specified namespace:\r\n   * splide.off( 'move.myNamespace' );\r\n   * ```\r\n   *\r\n   * @param events   - An event name or names separated by spaces. Use a dot(.) to append a namespace.\r\n   * @param callback - A callback function to remove.\r\n   *\r\n   * @return `this`\r\n   */\r\n  off<K extends keyof EventMap>( events: K | K[] | string | string[], callback: AnyFunction ): this {\r\n    this.event.off( events, callback );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Emits an event and triggers registered handlers.\r\n   *\r\n   * @param event - An event name to emit.\r\n   * @param args  - Optional. Any number of arguments to pass to handlers.\r\n   *\r\n   * @return `this`\r\n   */\r\n  emit<K extends keyof EventMap>( event: K, ...args: Parameters<EventMap[ K ]> ): this;\r\n  emit( event: string, ...args: any[] ): this;\r\n  emit( event: string, ...args: any[] ): this {\r\n    this.event.emit( event, ...args );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Inserts a slide at the specified position.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const splide = new Splide();\r\n   * splide.mount();\r\n   *\r\n   * // Adds the slide by the HTML:\r\n   * splide.add( '<li></li> );\r\n   *\r\n   * // or adds the element:\r\n   * splide.add( document.createElement( 'li' ) );\r\n   * ```\r\n   *\r\n   * @param slides - A slide element, an HTML string that represents a slide, or an array with them.\r\n   * @param index  - Optional. An index to insert a slide at.\r\n   *\r\n   * @return `this`\r\n   */\r\n  add( slides: string | HTMLElement | Array<string | HTMLElement>, index?: number ): this {\r\n    this._C.Slides.add( slides, index );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes slides that match the matcher\r\n   * that can be an index, an array with indices, a selector, or an iteratee function.\r\n   *\r\n   * @param matcher - An index, an array with indices, a selector string, or an iteratee function.\r\n   */\r\n  remove( matcher: SlideMatcher ): this {\r\n    this._C.Slides.remove( matcher );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Checks the slider type.\r\n   *\r\n   * @param type - A type to test.\r\n   *\r\n   * @return `true` if the type matches the current one, or otherwise `false`.\r\n   */\r\n  is( type: string ): boolean {\r\n    return this._o.type === type;\r\n  }\r\n\r\n  /**\r\n   * Refreshes the slider.\r\n   *\r\n   * @return `this`\r\n   */\r\n  refresh(): this {\r\n    this.emit( EVENT_REFRESH );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Destroys the slider.\r\n   *\r\n   * @param completely - Optional. If `true`, Splide will not remount the slider by breakpoints.\r\n   *\r\n   * @return `this`\r\n   */\r\n  destroy( completely = true ): this {\r\n    const { event, state } = this;\r\n\r\n    if ( state.is( CREATED ) ) {\r\n      // Postpones destruction requested before the slider becomes ready.\r\n      this.on( EVENT_READY, this.destroy.bind( this, completely ) );\r\n    } else {\r\n      forOwn( this._C, component => {\r\n        component.destroy && component.destroy( completely );\r\n      }, true );\r\n\r\n      event.emit( EVENT_DESTROY );\r\n      event.destroy();\r\n      completely && empty( this.splides );\r\n      state.set( DESTROYED );\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns options.\r\n   *\r\n   * @return An object with the latest options.\r\n   */\r\n  get options(): Options {\r\n    return this._o;\r\n  }\r\n\r\n  /**\r\n   * Merges options to the current options and emits `updated` event.\r\n   *\r\n   * @param options - An object with new options.\r\n   */\r\n  set options( options: Options ) {\r\n    this._C.Breakpoints.set( options, true, true );\r\n  }\r\n\r\n  /**\r\n   * Returns the number of slides without clones.\r\n   *\r\n   * @return The number of slides.\r\n   */\r\n  get length(): number {\r\n    return this._C.Slides.getLength( true );\r\n  }\r\n\r\n  /**\r\n   * Returns the active slide index.\r\n   *\r\n   * @return The active slide index.\r\n   */\r\n  get index(): number {\r\n    return this._C.Controller.getIndex();\r\n  }\r\n}\r\n"],"names":["MEDIA_PREFERS_REDUCED_MOTION","MOVING","SCROLLING","STATES","CREATED","MOUNTED","IDLE","DRAGGING","DESTROYED","empty","array","length","apply","func","args","bind","nextTick","setTimeout","noop","raf","requestAnimationFrame","typeOf","type","subject","isObject","isNull","isArray","Array","isFunction","isString","isUndefined","isHTMLElement","ownerDocument","defaultView","window","HTMLElement","e","toArray","value","forEach","values","iteratee","includes","push","items","arrayProto","prototype","slice","arrayLike","start","end","call","toggleClass","elm","classes","force","split","className","classList","toggle","addClass","append","parent","children2","appendChild","before","nodes","ref","node","parentNode","insertBefore","matches","selector","children","filter","child2","child","firstElementChild","assign","Object","ownKeys","keys","forOwn","object","right","reverse","key","merge","sources","source","omit","removeAttribute","elms","attrs","attr","setAttribute","value2","name","String","create","tag2","document","createElement","style","prop","getComputedStyle","display","display2","focus","preventScroll","getAttribute","hasClass","contains","rect","target","getBoundingClientRect","removeNode","removeChild","parseHtml","html","DOMParser","parseFromString","body","prevent","stopPropagation","preventDefault","stopImmediatePropagation","query","querySelector","queryAll","querySelectorAll","removeClass","timeOf","timeStamp","unit","min","max","floor","ceil","abs","sign","Math","approximatelyEqual","x","y","epsilon","between","number","exclusive","minimum","maximum","clamp","format","string","replacements","replace","replacement","pad","padStart","ids","forEachEvent","events","event","arrayRemove","predicate","removed","let","i","splice","EventBinder","removersRef","removers","callback","options","addEventListener","removeEventListener","destroy","remover","EventBus","listenersRef","listeners","on","off","listener","emit","RequestInterval","interval","onInterval","onUpdate","limit","now","Date","startTime","rate","id","paused","count","update","pause","cancel","cancelAnimationFrame","resume","rewind","set","time","isPaused","State","initialState","state","is","states","EVENT_MOUNTED","EVENT_MOVE","EVENT_MOVED","EVENT_CLICK","EVENT_ACTIVE","EVENT_INACTIVE","EVENT_VISIBLE","EVENT_HIDDEN","EVENT_REFRESH","EVENT_UPDATED","EVENT_RESIZE","EVENT_RESIZED","EVENT_SCROLL","EVENT_SCROLLED","EVENT_OVERFLOW","EVENT_NAVIGATION_MOUNTED","EVENT_AUTOPLAY_PLAY","EVENT_AUTOPLAY_PAUSE","EVENT_SLIDE_KEYDOWN","EVENT_SHIFTED","EVENT_END_INDEX_CHANGED","NOT_OVERFLOW_KEY","ARROW_LEFT","ARROW_RIGHT","TTB","ORIENTATION_MAP","width","left","X","Y","ArrowLeft","ArrowRight","ROLE","TAB_INDEX","ARIA_CONTROLS","ARIA_CURRENT","ARIA_SELECTED","ARIA_LABEL","ARIA_LABELLEDBY","ARIA_HIDDEN","ARIA_ORIENTATION","ARIA_ROLEDESCRIPTION","ARIA_LIVE","ARIA_BUSY","ARIA_ATOMIC","ALL_ATTRIBUTES","PROJECT_CODE","DATA_ATTRIBUTE","CLASS_PREFIX","CLASS_ROOT","CLASS_TRACK","CLASS_LIST","CLASS_SLIDE","CLASS_CLONE","CLASS_CONTAINER","CLASS_ARROWS","CLASS_ARROW","CLASS_ARROW_PREV","CLASS_ARROW_NEXT","CLASS_PAGINATION","CLASS_PAGINATION_PAGE","CLASS_PROGRESS_BAR","CLASS_TOGGLE","CLASS_SR","CLASS_ACTIVE","CLASS_PREV","CLASS_NEXT","CLASS_VISIBLE","CLASS_LOADING","CLASS_FOCUS_IN","CLASS_OVERFLOW","STATUS_CLASSES","CLASSES","slide","clone","arrows","arrow","prev","next","pagination","page","spinner","assert","condition","message","Error","POINTER_DOWN_EVENTS","POINTER_MOVE_EVENTS","POINTER_UP_EVENTS","SLIDE","LOOP","FADE","Slide","Splide","index","slideIndex","Components","root","isNavigation","updateOnMove","i18n","slideFocus","Elements","resolve","Direction","styles","label","isClone","container","destroyed","initNavigation","controls","splides","map","splide","Slides","getAt","join","slideX","onMove","curr","hidden","active","isActive","self","visible","trackRect","track","slideRect","focusableNodes","activeElement","cloneStatus","mount","slideLabel","pos","first","get","size","useContainer","_style","isWithin","from","distance","diff","INTERVAL_DATA_ATTRIBUTE","SCROLL_LISTENER_OPTIONS","passive","capture","SRC_DATA_ATTRIBUTE","SRCSET_DATA_ATTRIBUTE","IMAGE_SELECTOR","TRIGGER_KEYS","COMPONENTS","Breakpoints","breakpoints","reducedMotion","binder","entries","completely","register","queryList","matchMedia","direction","merged","reduce","entry","refresh","opts","base","notify","getPrototypeOf","setup","isMin","mediaQuery","sort","n","m","Layout","isOverflow","enable","axisOnly","match","offset","toLowerCase","charAt","toUpperCase","orient","elements","slides","rootClasses","trackClasses","list","isUsingKey","find","bar","prefix","role","tagName","carousel","concat","getClasses","labelledby","closest","drag","init","Slide1","Slide2","excludeClones","matcher","getIn","Controller","toIndex","hasFocus","perPage","add","forEachItem","observeImages","images","img","remove","getLength","isEnough","styleSlides","vertical","rootRect","overflow","cssPadding","resize","newRect","height","cssHeight","gap","autoWidth","fixedWidth","cssSlideSize","fixedHeight","autoHeight","padding","heightRatio","listSize","slideSize","withoutGap","getGap","totalSize","sliderSize","second","duration","getPadding","parseFloat","Clones","clones","cloneCount","remount","observe","computeCloneCount","generate","isHead","cloneNode","go","fixedCount","fixedSize","Move","Transition","reposition","isBusy","Scroll","jump","translate","toPosition","position","preventLoop","destination","exceededMax","getEnd","shift","backwards","excess","getLimit","getPosition","minDistance","Infinity","trimming","trimSpace","move","dest","shifted","exceededLimit","exceededMin","omitEnd","isLoop","isSlide","getNext","getAdjacent","getPrev","currIndex","endIndex","prevIndex","slideCount","perMove","onResized","control","allowSameIndex","loop","indicator","computeDestIndex","setIndex","snapPage","toPage","waitForTransition","speed","scroll","snap","getIndex","toDest","Arrows","placeholder","wrapper","created","wrapperClasses","enabled","createArrow","arrowPath","nextIndex","prevLabel","nextLabel","last","disabled","Autoplay","autoplay","hovered","focused","stopped","play","resetProgress","stop","autoToggle","pauseOnHover","pauseOnFocus","friction","onScrolled","noConstrain","immediately","clear","onEnd","to","t","easingFunc","pow","Drag","basePosition","baseEvent","prevBaseEvent","isFree","dragging","exceeded","clickPrevented","disable","onPointerDown","isTouch","noDrag","isTouchEvent","button","onPointerMove","onPointerUp","save","releaseTouch","diffCoord","thresholds","isObj","mouse","cancelable","expired","diffTime","hasExceeded","touch","velocity","flickPower","flickMaxPages","rewindByDrag","onClick","orthogonal","coordOf","getBaseEvent","changedTouches","TouchEvent","isDragging","Keyboard","keyboard","onKeydown","_disabled","LazyLoad","isSequential","lazyLoad","src","srcset","parentElement","loadNext","check","preloadPages","data","load","onLoad","Pagination","paginationClasses","dir","getDirection","nextPage","item","paginationDirection","select","li","class","text","pageX","paginationKeyboard","Sync","isParent","sync","navigate","ev","Wheel","lastTime","onWheel","sleep","deltaY","wheelMinThreshold","wheelSleep","releaseWheel","wheel","Live","live","sr","textContent","cssText","DEFAULTS","easing","rewindSpeed","Fade","done","transition","endCallback","useScroll","defaults","EventInterface","bus","o","constructor","this","JSON","parse","_o","Extensions","_E","_T","_C","Component","component"],"mappings":"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"}