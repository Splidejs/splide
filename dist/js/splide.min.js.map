{"version":3,"file":"splide.min.js","sources":["../../src/js/constants/media.ts","../../src/js/constants/states.ts","../../../utils/dist/splide-utils.esm.js","../../src/js/constants/events.ts","../../src/js/components/Breakpoints/Breakpoints.ts","../../src/js/constants/arrows.ts","../../src/js/constants/directions.ts","../../src/js/components/Direction/Direction.ts","../../src/js/constants/attributes.ts","../../src/js/constants/project.ts","../../src/js/constants/classes.ts","../../src/js/utils/error/assert/assert.ts","../../src/js/components/Drag/constants.ts","../../src/js/constants/types.ts","../../src/js/components/Slides/Slide.ts","../../src/js/components/Autoplay/constants.ts","../../src/js/constants/listener-options.ts","../../src/js/components/LazyLoad/constants.ts","../../src/js/components/Sync/Sync.ts","../../src/js/components/index.ts","../../src/js/components/Elements/Elements.ts","../../src/js/components/Slides/Slides.ts","../../src/js/components/Layout/Layout.ts","../../src/js/components/Clones/Clones.ts","../../src/js/components/Move/Move.ts","../../src/js/components/Scroll/Scroll.ts","../../src/js/components/Scroll/constants.ts","../../src/js/components/Controller/Controller.ts","../../src/js/components/Arrows/Arrows.ts","../../src/js/components/Arrows/path.ts","../../src/js/components/Autoplay/Autoplay.ts","../../src/js/components/Drag/Drag.ts","../../src/js/components/Keyboard/Keyboard.ts","../../src/js/components/LazyLoad/LazyLoad.ts","../../src/js/components/Pagination/Pagination.ts","../../src/js/components/Wheel/Wheel.ts","../../src/js/components/Live/Live.ts","../../src/js/constants/defaults.ts","../../src/js/constants/i18n.ts","../../src/js/transitions/Fade/Fade.ts","../../src/js/transitions/Slide/Slide.ts","../../src/js/core/Splide/Splide.ts"],"sourcesContent":["/**\r\n * Matches when users request reducing non-essential animations.\r\n *\r\n * @link https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion\r\n */\r\nexport const MEDIA_PREFERS_REDUCED_MOTION = '(prefers-reduced-motion: reduce)';","/**\r\n * Splide has been just created.\r\n */\r\nexport const CREATED = 1;\r\n\r\n/**\r\n * Splide has mounted components.\r\n */\r\nexport const MOUNTED = 2;\r\n\r\n/**\r\n * Splide is ready.\r\n */\r\nexport const IDLE = 3;\r\n\r\n/**\r\n * Splide is moving.\r\n */\r\nexport const MOVING = 4;\r\n\r\n/**\r\n * Splide is moving.\r\n */\r\nexport const SCROLLING = 5;\r\n\r\n/**\r\n * The user is dragging the slider.\r\n */\r\nexport const DRAGGING = 6;\r\n\r\n/**\r\n * Splide has been destroyed.\r\n */\r\nexport const DESTROYED = 7;\r\n\r\n/**\r\n * The collection of all states.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const STATES = {\r\n  CREATED,\r\n  MOUNTED,\r\n  IDLE,\r\n  MOVING,\r\n  SCROLLING,\r\n  DRAGGING,\r\n  DESTROYED,\r\n};\r\n","function empty(array) {\n  array.length = 0;\n}\nfunction apply(func, ...args) {\n  return func.bind(null, ...args);\n}\nconst nextTick = setTimeout;\nconst noop = () => {\n};\nfunction raf(func) {\n  return requestAnimationFrame(func);\n}\nfunction typeOf(type, subject) {\n  return typeof subject === type;\n}\nfunction isObject(subject) {\n  return !isNull(subject) && typeOf(\"object\", subject);\n}\nconst isArray = Array.isArray;\nconst isFunction = apply(typeOf, \"function\");\nconst isString = apply(typeOf, \"string\");\nconst isBoolean = apply(typeOf, \"boolean\");\nconst isUndefined = apply(typeOf, \"undefined\");\nfunction isNull(subject) {\n  return subject === null;\n}\nfunction isHTMLElement(subject) {\n  try {\n    return subject instanceof (subject.ownerDocument.defaultView || window).HTMLElement;\n  } catch (e) {\n    return false;\n  }\n}\nfunction toArray(value) {\n  return isArray(value) ? value : [value];\n}\nfunction forEach(values, iteratee) {\n  toArray(values).forEach(iteratee);\n}\nfunction push(array, items) {\n  array.push(...toArray(items));\n  return array;\n}\nconst arrayProto = Array.prototype;\nfunction slice(arrayLike, start, end) {\n  return arrayProto.slice.call(arrayLike, start, end);\n}\nfunction includes(arrayLike, value) {\n  return arrayProto.includes.call(arrayLike, value);\n}\nfunction find(arrayLike, predicate) {\n  return arrayProto.find.call(arrayLike, predicate);\n}\nfunction assert(assertion, message) {\n  if (!assertion) {\n    throw new Error(message);\n  }\n}\nconst error = console.error;\nfunction abstractMethod() {\n  assert(0, \"Abstract!\");\n}\nconst assign = Object.assign;\nconst ownKeys = Object.keys;\nfunction forOwn(object, iteratee, right) {\n  if (object) {\n    (right ? ownKeys(object).reverse() : ownKeys(object)).forEach((key) => {\n      key !== \"__proto__\" && iteratee(object[key], key);\n    });\n  }\n  return object;\n}\nfunction merge(object, ...sources) {\n  sources.forEach((source) => {\n    forOwn(source, (value, key) => {\n      if (isArray(value)) {\n        value = value.slice();\n      } else if (isObject(value)) {\n        value = merge({}, isObject(object[key]) ? object[key] : {}, value);\n      }\n      object[key] = value;\n    });\n  });\n  return object;\n}\nfunction omit(object, keys) {\n  forEach(keys || ownKeys(object), (key) => {\n    delete object[key];\n  });\n  return object;\n}\nfunction inherit(child2, parent) {\n  return assign(Object.create(parent), child2);\n}\nfunction parseOption(option, defaults) {\n  return option === false || option === null ? false : merge({}, defaults || {}, isObject(option) ? option : {});\n}\nfunction toggleClass(elm, classes, force) {\n  if (elm) {\n    forEach(isString(classes) ? classes.split(\" \") : classes, (className) => {\n      className && elm.classList.toggle(className, force);\n    });\n  }\n}\nfunction addClass(elm, classes) {\n  toggleClass(elm, classes, true);\n}\nfunction append(parent, ...children2) {\n  parent && parent.append(...children2);\n}\nfunction before(ref, ...nodes) {\n  ref && ref.before(...nodes);\n}\nfunction matches(elm, selector) {\n  return isHTMLElement(elm) && elm.matches(selector);\n}\nfunction children(parent, selector) {\n  const children2 = parent ? slice(parent.children) : [];\n  return selector ? children2.filter((child2) => matches(child2, selector)) : children2;\n}\nfunction child(parent, selector) {\n  return selector ? children(parent, selector)[0] : parent.firstElementChild;\n}\nfunction closest(from, selector) {\n  return from.closest(selector);\n}\nfunction removeAttribute(elms, attrs) {\n  forEach(elms, (elm) => {\n    forEach(attrs, (attr) => {\n      elm && elm.removeAttribute(attr);\n    });\n  });\n}\nfunction setAttribute(elms, attrs, value) {\n  if (isObject(attrs)) {\n    forOwn(attrs, (value2, name) => {\n      setAttribute(elms, name, value2);\n    });\n  } else {\n    forEach(elms, (elm) => {\n      isNull(value) || value === \"\" ? removeAttribute(elm, attrs) : elm.setAttribute(attrs, String(value));\n    });\n  }\n}\nfunction create(tag2, attrs, parent) {\n  const elm = document.createElement(tag2);\n  if (attrs) {\n    isString(attrs) ? addClass(elm, attrs) : setAttribute(elm, attrs);\n  }\n  parent && append(parent, elm);\n  return elm;\n}\nfunction style(elm, prop, value) {\n  if (isUndefined(value)) {\n    return getComputedStyle(elm)[prop];\n  }\n  if (!isNull(value)) {\n    elm.style[prop] = `${value}`;\n  }\n}\nfunction display(elm, display2) {\n  style(elm, \"display\", display2);\n}\nfunction focus(elm) {\n  isHTMLElement(elm) && elm.focus({ preventScroll: true });\n}\nfunction getAttribute(elm, attr) {\n  return elm.getAttribute(attr);\n}\nfunction hasClass(elm, className) {\n  return !!elm && elm.classList.contains(className);\n}\nfunction rect(target) {\n  return target.getBoundingClientRect();\n}\nfunction removeNode(nodes) {\n  forEach(nodes, (node) => {\n    if (node && node.parentNode) {\n      node.parentNode.removeChild(node);\n    }\n  });\n}\nfunction measure(parent, value) {\n  if (isString(value)) {\n    const div2 = create(\"div\", { style: `width: ${value}; position: absolute;` }, parent);\n    value = rect(div2).width;\n    removeNode(div2);\n  }\n  return value;\n}\nfunction parseHtml(html) {\n  return child(new DOMParser().parseFromString(html, \"text/html\").body);\n}\nfunction prevent(e, stopPropagation) {\n  e.preventDefault();\n  if (stopPropagation) {\n    e.stopPropagation();\n    e.stopImmediatePropagation();\n  }\n}\nfunction query(parent, selector) {\n  return parent && parent.querySelector(selector);\n}\nfunction queryAll(parent, selector) {\n  return selector && parent ? slice(parent.querySelectorAll(selector)) : [];\n}\nfunction removeClass(elm, classes) {\n  toggleClass(elm, classes, false);\n}\nfunction timeOf(e) {\n  return e.timeStamp;\n}\nfunction unit(value) {\n  return isString(value) ? value : value ? `${value}px` : \"\";\n}\nfunction buildAttrs(attrs) {\n  let result = \"\";\n  forOwn(attrs, (value, key) => {\n    result += value || value === 0 ? ` ${key}${value !== true ? `=\"${value}\"` : \"\"}` : \"\";\n  });\n  return result.trim();\n}\nfunction classNames(...args) {\n  return args.reduce((classes, value) => {\n    return `${classes} ${isArray(value) ? classNames(...value) : value || \"\"}`.trim();\n  }, \"\");\n}\nfunction tag(tag2, attrs) {\n  attrs = isArray(attrs) || !isObject(attrs) ? { class: classNames(attrs) } : attrs;\n  return `<${`${tag2} ${attrs ? buildAttrs(attrs) : \"\"}`.trim()}>`;\n}\nfunction div(attrs) {\n  return tag(\"div\", attrs);\n}\nconst { min, max, floor, ceil, abs, sign } = Math;\nfunction approximatelyEqual(x, y, epsilon) {\n  return abs(x - y) < epsilon;\n}\nfunction between(number, x, y, exclusive) {\n  const minimum = min(x, y);\n  const maximum = max(x, y);\n  return exclusive ? minimum < number && number < maximum : minimum <= number && number <= maximum;\n}\nfunction clamp(number, x, y) {\n  const minimum = min(x, y);\n  const maximum = max(x, y);\n  return min(max(minimum, number), maximum);\n}\nfunction camelToKebab(string) {\n  return string.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\nfunction format(string, ...replacements) {\n  return replacements.reduce((prev, curr) => prev.replace(\"%s\", `${curr}`), string);\n}\nfunction pad(number, length = 2) {\n  return `${number}`.padStart(length, \"0\");\n}\nconst ids = {};\nfunction uniqueId(prefix) {\n  return `${prefix}${pad(ids[prefix] = (ids[prefix] || 0) + 1)}`;\n}\nfunction forEachEvent(events, iteratee) {\n  forEach(events, (event) => {\n    isString(event) && event.split(\" \").forEach(iteratee);\n  });\n}\nfunction EventBinder(removersRef) {\n  const removers = removersRef || /* @__PURE__ */ new Set();\n  const key = removersRef ? {} : void 0;\n  let destroyed;\n  function bind(target, events, callback, options) {\n    assert(!destroyed);\n    forEachEvent(events, (event) => {\n      target.addEventListener(event, callback, options);\n      removers.add([target.removeEventListener.bind(target, event, callback, options), key]);\n    });\n  }\n  function destroy(hard) {\n    removers.forEach((remover) => {\n      if (!key || remover[1] === key) {\n        remover[0]();\n        removers.delete(remover);\n      }\n    });\n    destroyed = hard;\n  }\n  return {\n    bind,\n    lock: apply(EventBinder, removers),\n    destroy\n  };\n}\nfunction EventBus(listenersRef) {\n  const listeners = listenersRef || {};\n  const key = listenersRef ? {} : void 0;\n  let destroyed;\n  function on(events, callback) {\n    assert(!destroyed);\n    forEachEvent(events, (event) => {\n      listeners[event] = push(get(event), [[callback, key]]);\n    });\n  }\n  function off(events, callback) {\n    forEachEvent(events, (event) => {\n      listeners[event] = get(event).filter((listener) => !((!callback || listener[0] === callback) && listener[1] === key));\n    });\n  }\n  function emit(event, ...args) {\n    get(event).forEach((listener) => listener[0] && listener[0](...args));\n  }\n  function get(event) {\n    return listeners[event] || [];\n  }\n  function destroy(hard) {\n    forOwn(listeners, (entries, event) => {\n      listeners[event] = entries.filter((listener) => {\n        const unlocked = !key || listener[1] === key;\n        unlocked && empty(listener);\n        return !unlocked;\n      });\n    });\n    !key && omit(listeners);\n    destroyed = hard;\n  }\n  return {\n    on,\n    off,\n    emit,\n    lock: apply(EventBus, listeners),\n    destroy\n  };\n}\nfunction EventInterface(binder = EventBinder(), bus = EventBus()) {\n  function lock() {\n    return EventInterface(binder.lock(), bus.lock());\n  }\n  function destroy(hard) {\n    binder.destroy(hard);\n    bus.destroy(hard);\n  }\n  return assign({}, binder, bus, { lock, destroy });\n}\nfunction RequestInterval(interval, onInterval, onUpdate, limit) {\n  const { now } = Date;\n  let startTime;\n  let rate = 0;\n  let id;\n  let paused = true;\n  let count = 0;\n  function update() {\n    if (!paused) {\n      rate = interval ? min((now() - startTime) / interval, 1) : 1;\n      onUpdate && onUpdate(rate);\n      if (rate >= 1) {\n        onInterval();\n        startTime = now();\n        if (limit && ++count >= limit) {\n          return pause();\n        }\n      }\n      id = raf(update);\n    }\n  }\n  function start(resume) {\n    resume || cancel();\n    startTime = now() - (resume ? rate * interval : 0);\n    paused = false;\n    id = raf(update);\n  }\n  function pause() {\n    paused = true;\n  }\n  function rewind() {\n    startTime = now();\n    rate = 0;\n    if (onUpdate) {\n      onUpdate(rate);\n    }\n  }\n  function cancel() {\n    id && cancelAnimationFrame(id);\n    rate = 0;\n    id = 0;\n    paused = true;\n  }\n  function set(time) {\n    interval = time;\n  }\n  function isPaused() {\n    return paused;\n  }\n  return {\n    start,\n    rewind,\n    pause,\n    cancel,\n    set,\n    isPaused\n  };\n}\nfunction State(initialState) {\n  let state = initialState;\n  function set(value) {\n    state = value;\n  }\n  function is(states) {\n    return includes(toArray(states), state);\n  }\n  return { set, is };\n}\nfunction Throttle(func, duration) {\n  const interval = RequestInterval(duration || 0, func, void 0, 1);\n  return () => {\n    interval.isPaused() && interval.start();\n  };\n}\nexport {\n  EventBinder,\n  EventBus,\n  EventInterface,\n  RequestInterval,\n  State,\n  Throttle,\n  abs,\n  abstractMethod,\n  addClass,\n  append,\n  apply,\n  approximatelyEqual,\n  assert,\n  assign,\n  before,\n  between,\n  buildAttrs,\n  camelToKebab,\n  ceil,\n  child,\n  children,\n  clamp,\n  classNames,\n  closest,\n  create,\n  display,\n  div,\n  empty,\n  error,\n  find,\n  floor,\n  focus,\n  forEach,\n  forOwn,\n  format,\n  getAttribute,\n  hasClass,\n  includes,\n  inherit,\n  isArray,\n  isBoolean,\n  isFunction,\n  isHTMLElement,\n  isNull,\n  isObject,\n  isString,\n  isUndefined,\n  matches,\n  max,\n  measure,\n  merge,\n  min,\n  nextTick,\n  noop,\n  omit,\n  ownKeys,\n  pad,\n  parseHtml,\n  parseOption,\n  prevent,\n  push,\n  query,\n  queryAll,\n  raf,\n  rect,\n  removeAttribute,\n  removeClass,\n  removeNode,\n  setAttribute,\n  sign,\n  slice,\n  style,\n  tag,\n  timeOf,\n  toArray,\n  toggleClass,\n  uniqueId,\n  unit\n};\n","export const EVENT_MOUNTED = 'mounted';\r\nexport const EVENT_READY = 'ready';\r\nexport const EVENT_MOVE = 'move';\r\nexport const EVENT_MOVED = 'moved';\r\nexport const EVENT_CLICK = 'click';\r\nexport const EVENT_ACTIVE = 'active';\r\nexport const EVENT_INACTIVE = 'inactive';\r\nexport const EVENT_VISIBLE = 'visible';\r\nexport const EVENT_HIDDEN = 'hidden';\r\nexport const EVENT_REFRESH = 'refresh';\r\nexport const EVENT_UPDATED = 'updated';\r\nexport const EVENT_RESIZE = 'resize';\r\nexport const EVENT_RESIZED = 'resized';\r\nexport const EVENT_DRAG = 'drag';\r\nexport const EVENT_DRAGGING = 'dragging';\r\nexport const EVENT_DRAGGED = 'dragged';\r\nexport const EVENT_SCROLL = 'scroll';\r\nexport const EVENT_SCROLLING = 'scrolling';\r\nexport const EVENT_SCROLLED = 'scrolled';\r\nexport const EVENT_OVERFLOW = 'overflow';\r\nexport const EVENT_DESTROY = 'destroy';\r\nexport const EVENT_ARROWS_MOUNTED = 'arrows:mounted';\r\nexport const EVENT_ARROWS_UPDATED = 'arrows:updated';\r\nexport const EVENT_PAGINATION_MOUNTED = 'pagination:mounted';\r\nexport const EVENT_PAGINATION_UPDATED = 'pagination:updated';\r\nexport const EVENT_NAVIGATION_MOUNTED = 'navigation:mounted';\r\nexport const EVENT_AUTOPLAY_PLAY = 'autoplay:play';\r\nexport const EVENT_AUTOPLAY_PLAYING = 'autoplay:playing';\r\nexport const EVENT_AUTOPLAY_PAUSE = 'autoplay:pause';\r\nexport const EVENT_LAZYLOAD_LOADED = 'lazyload:loaded';\r\nexport const EVENT_LAZYLOAD_ERROR = 'lazyload:error';\r\n\r\n/** @internal */\r\nexport const EVENT_SLIDE_KEYDOWN = '_sk';\r\nexport const EVENT_SHIFTED = '_sh';\r\nexport const EVENT_END_INDEX_CHANGED = '_ei';\r\n","import { MEDIA_PREFERS_REDUCED_MOTION } from '../../constants/media';\r\nimport { CREATED, DESTROYED } from '../../constants/states';\r\nimport { EventBinder, merge, omit, ownKeys } from '@splidejs/utils';\r\nimport { BaseComponent, ComponentConstructor, Options } from '../../types';\r\nimport { EVENT_OVERFLOW, EVENT_UPDATED } from '../../constants/events';\r\n\r\n\r\n/**\r\n * The interface for the Media component.\r\n *\r\n * @since 4.0.0\r\n */\r\nexport interface BreakpointsComponent extends BaseComponent {\r\n  /** @internal */\r\n  reduce(reduced: boolean): void;\r\n  set(options: Options, base?: boolean, notify?: boolean): void;\r\n}\r\n\r\n/**\r\n * The special breakpoints key when the number of slides are not enough for the list.\r\n *\r\n * @since 5.0.0\r\n */\r\nconst NOT_OVERFLOW_KEY = '!overflow';\r\n\r\n/**\r\n * The component for observing media queries and updating options if necessary.\r\n * This used to be the Options component.\r\n *\r\n * @since 4.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Media component object.\r\n */\r\nexport const Breakpoints: ComponentConstructor<BreakpointsComponent> = (Splide, Components, options, event) => {\r\n  const { state } = Splide;\r\n  const breakpoints = options.breakpoints || {};\r\n  const reducedMotion = options.reducedMotion || {};\r\n  const binder = EventBinder();\r\n\r\n  /**\r\n   * Stores options and a predicate function.\r\n   */\r\n  const entries: Array<[Options, () => boolean]> = [];\r\n\r\n  /**\r\n   * Called when the component is constructed.\r\n   */\r\n  function setup(): void {\r\n    const isMin = options.mediaQuery === 'min';\r\n\r\n    ownKeys(breakpoints)\r\n      .sort((n, m) => isMin ? +n - +m : +m - +n)\r\n      .forEach(key => {\r\n        if (key !== NOT_OVERFLOW_KEY) {\r\n          register(breakpoints[key], `(${ isMin ? 'min' : 'max' }-width:${ key }px)`);\r\n        }\r\n      });\r\n\r\n    if (breakpoints[NOT_OVERFLOW_KEY]) {\r\n      entries.push([breakpoints[NOT_OVERFLOW_KEY], () => Components.Layout && !Components.Layout.isOverflow()]);\r\n      event.on(EVENT_OVERFLOW, update);\r\n    }\r\n\r\n    register(reducedMotion, MEDIA_PREFERS_REDUCED_MOTION);\r\n    update();\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   *\r\n   * @param completely - Will be `true` for complete destruction.\r\n   */\r\n  function destroy(completely: boolean): void {\r\n    if (completely) {\r\n      binder.destroy();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registers entries as `[ Options, media query string ]`.\r\n   *\r\n   * @param options - Options merged to current options when the document matches the query.\r\n   * @param query   - A query string.\r\n   */\r\n  function register(options: Options, query: string): void {\r\n    const queryList = matchMedia(query);\r\n    binder.bind(queryList, 'change', update);\r\n    entries.push([options, () => queryList.matches]);\r\n  }\r\n\r\n  /**\r\n   * Checks all media queries in entries and updates options.\r\n   */\r\n  function update(): void {\r\n    const destroyed = state.is(DESTROYED);\r\n    const direction = options.direction;\r\n    const merged = entries.reduce<Options>((merged, entry) => {\r\n      return merge(merged, entry[1]() ? entry[0] : {});\r\n    }, {});\r\n\r\n    omit(options);\r\n    set(merged, false, !state.is(CREATED));\r\n\r\n    if (options.destroy) {\r\n      Splide.destroy(options.destroy === 'completely');\r\n    } else if (destroyed) {\r\n      destroy(true);\r\n      Splide.mount();\r\n    } else {\r\n      direction !== options.direction && Splide.refresh();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disables or enables `reducedMotion` options.\r\n   * This method does nothing when the document does not match the query.\r\n   *\r\n   * @internal\r\n   *\r\n   * @param enable - Determines whether to apply `reducedMotion` options or not.\r\n   */\r\n  function reduce(enable: boolean): void {\r\n    if (matchMedia(MEDIA_PREFERS_REDUCED_MOTION).matches) {\r\n      enable ? merge(options, reducedMotion) : omit(options, ownKeys(reducedMotion));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets current options or base options (prototype).\r\n   * If changing base options, always emits the `updated` event.\r\n   *\r\n   * @internal\r\n   *\r\n   * @param opts   - New options.\r\n   * @param base   - Optional. Determines whether to also update base options or not.\r\n   * @param notify - Optional. If `true`, emits the `update` event.\r\n   */\r\n  function set(opts: Options, base?: boolean, notify?: boolean): void {\r\n    merge(options, opts);\r\n    base && merge(Object.getPrototypeOf(options), opts);\r\n\r\n    if (notify) {\r\n      Splide.emit(EVENT_UPDATED, options);\r\n    }\r\n  }\r\n\r\n  return {\r\n    setup,\r\n    destroy,\r\n    reduce,\r\n    set,\r\n  };\r\n};\r\n","const ARROW = 'Arrow';\r\nexport const ARROW_LEFT = `${ ARROW }Left`;\r\nexport const ARROW_RIGHT = `${ ARROW }Right`;\r\nexport const ARROW_UP = `${ ARROW }Up`;\r\nexport const ARROW_DOWN = `${ ARROW }Down`;","/**\r\n * Enumerates slides from left to right.\r\n */\r\nexport const LTR = 'ltr';\r\n\r\n/**\r\n * Enumerates slides from right to left.\r\n */\r\nexport const RTL = 'rtl';\r\n\r\n/**\r\n * Enumerates slides in a col.\r\n */\r\nexport const TTB = 'ttb';\r\n","import { ARROW_DOWN, ARROW_LEFT, ARROW_RIGHT, ARROW_UP } from '../../constants/arrows';\r\nimport { RTL, TTB } from '../../constants/directions';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, ComponentConstructor, Components, Options } from '../../types';\r\nimport { apply } from '../../../../../utils';\r\n\r\n\r\n/**\r\n * The interface for the Direction component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface DirectionComponent extends BaseComponent {\r\n  resolve<K extends keyof typeof ORIENTATION_MAP>(prop: K, axisOnly?: boolean, direction?: Options['direction']): typeof ORIENTATION_MAP[ K ][ number ] | K;\r\n  resolve<R extends string>(prop: R, axisOnly?: boolean, direction?: Options['direction']): R;\r\n\r\n  orient(value: number): number;\r\n  left(): string;\r\n  right(): string;\r\n  width(): string;\r\n}\r\n\r\n/**\r\n * The translation map for directions.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const ORIENTATION_MAP = {\r\n  width: ['height'],\r\n  left: ['top', 'right'],\r\n  right: ['bottom', 'left'],\r\n  x: ['y'],\r\n  X: ['Y'],\r\n  Y: ['X'],\r\n  ArrowLeft: [ARROW_UP, ARROW_RIGHT],\r\n  ArrowRight: [ARROW_DOWN, ARROW_LEFT],\r\n} as const;\r\n\r\n/**\r\n * The component that absorbs the difference among directions.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Direction component object.\r\n */\r\nexport const Direction: ComponentConstructor<DirectionComponent> = (Splide: Splide, Components: Components, options: Options) => {\r\n  /**\r\n   * Resolves the provided property name.\r\n   *\r\n   * @param prop      - A property name to translate.\r\n   * @param axisOnly  - Optional. If `ture`, returns the same property for LTR and RTL.\r\n   * @param direction - Optional. Specify the direction. The default value is the `direction` option.\r\n   */\r\n  function resolve(\r\n    prop: string,\r\n    axisOnly?: boolean,\r\n    direction: Options[ 'direction' ] = options.direction,\r\n  ): string {\r\n    const index = direction === RTL && !axisOnly ? 1 : direction === TTB ? 0 : -1;\r\n\r\n    return ORIENTATION_MAP[prop] && ORIENTATION_MAP[prop][index]\r\n      || prop.replace(/width|left|right/i, (match, offset) => {\r\n        const replacement = ORIENTATION_MAP[match.toLowerCase()][index] || match;\r\n        return offset > 0 ? replacement.charAt(0).toUpperCase() + replacement.slice(1) : replacement;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Orients the value towards the current direction.\r\n   *\r\n   * @param value     - A value to orient.\r\n   * @param direction - Optional. Specify the direction. The default value is the `direction` option.\r\n   *\r\n   * @return The oriented value.\r\n   */\r\n  function orient(value: number, direction: Options[ 'direction' ] = options.direction): number {\r\n    return value * (direction === RTL ? 1 : -1);\r\n  }\r\n\r\n  return {\r\n    resolve,\r\n    orient,\r\n    left: apply(resolve, 'left'),\r\n    right: apply(resolve, 'right'),\r\n    width: apply(resolve, 'width'),\r\n  };\r\n};\r\n","export const ROLE = 'role';\r\nexport const TAB_INDEX = 'tabindex';\r\nexport const DISABLED = 'disabled';\r\n\r\nexport const ARIA_PREFIX = 'aria-';\r\nexport const ARIA_CONTROLS = `${ ARIA_PREFIX }controls`;\r\nexport const ARIA_CURRENT = `${ ARIA_PREFIX }current`;\r\nexport const ARIA_SELECTED = `${ ARIA_PREFIX }selected`;\r\nexport const ARIA_LABEL = `${ ARIA_PREFIX }label`;\r\nexport const ARIA_LABELLEDBY = `${ ARIA_PREFIX }labelledby`;\r\nexport const ARIA_HIDDEN = `${ ARIA_PREFIX }hidden`;\r\nexport const ARIA_ORIENTATION = `${ ARIA_PREFIX }orientation`;\r\nexport const ARIA_ROLEDESCRIPTION = `${ ARIA_PREFIX }roledescription`;\r\nexport const ARIA_LIVE = `${ ARIA_PREFIX }live`;\r\nexport const ARIA_BUSY = `${ ARIA_PREFIX }busy`;\r\nexport const ARIA_ATOMIC = `${ ARIA_PREFIX }atomic`;\r\n\r\n/**\r\n * The array with all attributes to remove later.\r\n * Need to manually remove attributes that are not in this.\r\n * Note that removing `aria-live` disables the live region until the page reload.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const ALL_ATTRIBUTES = [\r\n  ROLE,\r\n  TAB_INDEX,\r\n  DISABLED,\r\n  ARIA_CONTROLS,\r\n  ARIA_CURRENT,\r\n  ARIA_LABEL,\r\n  ARIA_LABELLEDBY,\r\n  ARIA_HIDDEN,\r\n  ARIA_ORIENTATION,\r\n  ARIA_ROLEDESCRIPTION,\r\n];\r\n","/**\r\n * The project code.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const PROJECT_CODE = 'splide';\r\n\r\n/**\r\n * The data attribute prefix.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const DATA_ATTRIBUTE = `data-${ PROJECT_CODE }`;\r\n","import { PROJECT_CODE } from './project';\r\n\r\n\r\n/**\r\n * The prefix for classes.\r\n *\r\n * @since 4.1.0\r\n */\r\nexport const CLASS_PREFIX = `${ PROJECT_CODE }__`;\r\n\r\n/**\r\n * The prefix for status classes.\r\n *\r\n * @since 4.1.0\r\n */\r\nexport const STATUS_CLASS_PREFIX = 'is-';\r\n\r\n/**\r\n * All classes as constants.\r\n */\r\nexport const CLASS_ROOT = PROJECT_CODE;\r\nexport const CLASS_TRACK = `${ CLASS_PREFIX }track`;\r\nexport const CLASS_LIST = `${ CLASS_PREFIX }list`;\r\nexport const CLASS_SLIDE = `${ CLASS_PREFIX }slide`;\r\nexport const CLASS_CLONE = `${ CLASS_SLIDE }--clone`;\r\nexport const CLASS_CONTAINER = `${ CLASS_SLIDE }__container`;\r\nexport const CLASS_ARROWS = `${ CLASS_PREFIX }arrows`;\r\nexport const CLASS_ARROW = `${ CLASS_PREFIX }arrow`;\r\nexport const CLASS_ARROW_PREV = `${ CLASS_ARROW }--prev`;\r\nexport const CLASS_ARROW_NEXT = `${ CLASS_ARROW }--next`;\r\nexport const CLASS_PAGINATION = `${ CLASS_PREFIX }pagination`;\r\nexport const CLASS_PAGINATION_PAGE = `${ CLASS_PAGINATION }__page`;\r\nexport const CLASS_PROGRESS = `${ CLASS_PREFIX }progress`;\r\nexport const CLASS_PROGRESS_BAR = `${ CLASS_PROGRESS }__bar`;\r\nexport const CLASS_TOGGLE = `${ CLASS_PREFIX }toggle`;\r\nexport const CLASS_TOGGLE_PLAY = `${ CLASS_TOGGLE }__play`;\r\nexport const CLASS_TOGGLE_PAUSE = `${ CLASS_TOGGLE }__pause`;\r\nexport const CLASS_SPINNER = `${ CLASS_PREFIX }spinner`;\r\nexport const CLASS_SR = `${ CLASS_PREFIX }sr`;\r\nexport const CLASS_INITIALIZED = `${ STATUS_CLASS_PREFIX }initialized`;\r\nexport const CLASS_ACTIVE = `${ STATUS_CLASS_PREFIX }active`;\r\nexport const CLASS_PREV = `${ STATUS_CLASS_PREFIX }prev`;\r\nexport const CLASS_NEXT = `${ STATUS_CLASS_PREFIX }next`;\r\nexport const CLASS_VISIBLE = `${ STATUS_CLASS_PREFIX }visible`;\r\nexport const CLASS_LOADING = `${ STATUS_CLASS_PREFIX }loading`;\r\nexport const CLASS_FOCUS_IN = `${ STATUS_CLASS_PREFIX }focus-in`;\r\nexport const CLASS_OVERFLOW = `${ STATUS_CLASS_PREFIX }overflow`;\r\n\r\n/**\r\n * The array with all status classes except for `is-initialized`.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const STATUS_CLASSES = [\r\n  CLASS_ACTIVE,\r\n  CLASS_VISIBLE,\r\n  CLASS_PREV,\r\n  CLASS_NEXT,\r\n  CLASS_LOADING,\r\n  CLASS_FOCUS_IN,\r\n  CLASS_OVERFLOW,\r\n];\r\n\r\n/**\r\n * The collection of classes for elements that Splide dynamically creates.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const CLASSES = {\r\n  slide: CLASS_SLIDE,\r\n  clone: CLASS_CLONE,\r\n  arrows: CLASS_ARROWS,\r\n  arrow: CLASS_ARROW,\r\n  prev: CLASS_ARROW_PREV,\r\n  next: CLASS_ARROW_NEXT,\r\n  pagination: CLASS_PAGINATION,\r\n  page: CLASS_PAGINATION_PAGE,\r\n  spinner: CLASS_SPINNER,\r\n};\r\n","import { PROJECT_CODE } from '../../../constants/project';\r\n\r\n\r\n/**\r\n * Throws an error if the provided condition is falsy.\r\n *\r\n * @param condition - If falsy, an error is thrown.\r\n * @param message   - Optional. A message to display.\r\n */\r\nexport function assert(condition: any, message?: string): void {\r\n  if (!condition) {\r\n    throw new Error(`[${ PROJECT_CODE }] ${ message || '' }`);\r\n  }\r\n}\r\n","/**\r\n * The power of the friction.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const FRICTION = 5;\r\n\r\n/**\r\n * If the user stops dragging for this duration with keeping the pointer down, updates the base coord and time.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const LOG_INTERVAL = 200;\r\n\r\n/**\r\n * Start events for dragging.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const POINTER_DOWN_EVENTS = 'touchstart mousedown';\r\n\r\n/**\r\n * Update events for dragging.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const POINTER_MOVE_EVENTS = 'touchmove mousemove';\r\n\r\n/**\r\n * End events for dragging.\r\n * The `click` event is required because the browser sometimes dispatches `drag` events instead of `mouse`.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const POINTER_UP_EVENTS = 'touchend touchcancel mouseup click';\r\n","/**\r\n * The type for the regular slider.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const SLIDE = 'slide';\r\n\r\n/**\r\n * The type for the carousel slider.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const LOOP = 'loop';\r\n\r\n/**\r\n * The type for the fade slider that can not have multiple slides in a page.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const FADE = 'fade';\r\n","import {\r\n  ALL_ATTRIBUTES,\r\n  ARIA_CONTROLS,\r\n  ARIA_CURRENT,\r\n  ARIA_HIDDEN,\r\n  ARIA_LABEL,\r\n  ARIA_ROLEDESCRIPTION,\r\n  ROLE,\r\n  TAB_INDEX,\r\n} from '../../constants/attributes';\r\nimport {\r\n  CLASS_ACTIVE,\r\n  CLASS_CONTAINER,\r\n  CLASS_NEXT,\r\n  CLASS_PREV,\r\n  CLASS_VISIBLE,\r\n  STATUS_CLASSES,\r\n} from '../../constants/classes';\r\nimport {\r\n  EVENT_ACTIVE,\r\n  EVENT_CLICK,\r\n  EVENT_HIDDEN,\r\n  EVENT_INACTIVE,\r\n  EVENT_MOVE,\r\n  EVENT_MOVED,\r\n  EVENT_NAVIGATION_MOUNTED,\r\n  EVENT_SCROLLED,\r\n  EVENT_SHIFTED,\r\n  EVENT_SLIDE_KEYDOWN,\r\n  EVENT_VISIBLE,\r\n} from '../../constants/events';\r\nimport { MOVING, SCROLLING } from '../../constants/states';\r\nimport { FADE, LOOP } from '../../constants/types';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent } from '../../types';\r\nimport {\r\n  abs,\r\n  apply,\r\n  ceil,\r\n  child,\r\n  CSSProperties,\r\n  floor,\r\n  focus,\r\n  format,\r\n  getAttribute,\r\n  hasClass,\r\n  min,\r\n  pad,\r\n  queryAll,\r\n  rect,\r\n  removeAttribute,\r\n  removeClass,\r\n  setAttribute,\r\n  style as _style,\r\n  toggleClass,\r\n} from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The interface for the Slide sub component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface SlideComponent extends BaseComponent {\r\n  readonly index: number;\r\n  readonly slideIndex: number;\r\n  readonly slide: HTMLElement;\r\n  readonly container: HTMLElement;\r\n  readonly isClone: boolean;\r\n\r\n  update(): void;\r\n  style(prop: CSSProperties, value: string | number, useContainer?: boolean): void\r\n  isWithin(from: number, distance: number): boolean;\r\n  isVisible(partial?: boolean): boolean;\r\n}\r\n\r\n/**\r\n * The subcomponent for managing each slide.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param index      - A slide index.\r\n * @param slideIndex - A slide index for clones. This must be `-1` if the slide is not a clone.\r\n * @param slide      - A slide element.\r\n *\r\n * @return A Slide subcomponent.\r\n */\r\nexport const Slide = (Splide: Splide, index: number, slideIndex: number, slide: HTMLElement): SlideComponent => {\r\n  const event = Splide.event.lock();\r\n  const { on, emit, bind } = event;\r\n  const { Components, root, options } = Splide;\r\n  const { isNavigation, updateOnMove, i18n, pagination, slideFocus } = options;\r\n  const { Elements } = Components;\r\n  const { resolve } = Components.Direction;\r\n  const styles = getAttribute(slide, 'style');\r\n  const label = getAttribute(slide, ARIA_LABEL);\r\n  const isClone = slideIndex > -1;\r\n  const container = child(slide, `.${ CLASS_CONTAINER }`);\r\n\r\n  /**\r\n   * Turns into `true` when the component is destroyed.\r\n   */\r\n  let destroyed: boolean;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(this: SlideComponent): void {\r\n    if (!isClone) {\r\n      slide.id = `${ root.id }-slide${ pad(index + 1) }`;\r\n      setAttribute(slide, ROLE, pagination ? 'tabpanel' : 'group');\r\n      setAttribute(slide, ARIA_ROLEDESCRIPTION, i18n.slide);\r\n      setAttribute(slide, ARIA_LABEL, label || format(i18n.slideLabel, index + 1, Splide.length));\r\n    }\r\n\r\n    listen();\r\n  }\r\n\r\n  /**\r\n   * Listens to some events.\r\n   */\r\n  function listen(): void {\r\n    bind(slide, 'click', apply(emit, EVENT_CLICK, self));\r\n    bind(slide, 'keydown', apply(emit, EVENT_SLIDE_KEYDOWN, self));\r\n    on([EVENT_MOVED, EVENT_SHIFTED, EVENT_SCROLLED], update);\r\n    on(EVENT_NAVIGATION_MOUNTED, initNavigation);\r\n\r\n    if (updateOnMove) {\r\n      on(EVENT_MOVE, onMove);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    destroyed = true;\r\n    event.destroy();\r\n    removeClass(slide, STATUS_CLASSES);\r\n    removeAttribute(slide, ALL_ATTRIBUTES);\r\n    setAttribute(slide, 'style', styles);\r\n    setAttribute(slide, ARIA_LABEL, label || '');\r\n  }\r\n\r\n  /**\r\n   * Initializes slides as navigation.\r\n   */\r\n  function initNavigation(): void {\r\n    const controls = Splide.splides.map(target => {\r\n      const Slide = target.splide.Components.Slides.getAt(index);\r\n      return Slide ? Slide.slide.id : '';\r\n    }).join(' ');\r\n\r\n    setAttribute(slide, ARIA_LABEL, format(i18n.slideX, (isClone ? slideIndex : index) + 1));\r\n    setAttribute(slide, ARIA_CONTROLS, controls);\r\n    setAttribute(slide, ROLE, slideFocus ? 'button' : '');\r\n    slideFocus && removeAttribute(slide, ARIA_ROLEDESCRIPTION);\r\n  }\r\n\r\n  /**\r\n   * If the `updateOnMove` option is `true`, called when the slider starts moving.\r\n   */\r\n  function onMove(): void {\r\n    if (!destroyed) {\r\n      update();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates attribute and classes of the slide.\r\n   */\r\n  function update(): void {\r\n    if (!destroyed) {\r\n      const { index: curr } = Splide;\r\n\r\n      updateActivity();\r\n      updateVisibility();\r\n      toggleClass(slide, CLASS_PREV, index === curr - 1);\r\n      toggleClass(slide, CLASS_NEXT, index === curr + 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the status related with activity.\r\n   */\r\n  function updateActivity(): void {\r\n    const active = isActive();\r\n\r\n    if (active !== hasClass(slide, CLASS_ACTIVE)) {\r\n      toggleClass(slide, CLASS_ACTIVE, active);\r\n      setAttribute(slide, ARIA_CURRENT, isNavigation && active || '');\r\n      emit(active ? EVENT_ACTIVE : EVENT_INACTIVE, self);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates classes and attributes related with visibility.\r\n   * - Do not update aria-hidden on shifting to avoid Window Narrator from start reading contents.\r\n   * - If the slide has focus and gets hidden, moves focus to the active slide.\r\n   */\r\n  function updateVisibility(): void {\r\n    const visible = isVisible();\r\n    const hidden = !visible && (!isActive() || isClone);\r\n\r\n    if (!Splide.state.is([MOVING, SCROLLING])) {\r\n      setAttribute(slide, ARIA_HIDDEN, hidden || '');\r\n    }\r\n\r\n    setAttribute(queryAll(slide, options.focusableNodes || ''), TAB_INDEX, hidden ? -1 : '');\r\n\r\n    if (slideFocus) {\r\n      setAttribute(slide, TAB_INDEX, hidden ? -1 : 0);\r\n    }\r\n\r\n    if (visible !== hasClass(slide, CLASS_VISIBLE)) {\r\n      toggleClass(slide, CLASS_VISIBLE, visible);\r\n      emit(visible ? EVENT_VISIBLE : EVENT_HIDDEN, self);\r\n    }\r\n\r\n    if (!visible && document.activeElement === slide) {\r\n      const Slide = Components.Slides.getAt(Splide.index);\r\n      Slide && focus(Slide.slide);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds a CSS rule to the slider or the container.\r\n   *\r\n   * @param prop         - A property name.\r\n   * @param value        - A CSS value to add.\r\n   * @param useContainer - Optional. Determines whether to apply the rule to the container or not.\r\n   */\r\n  function style(prop: CSSProperties, value: string | number, useContainer?: boolean): void {\r\n    _style((useContainer && container) || slide, prop, value);\r\n  }\r\n\r\n  /**\r\n   * Checks if the slide is active or not.\r\n   *\r\n   * @return `true` if the slide is active.\r\n   */\r\n  function isActive(): boolean {\r\n    const { index: curr } = Splide;\r\n    const { cloneStatus = true } = options;\r\n    return curr === index || (cloneStatus && curr === slideIndex);\r\n  }\r\n\r\n  /**\r\n   * Checks if the slide is visible or not.\r\n   */\r\n  function isVisible(partial?: boolean): boolean {\r\n    if (Splide.is(FADE)) {\r\n      return isActive();\r\n    }\r\n\r\n    const trackRect = rect(Elements.track);\r\n    const slideRect = rect(slide);\r\n    const left = resolve('left', true);\r\n    const right = resolve('right', true);\r\n\r\n    return floor(trackRect[left]) <= ceil(slideRect[partial ? right : left])\r\n      && floor(slideRect[partial ? left : right]) <= ceil(trackRect[right]);\r\n  }\r\n\r\n  /**\r\n   * Calculates how far this slide is from another slide and\r\n   * returns `true` if the distance is within the given number.\r\n   *\r\n   * @param from     - An index of a base slide.\r\n   * @param distance - `true` if the slide is within this number.\r\n   *\r\n   * @return `true` if the slide is within the `distance` from the base slide, or otherwise `false`.\r\n   */\r\n  function isWithin(from: number, distance: number): boolean {\r\n    let diff = abs(from - index);\r\n\r\n    if (!isClone && (options.rewind || Splide.is(LOOP))) {\r\n      diff = min(diff, Splide.length - diff);\r\n    }\r\n\r\n    return diff <= distance;\r\n  }\r\n\r\n  const self = {\r\n    index,\r\n    slideIndex,\r\n    slide,\r\n    container,\r\n    isClone,\r\n    mount,\r\n    destroy,\r\n    update,\r\n    style,\r\n    isVisible,\r\n    isWithin,\r\n  };\r\n\r\n  return self;\r\n};\r\n","import { DATA_ATTRIBUTE } from '../../constants/project';\r\n\r\n\r\n/**\r\n * The data attribute for the autoplay interval duration.\r\n *\r\n * @since 3.5.0\r\n */\r\nexport const INTERVAL_DATA_ATTRIBUTE = `${ DATA_ATTRIBUTE }-interval`;\r\n","/**\r\n * AddEventListenerOptions for listeners that may prevent the browser scroll.\r\n *\r\n * @since 3.4.1\r\n */\r\nexport const SCROLL_LISTENER_OPTIONS = { passive: false, capture: true };\r\n","import { DATA_ATTRIBUTE } from '../../constants/project';\r\n\r\n\r\n/**\r\n * The data attribute for the src value.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const SRC_DATA_ATTRIBUTE = `${ DATA_ATTRIBUTE }-lazy`;\r\n\r\n/**\r\n * The data attribute for the srcset value.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const SRCSET_DATA_ATTRIBUTE = `${ SRC_DATA_ATTRIBUTE }-srcset`;\r\n\r\n/**\r\n * The selector string for images to load.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const IMAGE_SELECTOR = `[${ SRC_DATA_ATTRIBUTE }], [${ SRCSET_DATA_ATTRIBUTE }]`;\r\n","import { ARIA_ORIENTATION } from '../../constants/attributes';\r\nimport { TTB } from '../../constants/directions';\r\nimport {\r\n  EVENT_CLICK,\r\n  EVENT_MOUNTED,\r\n  EVENT_MOVE,\r\n  EVENT_NAVIGATION_MOUNTED,\r\n  EVENT_SLIDE_KEYDOWN,\r\n  EVENT_UPDATED,\r\n} from '../../constants/events';\r\nimport { LOOP } from '../../constants/types';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, ComponentConstructor, EventInterface } from '../../types';\r\nimport { apply, empty, includes, isUndefined, prevent, setAttribute } from '@splidejs/utils';\r\nimport { SlideComponent } from '../Slides/Slide';\r\n\r\n\r\n/**\r\n * The interface for the Sync component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface SyncComponent extends BaseComponent {\r\n  remount(): void;\r\n}\r\n\r\n/**\r\n * The keys for triggering the navigation slide.\r\n *\r\n * @since 3.0.0\r\n */\r\nconst TRIGGER_KEYS = [' ', 'Enter'];\r\n\r\n/**\r\n * The component for syncing multiple sliders.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface object.\r\n *\r\n * @return A Sync component object.\r\n */\r\nexport const Sync: ComponentConstructor<SyncComponent> = (Splide, Components, options, event) => {\r\n  const { isNavigation, slideFocus } = options;\r\n\r\n  /**\r\n   * Stores event objects.\r\n   */\r\n  const events: EventInterface[] = [];\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    Splide.splides.forEach(target => {\r\n      if (!target.isParent) {\r\n        sync(Splide, target.splide);\r\n        sync(target.splide, Splide);\r\n      }\r\n    });\r\n\r\n    if (isNavigation) {\r\n      navigate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    events.forEach(event => event.destroy());\r\n    empty(events);\r\n  }\r\n\r\n  /**\r\n   * Remounts the component.\r\n   *\r\n   * @internal\r\n   */\r\n  function remount(): void {\r\n    destroy();\r\n    mount();\r\n  }\r\n\r\n  /**\r\n   * Syncs the current index with a provided child splide instance.\r\n   *\r\n   * @param splide - A splide instance to sync with.\r\n   * @param target - A target splide instance.\r\n   */\r\n  function sync(splide: Splide, target: Splide): void {\r\n    const event = splide.event.lock();\r\n\r\n    event.on(EVENT_MOVE, (index, prev, dest) => {\r\n      target.index !== index && target.go(target.is(LOOP) ? dest : index);\r\n    });\r\n\r\n    events.push(event);\r\n  }\r\n\r\n  /**\r\n   * Makes slides clickable and moves the slider to the index of clicked slide.\r\n   * Note that the direction of `menu` is implicitly `vertical` as default.\r\n   */\r\n  function navigate(): void {\r\n    const ev = event.lock();\r\n    const { on } = ev;\r\n\r\n    on(EVENT_CLICK, onClick);\r\n    on(EVENT_SLIDE_KEYDOWN, onKeydown);\r\n    on([EVENT_MOUNTED, EVENT_UPDATED], update);\r\n\r\n    events.push(ev);\r\n    ev.emit(EVENT_NAVIGATION_MOUNTED, Splide.splides);\r\n  }\r\n\r\n  /**\r\n   * Update attributes.\r\n   */\r\n  function update(): void {\r\n    setAttribute(\r\n      Components.Elements.list,\r\n      ARIA_ORIENTATION,\r\n      options.direction === TTB ? 'vertical' : '',\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Called when the navigation slide is clicked.\r\n   *\r\n   * @param Slide - A clicked Slide component.\r\n   */\r\n  function onClick(Slide: SlideComponent): void {\r\n    Splide.go(Slide.index);\r\n  }\r\n\r\n  /**\r\n   * Called when any key is pressed on the navigation slide.\r\n   *\r\n   * @param Slide - A Slide component.\r\n   * @param e     - A KeyboardEvent object.\r\n   */\r\n  function onKeydown(Slide: SlideComponent, e: KeyboardEvent): void {\r\n    if (includes(TRIGGER_KEYS, e.key)) {\r\n      onClick(Slide);\r\n      prevent(e);\r\n    }\r\n  }\r\n\r\n  return {\r\n    setup: apply(\r\n      Components.Breakpoints.set,\r\n      { slideFocus: isUndefined(slideFocus) ? isNavigation : slideFocus },\r\n      true,\r\n    ),\r\n    mount,\r\n    destroy,\r\n    remount,\r\n  };\r\n};\r\n","import { ComponentConstructor } from '../types';\r\n\r\nimport { Breakpoints } from './Breakpoints/Breakpoints';\r\nimport { Direction } from './Direction/Direction';\r\nimport { Elements } from './Elements/Elements';\r\nimport { Slides } from './Slides/Slides';\r\nimport { Layout } from './Layout/Layout';\r\nimport { Clones } from './Clones/Clones';\r\nimport { Move } from './Move/Move';\r\nimport { Controller } from './Controller/Controller';\r\nimport { Arrows } from './Arrows/Arrows';\r\nimport { Autoplay } from './Autoplay/Autoplay';\r\nimport { Scroll } from './Scroll/Scroll';\r\nimport { Drag } from './Drag/Drag';\r\nimport { Keyboard } from './Keyboard/Keyboard';\r\nimport { LazyLoad } from './LazyLoad/LazyLoad';\r\nimport { Pagination } from './Pagination/Pagination';\r\nimport { Sync } from './Sync/Sync';\r\nimport { Wheel } from './Wheel/Wheel';\r\nimport { Live } from './Live/Live';\r\n\r\n\r\nexport { Breakpoints } from './Breakpoints/Breakpoints';\r\nexport { Direction } from './Direction/Direction';\r\nexport { Elements } from './Elements/Elements';\r\nexport { Slides } from './Slides/Slides';\r\nexport { Layout } from './Layout/Layout';\r\nexport { Clones } from './Clones/Clones';\r\nexport { Move } from './Move/Move';\r\nexport { Controller } from './Controller/Controller';\r\nexport { Arrows } from './Arrows/Arrows';\r\nexport { Autoplay } from './Autoplay/Autoplay';\r\nexport { Scroll } from './Scroll/Scroll';\r\nexport { Drag } from './Drag/Drag';\r\nexport { Keyboard } from './Keyboard/Keyboard';\r\nexport { LazyLoad } from './LazyLoad/LazyLoad';\r\nexport { Pagination } from './Pagination/Pagination';\r\nexport { Sync } from './Sync/Sync';\r\nexport { Wheel } from './Wheel/Wheel';\r\nexport { Live } from './Live/Live';\r\n\r\n\r\n/**\r\n * The collection of core component constructors.\r\n *\r\n * @since 5.0.0\r\n */\r\nexport const COMPONENTS: Record<string, ComponentConstructor> = {\r\n  Breakpoints,\r\n  Direction,\r\n  Elements,\r\n  Slides,\r\n  Layout,\r\n  Clones,\r\n  Move,\r\n  Scroll,\r\n  Controller,\r\n  Arrows,\r\n  Autoplay,\r\n  Drag,\r\n  Keyboard,\r\n  LazyLoad,\r\n  Pagination,\r\n  Sync,\r\n  Wheel,\r\n  Live,\r\n};","import { ALL_ATTRIBUTES, ARIA_LABEL, ARIA_LABELLEDBY, ARIA_ROLEDESCRIPTION, ROLE } from '../../constants/attributes';\r\nimport {\r\n  CLASS_ACTIVE,\r\n  CLASS_ARROW_NEXT,\r\n  CLASS_ARROW_PREV,\r\n  CLASS_ARROWS,\r\n  CLASS_CLONE,\r\n  CLASS_FOCUS_IN,\r\n  CLASS_LIST,\r\n  CLASS_PAGINATION,\r\n  CLASS_PROGRESS_BAR,\r\n  CLASS_ROOT,\r\n  CLASS_SLIDE,\r\n  CLASS_TOGGLE,\r\n  CLASS_TRACK,\r\n} from '../../constants/classes';\r\nimport { EVENT_REFRESH, EVENT_UPDATED } from '../../constants/events';\r\nimport { PROJECT_CODE } from '../../constants/project';\r\nimport { BaseComponent, ComponentConstructor } from '../../types';\r\nimport {\r\n  addClass,\r\n  assign,\r\n  child,\r\n  children,\r\n  closest,\r\n  empty,\r\n  getAttribute,\r\n  push,\r\n  query,\r\n  removeAttribute,\r\n  removeClass,\r\n  setAttribute,\r\n  toggleClass,\r\n  uniqueId,\r\n} from '@splidejs/utils';\r\nimport { assert } from '../../utils';\r\nimport { POINTER_DOWN_EVENTS } from '../Drag/constants';\r\n\r\n\r\n/**\r\n * The interface for elements which the slider consists of.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ElementCollection {\r\n  root: HTMLElement;\r\n  track: HTMLElement;\r\n  list: HTMLElement;\r\n  slides: HTMLElement[];\r\n  arrows?: HTMLElement;\r\n  pagination?: HTMLUListElement;\r\n  prev?: HTMLButtonElement;\r\n  next?: HTMLButtonElement;\r\n  bar?: HTMLElement;\r\n  toggle?: HTMLElement;\r\n}\r\n\r\n/**\r\n * The interface for the Elements component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ElementsComponent extends BaseComponent, Readonly<ElementCollection> {\r\n}\r\n\r\n/**\r\n * The component that collects and handles elements which the slider consists of.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return An Elements component object.\r\n */\r\nexport const Elements: ComponentConstructor<ElementsComponent> = (Splide, Components, options, event) => {\r\n  const { on, bind } = event;\r\n  const { root } = Splide;\r\n  const { i18n } = options;\r\n  const elements: ElementCollection = {} as ElementCollection;\r\n\r\n  /**\r\n   * Stores all slide elements.\r\n   */\r\n  const slides: HTMLElement[] = [];\r\n\r\n  /**\r\n   * Stores all root classes.\r\n   */\r\n  let rootClasses: string[] = [];\r\n\r\n  /**\r\n   * Stores all list classes.\r\n   */\r\n  let trackClasses: string[] = [];\r\n\r\n  /**\r\n   * The track element.\r\n   */\r\n  let track: HTMLElement;\r\n\r\n  /**\r\n   * The list element.\r\n   */\r\n  let list: HTMLElement;\r\n\r\n  /**\r\n   * Turns into `true` when detecting keydown, and `false` when detecting pointerdown.\r\n   */\r\n  let isUsingKey: boolean;\r\n\r\n  /**\r\n   * Called when the component is constructed.\r\n   */\r\n  function setup(): void {\r\n    collect();\r\n    init();\r\n    update();\r\n  }\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    on(EVENT_REFRESH, destroy);\r\n    on(EVENT_REFRESH, setup);\r\n    on(EVENT_UPDATED, update);\r\n\r\n    bind(document, `${ POINTER_DOWN_EVENTS } keydown`, e => {\r\n      isUsingKey = e.type === 'keydown';\r\n    }, { capture: true });\r\n\r\n    bind(root, 'focusin', () => {\r\n      toggleClass(root, CLASS_FOCUS_IN, !!isUsingKey);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   *\r\n   * @param completely - Whether to destroy the component completely or not.\r\n   */\r\n  function destroy(completely?: boolean): void {\r\n    const attrs = ALL_ATTRIBUTES.concat('style');\r\n\r\n    empty(slides);\r\n    removeClass(root, rootClasses);\r\n    removeClass(track, trackClasses);\r\n    removeAttribute([track, list], attrs);\r\n    removeAttribute(root, completely ? attrs : ['style', ARIA_ROLEDESCRIPTION]);\r\n  }\r\n\r\n  /**\r\n   * Updates the status of elements.\r\n   */\r\n  function update(): void {\r\n    removeClass(root, rootClasses);\r\n    removeClass(track, trackClasses);\r\n\r\n    rootClasses = getClasses(CLASS_ROOT);\r\n    trackClasses = getClasses(CLASS_TRACK);\r\n\r\n    addClass(root, rootClasses);\r\n    addClass(track, trackClasses);\r\n\r\n    setAttribute(root, ARIA_LABEL, options.label);\r\n    setAttribute(root, ARIA_LABELLEDBY, options.labelledby);\r\n  }\r\n\r\n  /**\r\n   * Collects elements which the slider consists of.\r\n   */\r\n  function collect(): void {\r\n    track = find(CLASS_TRACK);\r\n    list = child(track, `.${ CLASS_LIST }`);\r\n\r\n    assert(track && list, 'A track/list element is missing.');\r\n    push(slides, children(list, `.${ CLASS_SLIDE }:not(.${ CLASS_CLONE })`));\r\n\r\n    assign(elements, {\r\n      root,\r\n      track,\r\n      list,\r\n      slides,\r\n      arrows: find(CLASS_ARROWS),\r\n      pagination: find(CLASS_PAGINATION),\r\n      prev: find(CLASS_ARROW_PREV),\r\n      next: find(CLASS_ARROW_NEXT),\r\n      bar: find(CLASS_PROGRESS_BAR),\r\n      toggle: find(CLASS_TOGGLE),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initializes essential elements.\r\n   * Note that do not change the role of the root element,\r\n   * which removes the region from the accessibility tree.\r\n   */\r\n  function init(): void {\r\n    const { role = 'region' } = options;\r\n    const id = root.id || uniqueId(PROJECT_CODE);\r\n\r\n    root.id = id;\r\n    track.id = track.id || `${ id }-track`;\r\n    list.id = list.id || `${ id }-list`;\r\n\r\n    if (!getAttribute(root, ROLE) && root.tagName !== 'SECTION' && role) {\r\n      setAttribute(root, ROLE, role);\r\n    }\r\n\r\n    setAttribute(root, ARIA_ROLEDESCRIPTION, i18n.carousel);\r\n    setAttribute(list, ROLE, 'presentation');\r\n  }\r\n\r\n  /**\r\n   * Finds an element only in this slider, ignoring elements in a nested slider.\r\n   *\r\n   * @param className - A class name.\r\n   *\r\n   * @return A found element or null.\r\n   */\r\n  function find(className: string): HTMLElement | undefined {\r\n    const elm = query<HTMLElement>(root, `.${ className }`);\r\n    return elm && closest(elm, `.${ CLASS_ROOT }`) === root ? elm : undefined;\r\n  }\r\n\r\n  /**\r\n   * Return an array with modifier classes.\r\n   *\r\n   * @param base - A base class name.\r\n   *\r\n   * @return An array with classes.\r\n   */\r\n  function getClasses(base: string): string[] {\r\n    return [\r\n      `${ base }--${ options.type }`,\r\n      `${ base }--${ options.direction }`,\r\n      options.drag && `${ base }--draggable`,\r\n      options.isNavigation && `${ base }--nav`,\r\n      base === CLASS_ROOT && CLASS_ACTIVE,\r\n    ];\r\n  }\r\n\r\n  return assign(elements, {\r\n    setup,\r\n    mount,\r\n    destroy,\r\n  });\r\n};\r\n","import { EVENT_REFRESH, EVENT_RESIZE } from '../../constants/events';\r\nimport { AnyFunction, BaseComponent, ComponentConstructor } from '../../types';\r\nimport {\r\n  addClass,\r\n  append,\r\n  apply,\r\n  before,\r\n  between,\r\n  CSSProperties,\r\n  empty,\r\n  forEach as forEachItem,\r\n  includes,\r\n  isFunction,\r\n  isHTMLElement,\r\n  isString,\r\n  matches,\r\n  parseHtml,\r\n  queryAll,\r\n  removeNode,\r\n  toArray,\r\n} from '@splidejs/utils';\r\nimport { Slide, SlideComponent } from './Slide';\r\n\r\n\r\n/**\r\n * The interface for the Slides component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface SlidesComponent extends BaseComponent {\r\n  update(): void;\r\n  register(slide: HTMLElement, index: number, slideIndex: number): void;\r\n  get(excludeClones?: boolean): SlideComponent[];\r\n  getIn(page: number): SlideComponent[];\r\n  getAt(index: number): SlideComponent | undefined;\r\n  add(slide: string | Element | Array<string | Element>, index?: number): void;\r\n  remove(selector: SlideMatcher): void;\r\n  forEach(iteratee: SlidesIteratee, excludeClones?: boolean): void;\r\n  filter(matcher: SlideMatcher): SlideComponent[];\r\n  style(prop: string, value: string | number, useContainer?: boolean): void\r\n  getLength(excludeClones?: boolean): number;\r\n  isEnough(): boolean;\r\n}\r\n\r\n/**\r\n * The iteratee function for Slides.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport type SlidesIteratee = (Slide: SlideComponent, index: number, Slides: SlideComponent[]) => void\r\n\r\n/**\r\n * The predicate function for Slides.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport type SlidesPredicate = (Slide: SlideComponent, index: number, Slides: SlideComponent[]) => any\r\n\r\n/**\r\n * The type for filtering SlideComponent objects.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport type SlideMatcher = number | number[] | string | SlidesPredicate;\r\n\r\n/**\r\n * The component for managing all slides include clones.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return An Slides component object.\r\n */\r\nexport const Slides: ComponentConstructor<SlidesComponent> = (Splide, Components, options, event) => {\r\n  const { on, emit, bind } = event;\r\n  const { slides, list } = Components.Elements;\r\n\r\n  /**\r\n   * Stores all SlideComponent objects.\r\n   */\r\n  const Slides: SlideComponent[] = [];\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on(EVENT_REFRESH, destroy);\r\n    on(EVENT_REFRESH, init);\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   */\r\n  function init(): void {\r\n    slides.forEach((slide, index) => register(slide, index, -1));\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    forEach(Slide => Slide.destroy());\r\n    empty(Slides);\r\n  }\r\n\r\n  /**\r\n   * Manually updates the status of all slides.\r\n   */\r\n  function update(): void {\r\n    forEach(Slide => Slide.update());\r\n  }\r\n\r\n  /**\r\n   * Registers a slide element and creates a Slide object.\r\n   * Needs to sort every time when a new slide is registered especially for clones.\r\n   *\r\n   * @param slide      - A slide element to register.\r\n   * @param index      - A slide index.\r\n   * @param slideIndex - A slide index for clones. This must be `-1` for regular slides.\r\n   */\r\n  function register(slide: HTMLElement, index: number, slideIndex: number): void {\r\n    const object = Slide(Splide, index, slideIndex, slide);\r\n    object.mount();\r\n    Slides.push(object);\r\n    Slides.sort((Slide1, Slide2) => Slide1.index - Slide2.index);\r\n  }\r\n\r\n  /**\r\n   * Returns all Slide objects.\r\n   *\r\n   * @param excludeClones - Optional. Determines whether to exclude clones or not.\r\n   *\r\n   * @return An array with Slide objects.\r\n   */\r\n  function get(excludeClones?: boolean): SlideComponent[] {\r\n    return excludeClones ? filter(Slide => !Slide.isClone) : Slides;\r\n  }\r\n\r\n  /**\r\n   * Returns slides in the specified page.\r\n   *\r\n   * @param page - A page index.\r\n   *\r\n   * @return An array with slides that belong to the page.\r\n   */\r\n  function getIn(page: number): SlideComponent[] {\r\n    const { Controller } = Components;\r\n    const index = Controller.toIndex(page);\r\n    const max = Controller.hasFocus() ? 1 : options.perPage;\r\n    return filter(Slide => between(Slide.index, index, index + max - 1));\r\n  }\r\n\r\n  /**\r\n   * Returns a Slide object at the specified index.\r\n   *\r\n   * @param index - A slide index.\r\n   *\r\n   * @return A Slide object if available, or otherwise `undefined`.\r\n   */\r\n  function getAt(index: number): SlideComponent | undefined {\r\n    return filter(index)[0];\r\n  }\r\n\r\n  /**\r\n   * Inserts a slide or slides at a specified index.\r\n   *\r\n   * @param items - A slide element, an HTML string or an array with them.\r\n   * @param index - Optional. An index to insert the slide at. If omitted, appends it to the list.\r\n   */\r\n  function add(items: string | Element | Array<string | Element>, index?: number): void {\r\n    forEachItem(items, slide => {\r\n      if (isString(slide)) {\r\n        slide = parseHtml(slide);\r\n      }\r\n\r\n      if (isHTMLElement(slide)) {\r\n        const ref = slides[index];\r\n        ref ? before(ref, slide) : append(list, slide);\r\n        addClass(slide, options.classes.slide);\r\n        observeImages(slide, apply(emit, EVENT_RESIZE));\r\n      }\r\n    });\r\n\r\n    emit(EVENT_REFRESH);\r\n  }\r\n\r\n  /**\r\n   * Removes slides that match the matcher\r\n   * that can be an index, an array with indices, a selector, or an iteratee function.\r\n   *\r\n   * @param matcher - An index, an array with indices, a selector string, or an iteratee function.\r\n   */\r\n  function remove(matcher: SlideMatcher): void {\r\n    removeNode(filter(matcher).map(Slide => Slide.slide));\r\n    emit(EVENT_REFRESH);\r\n  }\r\n\r\n  /**\r\n   * Iterates over Slide objects by the iteratee function.\r\n   *\r\n   * @param iteratee      - An iteratee function that takes a Slide object, an index and an array with Slides.\r\n   * @param excludeClones - Optional. Determines whether to exclude clones or not.\r\n   */\r\n  function forEach(iteratee: SlidesIteratee, excludeClones?: boolean): void {\r\n    get(excludeClones).forEach(iteratee);\r\n  }\r\n\r\n  /**\r\n   * Filters Slides by the matcher\r\n   * that can be an index, an array with indices, a selector, or a predicate function.\r\n   *\r\n   * @param matcher - An index, an array with indices, a selector string, or a predicate function.\r\n   *\r\n   * @return An array with SlideComponent objects.\r\n   */\r\n  function filter(matcher: SlideMatcher): SlideComponent[] {\r\n    return Slides.filter(isFunction(matcher)\r\n      ? matcher\r\n      : Slide => isString(matcher)\r\n        ? matches(Slide.slide, matcher)\r\n        : includes(toArray(matcher), Slide.index),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Adds a CSS rule to all slides or containers.\r\n   *\r\n   * @param prop         - A property name.\r\n   * @param value        - A CSS value to add.\r\n   * @param useContainer - Optional. Determines whether to apply the rule to the container or not.\r\n   */\r\n  function style(prop: CSSProperties, value: string | number, useContainer?: boolean): void {\r\n    forEach(Slide => Slide.style(prop, value, useContainer));\r\n  }\r\n\r\n  /**\r\n   * Invokes the callback after all images in the element are loaded.\r\n   *\r\n   * @param elm      - An element that may contain images.\r\n   * @param callback - A callback function.\r\n   */\r\n  function observeImages(elm: Element, callback: AnyFunction): void {\r\n    const images = queryAll(elm, 'img');\r\n    let { length } = images;\r\n\r\n    if (length) {\r\n      images.forEach(img => {\r\n        bind(img, 'load error', () => {\r\n          if (!--length) {\r\n            callback();\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      callback();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the length of slides.\r\n   *\r\n   * @param excludeClones - Optional. Determines whether to exclude clones or not.\r\n   *\r\n   * @return The length of slides.\r\n   */\r\n  function getLength(excludeClones?: boolean): number {\r\n    return excludeClones ? slides.length : Slides.length;\r\n  }\r\n\r\n  /**\r\n   * Checks if the number of slides is over than the `perPage` option, including clones.\r\n   *\r\n   * @return `true` if there are enough slides, or otherwise `false`.\r\n   */\r\n  function isEnough(): boolean {\r\n    return Slides.length > options.perPage;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy,\r\n    update,\r\n    register,\r\n    get,\r\n    getIn,\r\n    getAt,\r\n    add,\r\n    remove,\r\n    forEach,\r\n    filter,\r\n    style,\r\n    getLength,\r\n    isEnough,\r\n  };\r\n};\r\n","import { TTB } from '../../constants/directions';\r\nimport { EVENT_OVERFLOW, EVENT_REFRESH, EVENT_RESIZE, EVENT_RESIZED, EVENT_UPDATED } from '../../constants/events';\r\nimport { BaseComponent, ComponentConstructor } from '../../types';\r\nimport { abs, apply, isObject, rect, style, Throttle, toggleClass, unit } from '@splidejs/utils';\r\nimport { assert } from '../../utils';\r\nimport { FADE } from '../../constants/types';\r\nimport { CLASS_OVERFLOW } from '../../constants/classes';\r\n\r\n\r\n/**\r\n * The interface for the Layout component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface LayoutComponent extends BaseComponent {\r\n  trackSize(): number;\r\n  listSize(full?: boolean): number;\r\n  slideSize(index: number, withoutGap?: boolean): number;\r\n  sliderSize(withoutGap?: boolean): number;\r\n  totalSize(index?: number, withoutGap?: boolean): number;\r\n  getPadding(right: boolean): number;\r\n  isOverflow(): boolean;\r\n\r\n  /** @internal */\r\n  resize(force?: boolean): void;\r\n}\r\n\r\n/**\r\n * The component that adjusts slider styles and provides methods for dimensions.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return An Layout component object.\r\n */\r\nexport const Layout: ComponentConstructor<LayoutComponent> = (Splide, Components, options, event) => {\r\n  const { on, bind, emit } = event;\r\n  const { Slides } = Components;\r\n  const { resolve, left, right, width } = Components.Direction;\r\n  const { root, track, list } = Components.Elements;\r\n  const { getAt, style: styleSlides } = Slides;\r\n\r\n  /**\r\n   * Indicates whether the slider direction is vertical or not.\r\n   */\r\n  let vertical: boolean;\r\n\r\n  /**\r\n   * Keeps the DOMRect object of the root element.\r\n   */\r\n  let rootRect: DOMRect;\r\n\r\n  /**\r\n   * Turns into `true` when the carousel is wider than the list.\r\n   */\r\n  let overflow: boolean;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    bind(window, 'resize load', Throttle(apply(emit, EVENT_RESIZE)));\r\n    on([EVENT_UPDATED, EVENT_REFRESH], init);\r\n    on(EVENT_RESIZE, resize);\r\n  }\r\n\r\n  /**\r\n   * Initializes the component on `mount` or `updated`.\r\n   * Uses `max-width` for the root to prevent the slider from exceeding the parent element.\r\n   */\r\n  function init(): void {\r\n    vertical = options.direction === TTB;\r\n\r\n    style(root, 'maxWidth', unit(options.width));\r\n    style(track, resolve('paddingLeft'), cssPadding(false));\r\n    style(track, resolve('paddingRight'), cssPadding(true));\r\n\r\n    resize(true);\r\n  }\r\n\r\n  /**\r\n   * Updates dimensions of some elements when the carousel is resized.\r\n   * Also checks the carousel size and emits `overflow` events when it exceeds the list width.\r\n   *\r\n   * @param force - Skips checking the root dimension change and always performs the resizing process.\r\n   */\r\n  function resize(force?: boolean): void {\r\n    const newRect = rect(root);\r\n\r\n    if (force || rootRect.width !== newRect.width || rootRect.height !== newRect.height) {\r\n      style(track, 'height', cssTrackHeight());\r\n\r\n      styleSlides(resolve('marginRight'), unit(options.gap));\r\n      styleSlides('width', cssSlideWidth());\r\n      styleSlides('height', cssSlideHeight(), true);\r\n\r\n      rootRect = newRect;\r\n      emit(EVENT_RESIZED);\r\n\r\n      if (overflow !== (overflow = isOverflow())) {\r\n        toggleClass(root, CLASS_OVERFLOW, overflow);\r\n        emit(EVENT_OVERFLOW, overflow);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses the padding option and returns the value for each side.\r\n   * This method returns `paddingTop` or `paddingBottom` for the vertical slider.\r\n   *\r\n   * @param rightPadding - Determines whether to get `paddingRight/Bottom` or `paddingLeft/Top`.\r\n   *\r\n   * @return The padding value as a CSS string.\r\n   */\r\n  function cssPadding(rightPadding: boolean): string {\r\n    const { padding } = options;\r\n    const prop = rightPadding ? right() : left();\r\n    return padding\r\n      && unit(padding[prop] || (isObject(padding) ? 0 : padding))\r\n      || '0px';\r\n  }\r\n\r\n  /**\r\n   * Returns the height of the track element as a CSS string.\r\n   *\r\n   * @return The height of the track.\r\n   */\r\n  function cssTrackHeight(): string {\r\n    let height = '';\r\n\r\n    if (vertical) {\r\n      height = cssHeight();\r\n      assert(height, 'height or heightRatio is missing.');\r\n      height = `calc(${ height } - ${ cssPadding(false) } - ${ cssPadding(true) })`;\r\n    }\r\n\r\n    return height;\r\n  }\r\n\r\n  /**\r\n   * Converts options related with height to a CSS string.\r\n   *\r\n   * @return The height as a CSS string if available, or otherwise an empty string.\r\n   */\r\n  function cssHeight(): string {\r\n    return unit(options.height || rect(list).width * options.heightRatio);\r\n  }\r\n\r\n  /**\r\n   * Returns the width of the slide as a CSS string.\r\n   *\r\n   * @return The width of the slide.\r\n   */\r\n  function cssSlideWidth(): string | null {\r\n    return options.autoWidth\r\n      ? null\r\n      : unit(options.fixedWidth) || (vertical ? '' : cssSlideSize());\r\n  }\r\n\r\n  /**\r\n   * Returns the height of the slide as a CSS string.\r\n   *\r\n   * @return The height of the slide.\r\n   */\r\n  function cssSlideHeight(): string | null {\r\n    return unit(options.fixedHeight)\r\n      || (vertical ? (options.autoHeight ? null : cssSlideSize()) : cssHeight());\r\n  }\r\n\r\n  /**\r\n   * Returns the CSS string for slide width or height without gap.\r\n   *\r\n   * @return The CSS string for slide width or height.\r\n   */\r\n  function cssSlideSize(): string {\r\n    const gap = unit(options.gap);\r\n    return `calc((100%${ gap && ` + ${ gap }` })/${ options.perPage || 1 }${ gap && ` - ${ gap }` })`;\r\n  }\r\n\r\n  /**\r\n   * Returns the track width for the horizontal carousel, or the height for the vertical one.\r\n   *\r\n   * @return The size of the track element in pixel.\r\n   */\r\n  function trackSize(): number {\r\n    return rect(track)[width()];\r\n  }\r\n\r\n  /**\r\n   * Returns the list width for the horizontal carousel, or the height for the vertical one.\r\n   *\r\n   * @param full - Optional. If `true`, returns the width includes overflowed elements.\r\n   *\r\n   * @return The size of the list element in pixel.\r\n   */\r\n  function listSize(full?: boolean): number {\r\n    return full ? list[resolve('scrollWidth')] : rect(list)[width()];\r\n  }\r\n\r\n  /**\r\n   * Returns the slide width for the horizontal slider, or the height for the vertical slider.\r\n   *\r\n   * @param index      - Optional. A slide index.\r\n   * @param withoutGap - Optional. Determines whether to exclude the gap amount or not.\r\n   *\r\n   * @return The size of the specified slide element in pixel.\r\n   */\r\n  function slideSize(index = 0, withoutGap?: boolean): number {\r\n    const slide = getAt(index);\r\n    return (slide ? rect(slide.slide)[width()] : 0) + (withoutGap ? 0 : getGap());\r\n  }\r\n\r\n  /**\r\n   * Returns the total width or height of slides from the head of the slider to the specified index.\r\n   * This includes sizes of clones before the first slide.\r\n   *\r\n   * @param index      - A slide index. If omitted, uses the last index.\r\n   * @param withoutGap - Optional. Determines whether to exclude the last gap or not.\r\n   *\r\n   * @return The total width of slides in the horizontal slider, or the height in the vertical one.\r\n   */\r\n  function totalSize(index: number, withoutGap?: boolean): number {\r\n    const first = Components.Slides.get()[0];\r\n    const target = getAt(index);\r\n    return first && target\r\n      ? abs(rect(target.slide)[right()] - rect(first.slide)[left()]) + (withoutGap ? 0 : getGap())\r\n      : 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the slider size without clones before the first slide.\r\n   * Do not use the clone's size because it's unstable while initializing and refreshing process.\r\n   *\r\n   * @param withoutGap - Optional. Determines whether to exclude the last gap or not.\r\n   *\r\n   * @return The width or height of the slider without clones.\r\n   */\r\n  function sliderSize(withoutGap?: boolean): number {\r\n    return totalSize(Splide.length - 1) - totalSize(0) + slideSize(0, withoutGap);\r\n  }\r\n\r\n  /**\r\n   * Computes the gap by the first and second slides,\r\n   * without using `margin` for the CSS grid `gap`.\r\n   * This always returns 0 if the number of slides is less than 2.\r\n   *\r\n   * @return The gap value in pixel.\r\n   */\r\n  function getGap(): number {\r\n    const first = getAt(0);\r\n    const second = getAt(1);\r\n\r\n    if (first && second) {\r\n      const firstRect = rect(first.slide);\r\n      return abs(rect(second.slide)[left()] - firstRect[left()]) - firstRect[width()];\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the padding value.\r\n   * This method resolves the difference of the direction.\r\n   *\r\n   * @param right - Determines whether to get `paddingRight/Bottom` or `paddingLeft/Top`.\r\n   *\r\n   * @return The padding value in pixel.\r\n   */\r\n  function getPadding(right: boolean): number {\r\n    return parseFloat(style(\r\n      track,\r\n      resolve(`padding${ right ? 'Right' : 'Left' }`),\r\n    )) || 0;\r\n  }\r\n\r\n  /**\r\n   * Checks if the carousel is wider than the list.\r\n   * This method always returns `true` for a fade carousel.\r\n   *\r\n   * @return `true` if the carousel is wider than the list, or otherwise `false`.\r\n   */\r\n  function isOverflow(): boolean {\r\n    return Splide.is(FADE) || sliderSize(true) > listSize();\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    resize,\r\n    trackSize,\r\n    listSize,\r\n    slideSize,\r\n    sliderSize,\r\n    totalSize,\r\n    getPadding,\r\n    isOverflow,\r\n  };\r\n};\r\n","import { EVENT_REFRESH, EVENT_RESIZE, EVENT_UPDATED } from '../../constants/events';\r\nimport { LOOP } from '../../constants/types';\r\nimport { BaseComponent, ComponentConstructor } from '../../types';\r\nimport { addClass, append, before, ceil, empty, isUndefined, pad, push, removeNode } from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The interface for the Clone component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ClonesComponent extends BaseComponent {\r\n}\r\n\r\n/**\r\n * The multiplier to determine the number of clones.\r\n *\r\n * @since 4.0.0\r\n */\r\nexport const MULTIPLIER = 2;\r\n\r\n/**\r\n * The component that generates clones for the loop slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Clones component object.\r\n */\r\nexport const Clones: ComponentConstructor<ClonesComponent> = (Splide, Components, options, event) => {\r\n  const { on } = event;\r\n  const { Elements, Slides, Layout: { resize, trackSize } } = Components;\r\n  const { resolve } = Components.Direction;\r\n\r\n  /**\r\n   * Stores all cloned elements.\r\n   */\r\n  const clones: HTMLElement[] = [];\r\n\r\n  /**\r\n   * Keeps the current number of clones.\r\n   */\r\n  let cloneCount: number;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   * Needs to remount the component on refresh, otherwise `refresh` event will be triggered again while refreshing.\r\n   */\r\n  function mount(): void {\r\n    on(EVENT_REFRESH, remount);\r\n    on([EVENT_UPDATED, EVENT_RESIZE], observe);\r\n\r\n    if ((cloneCount = computeCloneCount())) {\r\n      generate(cloneCount);\r\n      resize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remounts the component.\r\n   */\r\n  function remount(): void {\r\n    destroy();\r\n    mount();\r\n    resize(true);\r\n  }\r\n\r\n  /**\r\n   * Destroys clones.\r\n   */\r\n  function destroy(): void {\r\n    removeNode(clones);\r\n    empty(clones);\r\n    event.destroy();\r\n  }\r\n\r\n  /**\r\n   * Observes the required clone count and refreshes the slider if necessary.\r\n   * If clones are disabled by `0`, moves the carousel to the first slide.\r\n   */\r\n  function observe(): void {\r\n    const count = computeCloneCount();\r\n\r\n    if (cloneCount !== count) {\r\n      if (cloneCount < count || !count) {\r\n        !count && Splide.go(0);\r\n        event.emit(EVENT_REFRESH);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates the specified number of clones.\r\n   *\r\n   * @param count - The number of clones to generate for each side.\r\n   */\r\n  function generate(count: number): void {\r\n    const slides = Slides.get().slice();\r\n    const { length } = slides;\r\n\r\n    if (length) {\r\n      while (slides.length < count) {\r\n        push(slides, slides);\r\n      }\r\n\r\n      push(slides.slice(-count), slides.slice(0, count)).forEach((Slide, index) => {\r\n        const isHead = index < count;\r\n        const clone = cloneDeep(Slide.slide, index);\r\n        isHead ? before(slides[0].slide, clone) : append(Elements.list, clone);\r\n        push(clones, clone);\r\n        Slides.register(clone, index - count + (isHead ? 0 : length), Slide.index);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deeply clones the provided element with removing the ID attribute.\r\n   *\r\n   * @param elm   - An element to clone.\r\n   * @param index - An index of the clone.\r\n   *\r\n   * @return A cloned element.\r\n   */\r\n  function cloneDeep(elm: HTMLElement, index: number): HTMLElement {\r\n    const clone = elm.cloneNode(true) as HTMLElement;\r\n    addClass(clone, options.classes.clone);\r\n    clone.id = `${ Splide.root.id }-clone${ pad(index + 1) }`;\r\n    return clone;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of elements to generate.\r\n   * This always returns 0 if the slider type is not `'loop'`.\r\n   *\r\n   * @return The number of clones.\r\n   */\r\n  function computeCloneCount(): number {\r\n    let { clones } = options;\r\n\r\n    if (!Splide.is(LOOP)) {\r\n      clones = 0;\r\n    } else if (isUndefined(clones)) {\r\n      const fixedSize = options[resolve('fixedWidth')] && Components.Layout.slideSize(0);\r\n      const fixedCount = fixedSize && ceil(trackSize() / fixedSize);\r\n      clones = fixedCount || (options[resolve('autoWidth')] && Splide.length) || options.perPage * MULTIPLIER;\r\n    }\r\n\r\n    return clones;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy,\r\n  };\r\n};\r\n","import {\r\n  EVENT_MOUNTED,\r\n  EVENT_MOVE,\r\n  EVENT_MOVED,\r\n  EVENT_REFRESH,\r\n  EVENT_RESIZED,\r\n  EVENT_SHIFTED,\r\n  EVENT_UPDATED,\r\n} from '../../constants/events';\r\nimport { IDLE, MOVING } from '../../constants/states';\r\nimport { FADE, LOOP, SLIDE } from '../../constants/types';\r\nimport { AnyFunction, BaseComponent, ComponentConstructor, TransitionComponent } from '../../types';\r\nimport { abs, ceil, clamp, isUndefined, rect, style } from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The interface for the Move component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface MoveComponent extends BaseComponent {\r\n  move(dest: number, index: number, prev: number, forwards: boolean, callback?: AnyFunction): void;\r\n  jump(index: number): void;\r\n  translate(position: number, preventLoop?: boolean): void;\r\n  shift(position: number, backwards: boolean): number;\r\n  cancel(): void;\r\n  toIndex(position: number): number;\r\n  toPosition(index: number): number;\r\n  getPosition(): number;\r\n  getRate(index?: number): number;\r\n  getLimit(max: boolean): number;\r\n  exceededLimit(max?: boolean | undefined, position?: number): boolean;\r\n\r\n  /** @internal */\r\n  reposition(): void;\r\n  canShift(backwards: boolean): boolean;\r\n}\r\n\r\n/**\r\n * The component for moving the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Move component object.\r\n */\r\nexport const Move: ComponentConstructor<MoveComponent> = (Splide, Components, options, event) => {\r\n  const { on, emit } = event;\r\n  const { set, is } = Splide.state;\r\n  const { Slides } = Components;\r\n  const { slideSize, getPadding, listSize, sliderSize, totalSize, trackSize } = Components.Layout;\r\n  const { resolve, orient } = Components.Direction;\r\n  const { list, track } = Components.Elements;\r\n\r\n  /**\r\n   * Holds the Transition component.\r\n   */\r\n  let Transition: TransitionComponent;\r\n\r\n  /**\r\n   * Keeps the latest indices.\r\n   */\r\n  let indices: [number, number, number];\r\n\r\n  let callback: AnyFunction;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    Transition = Components.Transition;\r\n    on([EVENT_MOUNTED, EVENT_RESIZED, EVENT_UPDATED, EVENT_REFRESH], reposition);\r\n  }\r\n\r\n  /**\r\n   * Repositions the slider.\r\n   * - Do not call `cancel()` here because LazyLoad may emit resize while transitioning.\r\n   * - iOS Safari emits window resize event while the user swipes the slider because of the bottom bar.\r\n   */\r\n  function reposition(): void {\r\n    if (!Components.Controller.isBusy()) {\r\n      Components.Scroll.cancel();\r\n      jump(Splide.index);\r\n      Slides.update();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Moves the slider to the dest index with the Transition component.\r\n   * Needs to shift the carousel when:\r\n   * - Crossing bounds (dest !== index)\r\n   * - The destination is further than the opposite destination.\r\n   *\r\n   * @param dest     - A destination index to go to, including clones'.\r\n   * @param index    - A slide index.\r\n   * @param prev     - A previous index.\r\n   * @param forwards - Specifies the move direction.\r\n   * @param onMoved  - Optional. A callback function invoked after transition ends.\r\n   */\r\n  function move(dest: number, index: number, prev: number, forwards: boolean, onMoved?: AnyFunction): void {\r\n    cancel();\r\n\r\n    const shiftBackwards = dest !== index ? dest > index : forwards;\r\n    const shouldShift = (dest !== index || exceededLimit(forwards)) && canShift(shiftBackwards);\r\n\r\n    shouldShift && translate(shift(getPosition(), shiftBackwards), true);\r\n\r\n    indices = [index, prev, dest];\r\n    callback = onMoved;\r\n\r\n    set(MOVING);\r\n    emit(EVENT_MOVE, index, prev, dest);\r\n    Transition.start(index, onTransitionEnd);\r\n  }\r\n\r\n  /**\r\n   * Called when transition ends or is cancelled.\r\n   */\r\n  function onTransitionEnd(): void {\r\n    set(IDLE);\r\n    emit(EVENT_MOVED, ...indices);\r\n    callback && callback();\r\n  }\r\n\r\n  /**\r\n   * Cancels transition.\r\n   */\r\n  function cancel(): void {\r\n    if (is(MOVING) && indices) {\r\n      translate(getPosition(), true);\r\n      Transition.cancel();\r\n      onTransitionEnd();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Jumps to the slide at the specified index (silently).\r\n   *\r\n   * @param index - An index to jump to.\r\n   */\r\n  function jump(index: number): void {\r\n    translate(toPosition(index));\r\n  }\r\n\r\n  /**\r\n   * Moves the slider to the provided position.\r\n   *\r\n   * @param position    - The position to move to.\r\n   * @param preventLoop - Optional. If `true`, sets the provided position as is.\r\n   */\r\n  function translate(position: number, preventLoop?: boolean): void {\r\n    if (!Splide.is(FADE)) {\r\n      const destination = preventLoop ? position : loop(position);\r\n      style(list, 'transform', `translate${ resolve('X') }(${ destination }px)`);\r\n      position !== destination && emit(EVENT_SHIFTED);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Loops the provided position if it exceeds bounds (limit indices).\r\n   *\r\n   * @param position - A position to loop.\r\n   *\r\n   * @return A looped position.\r\n   */\r\n  function loop(position: number): number {\r\n    if (Splide.is(LOOP)) {\r\n      const diff = orient(position) - orient(getPosition());\r\n\r\n      if (diff && exceededLimit(diff > 0, position)) {\r\n        position = shift(position, diff > 0);\r\n      }\r\n    }\r\n\r\n    return position;\r\n  }\r\n\r\n  /**\r\n   * Adds or subtracts the carousel width to the provided position.\r\n   *\r\n   * @param position  - A position to shift.\r\n   * @param backwards - Determines whether to shift the carousel backwards or forwards.\r\n   *\r\n   * @return The shifted position.\r\n   */\r\n  function shift(position: number, backwards: boolean): number {\r\n    const excess = position - getLimit(backwards);\r\n    const size = sliderSize();\r\n    position -= orient(size * (ceil(abs(excess) / size) || 1)) * (backwards ? 1 : -1);\r\n    return position;\r\n  }\r\n\r\n  /**\r\n   * Returns the closest index to the position.\r\n   *\r\n   * @param position - A position to convert.\r\n   *\r\n   * @return The closest index to the position.\r\n   */\r\n  function toIndex(position: number): number {\r\n    const slides = Slides.get();\r\n\r\n    let index = 0;\r\n    let minDistance = Infinity;\r\n\r\n    for (let i = 0; i < slides.length; i++) {\r\n      const slideIndex = slides[i].index;\r\n      const distance = abs(toPosition(slideIndex) - position);\r\n\r\n      if (distance <= minDistance) {\r\n        minDistance = distance;\r\n        index = slideIndex;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * Converts the slide index to the position.\r\n   *\r\n   * @param index - An index to convert.\r\n   *\r\n   * @return The position corresponding with the index.\r\n   */\r\n  function toPosition(index: number): number {\r\n    let position = orient(totalSize(index - 1) - offset(index));\r\n\r\n    if (options.trimSpace && Splide.is(SLIDE)) {\r\n      position = clamp(position, 0, orient(sliderSize(true) - listSize()));\r\n    }\r\n\r\n    return position;\r\n  }\r\n\r\n  /**\r\n   * Returns the current position.\r\n   *\r\n   * @return The position of the list element.\r\n   */\r\n  function getPosition(): number {\r\n    const left = resolve('left');\r\n    return rect(list)[left] - rect(track)[left] + orient(getPadding(false));\r\n  }\r\n\r\n  /**\r\n   * Returns the carousel progress rate.\r\n   *\r\n   * @param index - Optional. If specified, returns the rate of the slide at the index.\r\n   *\r\n   * @return The progress rate.\r\n   */\r\n  function getRate(index?: number): number {\r\n    const useIndex = !isUndefined(index);\r\n    let rate;\r\n\r\n    if (Splide.is(FADE)) {\r\n      rate = (useIndex ? index : Splide.index) / (Splide.length - 1);\r\n    } else {\r\n      const isLoop = Splide.is(LOOP);\r\n      const position = orient(useIndex ? toPosition(index) : getPosition());\r\n      const min = orient(getLimit(false));\r\n      const max = orient(getLimit(true));\r\n      const size = sliderSize();\r\n      const curr = (position - min) % size;\r\n      const base = isLoop ? size : max - min;\r\n\r\n      rate = (curr / base) || 0;\r\n\r\n      if (isLoop && rate < 0) {\r\n        rate += 1;\r\n      }\r\n    }\r\n\r\n    return clamp(rate, 0, 1);\r\n  }\r\n\r\n  /**\r\n   * Returns the offset amount.\r\n   *\r\n   * @param index - An index.\r\n   */\r\n  function offset(index: number): number {\r\n    const { focus } = options;\r\n    return focus === 'center'\r\n      ? (listSize() - slideSize(index, true)) / 2\r\n      : +focus * slideSize(index) || 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the limit number that the slider can move to.\r\n   *\r\n   * @param max - Determines whether to return the maximum or minimum limit.\r\n   *\r\n   * @return The border number.\r\n   */\r\n  function getLimit(max: boolean): number {\r\n    return toPosition(max ? Components.Controller.getEnd() : 0);\r\n  }\r\n\r\n  /**\r\n   * Checks if there is enough width to shift the slider.\r\n   *\r\n   * @param backwards - `true` for checking backwards, or `false` for doing forwards.\r\n   *\r\n   * @return `true` if the slider can be shifted for the specified direction, or otherwise `false`.\r\n   */\r\n  function canShift(backwards: boolean): boolean {\r\n    const padding = getPadding(false);\r\n    const shifted = orient(shift(getPosition(), backwards));\r\n    return backwards ? shifted >= padding : shifted <= listSize(true) - trackSize() + padding;\r\n  }\r\n\r\n  /**\r\n   * Checks if the provided position exceeds the minimum or maximum limit or not.\r\n   *\r\n   * @param max      - Optional. `true` for testing max, `false` for min, and `undefined` for both.\r\n   * @param position - Optional. A position to test. If omitted, tests the current position.\r\n   *\r\n   * @return `true` if the position exceeds the limit, or otherwise `false`.\r\n   */\r\n  function exceededLimit(max?: boolean | undefined, position = getPosition()): boolean {\r\n    const exceededMin = max !== true && orient(position) < orient(getLimit(false));\r\n    const exceededMax = max !== false && orient(position) > orient(getLimit(true));\r\n    return exceededMin || exceededMax;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    move,\r\n    jump,\r\n    translate,\r\n    shift,\r\n    cancel,\r\n    toIndex,\r\n    toPosition,\r\n    getPosition,\r\n    getRate,\r\n    getLimit,\r\n    exceededLimit,\r\n    reposition,\r\n    canShift,\r\n  };\r\n};\r\n","import {\r\n  EVENT_MOVE,\r\n  EVENT_REFRESH,\r\n  EVENT_SCROLL,\r\n  EVENT_SCROLLED,\r\n  EVENT_SCROLLING,\r\n  EVENT_UPDATED,\r\n} from '../../constants/events';\r\nimport { IDLE, SCROLLING } from '../../constants/states';\r\nimport { SLIDE } from '../../constants/types';\r\nimport { AnyFunction, BaseComponent, ComponentConstructor } from '../../types';\r\nimport { abs, apply, approximatelyEqual, max, RequestInterval } from '@splidejs/utils';\r\nimport { BASE_VELOCITY, BOUNCE_DIFF_THRESHOLD, BOUNCE_DURATION, FRICTION_FACTOR, MIN_DURATION } from './constants';\r\n\r\n\r\n/**\r\n * The interface for the Scroll component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ScrollComponent extends BaseComponent {\r\n  scroll(position: number, duration?: number, snap?: boolean, callback?: AnyFunction): void;\r\n  cancel(): void;\r\n}\r\n\r\n/**\r\n * The component for scrolling the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Scroll component object.\r\n */\r\nexport const Scroll: ComponentConstructor<ScrollComponent> = (Splide, Components, options, event) => {\r\n  const { on, emit } = event;\r\n  const { state: { set } } = Splide;\r\n  const { Move } = Components;\r\n  const { getPosition, getLimit, exceededLimit, translate } = Move;\r\n  const isSlide = Splide.is(SLIDE);\r\n\r\n  /**\r\n   * Retains the active RequestInterval object.\r\n   */\r\n  let interval: RequestInterval;\r\n\r\n  /**\r\n   * Holds the callback function.\r\n   */\r\n  let callback: AnyFunction;\r\n\r\n  /**\r\n   * The current friction (<= 1).\r\n   */\r\n  let friction = 1;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    on(EVENT_MOVE, clear);\r\n    on([EVENT_UPDATED, EVENT_REFRESH], cancel);\r\n  }\r\n\r\n  /**\r\n   * Scrolls the slider to the provided destination.\r\n   *\r\n   * @param destination - The destination to scroll the slider to.\r\n   * @param duration    - Optional. The scroll duration. If omitted, calculates it by the distance.\r\n   * @param snap        - Optional. Whether to snap the slider to the closest slide or not.\r\n   * @param onScrolled  - Optional. A callback invoked after scroll ends.\r\n   * @param noConstrain - Optional. Whether to suppress constraint process when the slider exceeds bounds.\r\n   */\r\n  function scroll(\r\n    destination: number,\r\n    duration?: number,\r\n    snap?: boolean,\r\n    onScrolled?: AnyFunction,\r\n    noConstrain?: boolean,\r\n  ): void {\r\n    clear();\r\n\r\n    const dest = computeDestination(destination, snap);\r\n    const from = getPosition();\r\n    const immediately = approximatelyEqual(from, dest, 1) || duration === 0;\r\n\r\n    friction = 1;\r\n    duration = immediately ? 0 : duration || max(abs(dest - from) / BASE_VELOCITY, MIN_DURATION);\r\n    callback = onScrolled;\r\n    interval = RequestInterval(duration, onEnd, apply(update, from, dest, noConstrain), 1);\r\n\r\n    set(SCROLLING);\r\n    emit(EVENT_SCROLL);\r\n    interval.start();\r\n  }\r\n\r\n  /**\r\n   * Computes destination.\r\n   *\r\n   * @param destination - A desired destination.\r\n   * @param snap        - Optional. Whether to snap the slider to the closest slide or not.\r\n   *\r\n   * @return A computed destination.\r\n   */\r\n  function computeDestination(destination: number, snap?: boolean): number {\r\n    if (snap) {\r\n      if (!isSlide || !exceededLimit()) {\r\n        const position = destination % Components.Layout.sliderSize();\r\n        const snapped = Move.toPosition(Components.Controller.toDest(position));\r\n        destination -= position - snapped;\r\n      }\r\n    }\r\n\r\n    return destination;\r\n  }\r\n\r\n  /**\r\n   * Called when scroll ends or has been just canceled.\r\n   */\r\n  function onEnd(): void {\r\n    set(IDLE);\r\n    callback && callback();\r\n    emit(EVENT_SCROLLED);\r\n  }\r\n\r\n  /**\r\n   * Called whenever the interval timer is updated.\r\n   *\r\n   * @param from        - A position where scroll starts.\r\n   * @param to          - A destination where the slider goes.\r\n   * @param noConstrain - Whether to suppress constraint process when the slider exceeds bounds.\r\n   * @param rate        - A current rate.\r\n   */\r\n  function update(from: number, to: number, noConstrain: boolean | undefined, rate: number): void {\r\n    const { easingFunc = t => 1 - Math.pow(1 - t, 4) } = options;\r\n    const position = getPosition();\r\n    const target = from + (to - from) * easingFunc(rate);\r\n    const diff = (target - position) * friction;\r\n\r\n    translate(position + diff);\r\n    emit(EVENT_SCROLLING);\r\n\r\n    if (isSlide && !noConstrain && exceededLimit()) {\r\n      friction *= FRICTION_FACTOR;\r\n\r\n      if (abs(diff) < BOUNCE_DIFF_THRESHOLD) {\r\n        scroll(getLimit(exceededLimit(true)), BOUNCE_DURATION, false, callback, true);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clears the active interval.\r\n   */\r\n  function clear(): void {\r\n    if (interval) {\r\n      interval.cancel();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancels the active interval and emits the `scrolled` event.\r\n   */\r\n  function cancel(): void {\r\n    if (interval && !interval.isPaused()) {\r\n      clear();\r\n      onEnd();\r\n    }\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy: clear,\r\n    scroll,\r\n    cancel,\r\n  };\r\n};\r\n","/**\r\n * Triggers the bounce effect when the diff becomes less than this value.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const BOUNCE_DIFF_THRESHOLD = 10;\r\n\r\n/**\r\n * The duration of the bounce effect.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const BOUNCE_DURATION = 600;\r\n\r\n/**\r\n * The friction factor.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const FRICTION_FACTOR = 0.6;\r\n\r\n/**\r\n * The velocity to calculate the scroll duration.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const BASE_VELOCITY = 1.5;\r\n\r\n/**\r\n * The minimum duration of scroll.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const MIN_DURATION = 800;\r\n","import { EVENT_END_INDEX_CHANGED, EVENT_REFRESH, EVENT_RESIZED, EVENT_UPDATED } from '../../constants/events';\r\nimport { MOVING, SCROLLING } from '../../constants/states';\r\nimport { LOOP, SLIDE } from '../../constants/types';\r\nimport { AnyFunction, BaseComponent, ComponentConstructor } from '../../types';\r\nimport {\r\n  apply,\r\n  approximatelyEqual,\r\n  between,\r\n  clamp,\r\n  floor,\r\n  includes,\r\n  isString,\r\n  isUndefined,\r\n  min,\r\n} from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The interface for the Controller component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ControllerComponent extends BaseComponent {\r\n  go(control: number | string, callback?: AnyFunction): void;\r\n  jump(control: number | string): void;\r\n  scroll(destination: number, duration?: number, snap?: boolean, callback?: AnyFunction): void;\r\n  getNext(destination?: boolean): number;\r\n  getPrev(destination?: boolean): number;\r\n  getEnd(): number;\r\n  setIndex(index: number): void;\r\n  getIndex(prev?: boolean): number;\r\n  toIndex(page: number): number;\r\n  toPage(index: number): number;\r\n  toDest(position: number): number;\r\n  hasFocus(): boolean;\r\n  isBusy(): boolean;\r\n\r\n  /** @internal */\r\n  getAdjacent(prev: boolean, destination?: boolean): number;\r\n}\r\n\r\n/**\r\n * The component for controlling the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Controller component object.\r\n */\r\nexport const Controller: ComponentConstructor<ControllerComponent> = (Splide, Components, options, event) => {\r\n  const { on, emit } = event;\r\n  const { Move, Scroll } = Components;\r\n  const { getPosition, getLimit, toPosition } = Move;\r\n  const { isEnough, getLength } = Components.Slides;\r\n  const { omitEnd } = options;\r\n  const isLoop = Splide.is(LOOP);\r\n  const isSlide = Splide.is(SLIDE);\r\n  const getNext = apply(getAdjacent, false);\r\n  const getPrev = apply(getAdjacent, true);\r\n\r\n  /**\r\n   * The current index.\r\n   */\r\n  let currIndex = options.start || 0;\r\n\r\n  /**\r\n   * The latest end index.\r\n   */\r\n  let endIndex: number;\r\n\r\n  /**\r\n   * The previous index.\r\n   */\r\n  let prevIndex = currIndex;\r\n\r\n  /**\r\n   * The latest number of slides.\r\n   */\r\n  let slideCount: number;\r\n\r\n  /**\r\n   * The latest `perMove` value.\r\n   */\r\n  let perMove: number;\r\n\r\n  /**\r\n   * The latest `perMove` value.\r\n   */\r\n  let perPage: number;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on([EVENT_UPDATED, EVENT_REFRESH, EVENT_END_INDEX_CHANGED], init);\r\n    on(EVENT_RESIZED, onResized);\r\n  }\r\n\r\n  /**\r\n   * Initializes some parameters.\r\n   * Needs to check the number of slides since the current index may be out of the range after refresh.\r\n   * The process order must be Elements -> Controller -> Move.\r\n   */\r\n  function init(): void {\r\n    slideCount = getLength(true);\r\n    perMove = options.perMove;\r\n    perPage = options.perPage;\r\n    endIndex = getEnd();\r\n\r\n    const end = omitEnd ? endIndex : slideCount - 1;\r\n    const index = clamp(currIndex, 0, end);\r\n\r\n    prevIndex = index;\r\n\r\n    if (index !== currIndex) {\r\n      currIndex = index;\r\n      Move.reposition();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the viewport width is changed.\r\n   * The end index can change if `autoWidth` or `fixedWidth` is enabled.\r\n   */\r\n  function onResized(): void {\r\n    if (endIndex !== getEnd()) {\r\n      emit(EVENT_END_INDEX_CHANGED);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Moves the carousel by the control pattern.\r\n   * - `Move.exceededLimit( ! forwards )` checks if the carousel is already shifted\r\n   * - `Move.canShift( forwards )` checks if there is enough space to shift the carousel.\r\n   *\r\n   * @see `Splide#go()`\r\n   *\r\n   * @param control  - A control pattern.\r\n   * @param callback - Optional. A callback function invoked after transition ends.\r\n   */\r\n  function go(control: number | string, callback?: AnyFunction): void {\r\n    if (!isBusy()) {\r\n      const [dest, forwards] = parse(control);\r\n      const index = loop(dest);\r\n      const canGo = dest === index || Move.exceededLimit(!forwards) || Move.canShift(forwards);\r\n\r\n      if (index > -1 && canGo) {\r\n        Scroll.cancel();\r\n        setIndex(index);\r\n        Move.move(dest, index, prevIndex, forwards, callback);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Immediately jumps to the specified index.\r\n   *\r\n   * @param control - An index where to jump.\r\n   */\r\n  function jump(control: number | string): void {\r\n    const { set } = Components.Breakpoints;\r\n    const { speed } = options;\r\n\r\n    set({ speed: 0 });\r\n    go(control);\r\n    set({ speed });\r\n  }\r\n\r\n  /**\r\n   * Scrolls the slider to the specified destination with updating indices.\r\n   *\r\n   * @param destination - The position to scroll the slider to.\r\n   * @param duration    - Optional. Specifies the scroll duration.\r\n   * @param snap        - Optional. Whether to snap the slider to the closest slide or not.\r\n   * @param callback    - Optional. A callback function invoked after scroll ends.\r\n   */\r\n  function scroll(destination: number, duration?: number, snap?: boolean, callback?: AnyFunction): void {\r\n    Scroll.scroll(destination, duration, snap, () => {\r\n      const index = loop(Move.toIndex(getPosition()));\r\n      setIndex(omitEnd ? min(index, endIndex) : index);\r\n      callback && callback();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Parses the control and returns a dest index.\r\n   *\r\n   * @param control - A control pattern to parse.\r\n   *\r\n   * @return A `dest` index.\r\n   */\r\n  function parse(control: number | string): [number, boolean] {\r\n    let dest = currIndex;\r\n    let forwards = true;\r\n\r\n    if (isString(control)) {\r\n      const [, indicator, number] = control.match(/([+-]|>>?|<<?)(-?\\d+)?/) || [];\r\n      const oneOf = (...indicators: string[]) => includes(indicators, indicator);\r\n\r\n      forwards = oneOf('+', '>', '>>');\r\n\r\n      if (oneOf('+', '-')) {\r\n        dest = computeDestIndex(currIndex + +`${ indicator }${ +number || 1 }`, currIndex);\r\n      } else if (oneOf('>', '<')) {\r\n        dest = number ? toIndex(+number) : getAdjacent(!forwards, true);\r\n      } else if (oneOf('>>', '<<')) {\r\n        dest = number ? +number || 0 : forwards ? endIndex : 0;\r\n      }\r\n    } else {\r\n      dest = isLoop ? control : clamp(control, 0, endIndex);\r\n    }\r\n\r\n    return [dest, forwards];\r\n  }\r\n\r\n  /**\r\n   * Returns an adjacent destination index.\r\n   *\r\n   * @internal\r\n   *\r\n   * @param prev        - Determines whether to return a previous or next index.\r\n   * @param destination - Optional. Determines whether to get a destination index or a slide one.\r\n   *\r\n   * @return An adjacent index if available, or otherwise `-1`.\r\n   */\r\n  function getAdjacent(prev: boolean, destination?: boolean): number {\r\n    const number = perMove || (hasFocus() ? 1 : perPage);\r\n    const dest = computeDestIndex(currIndex + number * (prev ? -1 : 1), currIndex, !(perMove || hasFocus()));\r\n\r\n    if (dest === -1 && isSlide) {\r\n      if (!approximatelyEqual(getPosition(), getLimit(!prev), 1)) {\r\n        return prev ? 0 : endIndex;\r\n      }\r\n    }\r\n\r\n    return destination ? dest : loop(dest);\r\n  }\r\n\r\n  /**\r\n   * Converts the desired destination index to the valid one.\r\n   * - If the `move` option is `true`, finds the dest index whose position is different with the current one.\r\n   * - This may return clone indices if the editor is the loop mode,\r\n   *   or `-1` if there is no slide to go.\r\n   * - There are still slides where the carousel can go if borders are between `from` and `dest`.\r\n   * - If `focus` is available, needs to calculate the dest index even if there are enough number of slides.\r\n   *\r\n   * @param dest     - The desired destination index.\r\n   * @param from     - A base index.\r\n   * @param snapPage - Optional. Whether to snap a page or not.\r\n   *\r\n   * @return A converted destination index, including clones.\r\n   */\r\n  function computeDestIndex(dest: number, from: number, snapPage?: boolean): number {\r\n    if (isEnough() || hasFocus()) {\r\n      const index = computeMovableDestIndex(dest);\r\n\r\n      if (index !== dest) {\r\n        from = dest;\r\n        dest = index;\r\n        snapPage = false;\r\n      }\r\n\r\n      if (dest < 0 || dest > endIndex) {\r\n        if (!perMove && (between(0, dest, from, true) || between(endIndex, from, dest, true))) {\r\n          dest = toIndex(toPage(dest));\r\n        } else {\r\n          if (isLoop) {\r\n            dest = snapPage\r\n              ? dest < 0 ? -(slideCount % perPage || perPage) : slideCount\r\n              : dest;\r\n          } else if (options.rewind) {\r\n            dest = dest < 0 ? endIndex : 0;\r\n          } else {\r\n            dest = -1;\r\n          }\r\n        }\r\n      } else {\r\n        if (snapPage && dest !== from) {\r\n          dest = toIndex(toPage(from) + (dest < from ? -1 : 1));\r\n        }\r\n      }\r\n    } else {\r\n      dest = -1;\r\n    }\r\n\r\n    return dest;\r\n  }\r\n\r\n  /**\r\n   * Finds the dest index whose position is different with the current one for `trimSpace: 'move'`.\r\n   * This can be negative or greater than `length - 1`.\r\n   *\r\n   * @param dest - A dest index.\r\n   *\r\n   * @return A dest index.\r\n   */\r\n  function computeMovableDestIndex(dest: number): number {\r\n    if (isSlide && options.trimSpace === 'move' && dest !== currIndex) {\r\n      const position = getPosition();\r\n\r\n      while (position === toPosition(dest) && between(dest, 0, Splide.length - 1, !options.rewind)) {\r\n        dest < currIndex ? --dest : ++dest;\r\n      }\r\n    }\r\n\r\n    return dest;\r\n  }\r\n\r\n  /**\r\n   * Loops the provided index only in the loop mode.\r\n   *\r\n   * @param index - An index to loop.\r\n   *\r\n   * @return A looped index.\r\n   */\r\n  function loop(index: number): number {\r\n    return isLoop ? (index + slideCount) % slideCount || 0 : index;\r\n  }\r\n\r\n  /**\r\n   * Returns the end index where the slider can go.\r\n   * For example, if the slider has 10 slides and the `perPage` option is 3,\r\n   * the slider can go to the slide 8 (the index is 7).\r\n   * If the `omitEnd` option is available, computes the index from the slide position.\r\n   *\r\n   * @return An end index.\r\n   */\r\n  function getEnd(): number {\r\n    let end = slideCount - (hasFocus() || (isLoop && perMove) ? 1 : perPage);\r\n\r\n    while (omitEnd && end-- > 0) {\r\n      if (!approximatelyEqual(toPosition(slideCount - 1), toPosition(end), 0.01)) {\r\n        end++;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return clamp(end, 0, slideCount - 1);\r\n  }\r\n\r\n  /**\r\n   * Converts the page index to the slide index.\r\n   *\r\n   * @param page - A page index to convert.\r\n   *\r\n   * @return A slide index.\r\n   */\r\n  function toIndex(page: number): number {\r\n    return clamp(hasFocus() ? page : perPage * page, 0, endIndex);\r\n  }\r\n\r\n  /**\r\n   * Converts the slide index to the page index.\r\n   *\r\n   * @param index - An index to convert.\r\n   *\r\n   * @return A page index.\r\n   */\r\n  function toPage(index: number): number {\r\n    return hasFocus()\r\n      ? min(index, endIndex)\r\n      : floor((index >= endIndex ? slideCount - 1 : index) / perPage);\r\n  }\r\n\r\n  /**\r\n   * Converts the destination position to the dest index.\r\n   *\r\n   * @param destination - A position to convert.\r\n   *\r\n   * @return A dest index.\r\n   */\r\n  function toDest(destination: number): number {\r\n    const closest = Move.toIndex(destination);\r\n    return isSlide ? clamp(closest, 0, endIndex) : closest;\r\n  }\r\n\r\n  /**\r\n   * Sets a new index and retains old one.\r\n   *\r\n   * @param index - A new index to set.\r\n   */\r\n  function setIndex(index: number): void {\r\n    if (index !== currIndex) {\r\n      prevIndex = currIndex;\r\n      currIndex = index;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the current/previous index.\r\n   *\r\n   * @param prev - Optional. Whether to return previous index or not.\r\n   */\r\n  function getIndex(prev?: boolean): number {\r\n    return prev ? prevIndex : currIndex;\r\n  }\r\n\r\n  /**\r\n   * Verifies if the focus option is available or not.\r\n   *\r\n   * @return `true` if the slider has the focus option.\r\n   */\r\n  function hasFocus(): boolean {\r\n    return !isUndefined(options.focus) || options.isNavigation;\r\n  }\r\n\r\n  /**\r\n   * Checks if the carousel is moving now or not.\r\n   *\r\n   * @return `true` if the carousel is moving or scrolling, or otherwise `false`.\r\n   */\r\n  function isMoving(): boolean {\r\n    return Splide.state.is([MOVING, SCROLLING]);\r\n  }\r\n\r\n  /**\r\n   * Checks if the slider is moving/scrolling or not.\r\n   *\r\n   * @return `true` if the slider can move, or otherwise `false`.\r\n   */\r\n  function isBusy(): boolean {\r\n    return isMoving() && !!options.waitForTransition;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    go,\r\n    jump,\r\n    scroll,\r\n    getNext,\r\n    getPrev,\r\n    getAdjacent,\r\n    getEnd,\r\n    setIndex,\r\n    getIndex,\r\n    toIndex,\r\n    toPage,\r\n    toDest,\r\n    hasFocus,\r\n    isBusy,\r\n  };\r\n};\r\n","import { ALL_ATTRIBUTES, ARIA_CONTROLS, ARIA_LABEL } from '../../constants/attributes';\r\nimport { CLASS_ARROWS } from '../../constants/classes';\r\nimport {\r\n  EVENT_ARROWS_MOUNTED,\r\n  EVENT_ARROWS_UPDATED,\r\n  EVENT_END_INDEX_CHANGED,\r\n  EVENT_MOUNTED,\r\n  EVENT_MOVED,\r\n  EVENT_REFRESH,\r\n  EVENT_SCROLLED,\r\n  EVENT_UPDATED,\r\n} from '../../constants/events';\r\nimport { BaseComponent, ComponentConstructor } from '../../types';\r\nimport {\r\n  addClass,\r\n  append,\r\n  apply,\r\n  assign,\r\n  before,\r\n  create,\r\n  display,\r\n  parseHtml,\r\n  removeAttribute,\r\n  removeClass,\r\n  removeNode,\r\n  setAttribute,\r\n} from '@splidejs/utils';\r\nimport { PATH, SIZE, XML_NAME_SPACE } from './path';\r\n\r\n\r\n/**\r\n * The interface for the Arrows component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ArrowsComponent extends BaseComponent {\r\n  readonly arrows: { readonly prev?: HTMLButtonElement, readonly next?: HTMLButtonElement };\r\n\r\n  /** @internal */\r\n  update(): void;\r\n}\r\n\r\n/**\r\n * The component for handling previous and next arrows.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return An Arrows component object.\r\n */\r\nexport const Arrows: ComponentConstructor<ArrowsComponent> = (Splide, Components, options, event) => {\r\n  const { on, bind, emit } = event;\r\n  const { classes, i18n } = options;\r\n  const { Elements, Controller } = Components;\r\n  const { arrows: placeholder, track } = Elements;\r\n\r\n  /**\r\n   * The wrapper element.\r\n   */\r\n  let wrapper = placeholder;\r\n\r\n  /**\r\n   * The previous arrow element.\r\n   */\r\n  let prev = Elements.prev;\r\n\r\n  /**\r\n   * The next arrow element.\r\n   */\r\n  let next = Elements.next;\r\n\r\n  /**\r\n   * Indicates whether the component creates arrows or retrieved from the DOM.\r\n   */\r\n  let created: boolean;\r\n\r\n  /**\r\n   * Holds modifier classes.\r\n   */\r\n  let wrapperClasses: string;\r\n\r\n  /**\r\n   * An object with previous and next arrows.\r\n   */\r\n  const arrows: ArrowsComponent[ 'arrows' ] = {};\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on(EVENT_UPDATED, remount);\r\n  }\r\n\r\n  /**\r\n   * Remounts the component.\r\n   */\r\n  function remount(): void {\r\n    destroy();\r\n    mount();\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   */\r\n  function init(): void {\r\n    const { arrows: enabled = true } = options;\r\n\r\n    if (enabled && !(prev && next)) {\r\n      createArrows();\r\n    }\r\n\r\n    if (prev && next) {\r\n      assign(arrows, { prev, next });\r\n      display(wrapper, enabled ? '' : 'none');\r\n      addClass(wrapper, (wrapperClasses = `${ CLASS_ARROWS }--${ options.direction }`));\r\n\r\n      if (enabled) {\r\n        listen();\r\n        update();\r\n        setAttribute([prev, next], ARIA_CONTROLS, track.id);\r\n        emit(EVENT_ARROWS_MOUNTED, prev, next);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    event.destroy();\r\n    removeClass(wrapper, wrapperClasses);\r\n\r\n    if (created) {\r\n      removeNode(placeholder ? [prev, next] : wrapper);\r\n      prev = next = null;\r\n    } else {\r\n      removeAttribute([prev, next], ALL_ATTRIBUTES);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Listens to some events.\r\n   */\r\n  function listen(): void {\r\n    on([EVENT_MOUNTED, EVENT_MOVED, EVENT_REFRESH, EVENT_SCROLLED, EVENT_END_INDEX_CHANGED], update);\r\n    bind(next, 'click', apply(go, '>'));\r\n    bind(prev, 'click', apply(go, '<'));\r\n  }\r\n\r\n  /**\r\n   * The wrapper function of Controller#go().\r\n   *\r\n   * @param control - The control pattern.\r\n   */\r\n  function go(control: string): void {\r\n    Controller.go(control);\r\n  }\r\n\r\n  /**\r\n   * Create arrows and append them to the slider.\r\n   */\r\n  function createArrows(): void {\r\n    wrapper = placeholder || create('div', classes.arrows);\r\n    prev = createArrow(true);\r\n    next = createArrow(false);\r\n    created = true;\r\n\r\n    append(wrapper, prev, next);\r\n    !placeholder && before(track, wrapper);\r\n  }\r\n\r\n  /**\r\n   * Creates an arrow button.\r\n   * In IE, A SVG element is focusable.\r\n   *\r\n   * @param prev - Determines whether to create a previous or next arrow.\r\n   *\r\n   * @return A created button element.\r\n   */\r\n  function createArrow(prev: boolean): HTMLButtonElement {\r\n    const arrow = `<button class=\"${ classes.arrow } ${ prev ? classes.prev : classes.next }\" type=\"button\">`\r\n      + `<svg xmlns=\"${ XML_NAME_SPACE }\" viewBox=\"0 0 ${ SIZE } ${ SIZE }\" width=\"${ SIZE }\" height=\"${ SIZE }\">`\r\n      + `<path d=\"${ options.arrowPath || PATH }\" />`;\r\n\r\n    return parseHtml<HTMLButtonElement>(arrow);\r\n  }\r\n\r\n  /**\r\n   * Updates status of arrows, such as `disabled` and `aria-label`.\r\n   */\r\n  function update(): void {\r\n    if (prev && next) {\r\n      const index = Splide.index;\r\n      const prevIndex = Controller.getPrev();\r\n      const nextIndex = Controller.getNext();\r\n      const prevLabel = prevIndex > -1 && index < prevIndex ? i18n.last : i18n.prev;\r\n      const nextLabel = nextIndex > -1 && index > nextIndex ? i18n.first : i18n.next;\r\n\r\n      prev.disabled = prevIndex < 0;\r\n      next.disabled = nextIndex < 0;\r\n\r\n      setAttribute(prev, ARIA_LABEL, prevLabel);\r\n      setAttribute(next, ARIA_LABEL, nextLabel);\r\n\r\n      emit(EVENT_ARROWS_UPDATED, prev, next, prevIndex, nextIndex);\r\n    }\r\n  }\r\n\r\n  return {\r\n    arrows,\r\n    mount,\r\n    destroy,\r\n    update,\r\n  };\r\n};\r\n","/**\r\n * The namespace for SVG elements.\r\n */\r\nexport const XML_NAME_SPACE = 'http://www.w3.org/2000/svg';\r\n\r\n/**\r\n * The arrow path.\r\n */\r\nexport const PATH = 'm15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z';\r\n\r\n/**\r\n * SVG width and height.\r\n */\r\nexport const SIZE = 40;\r\n","import { ARIA_CONTROLS, ARIA_LABEL } from '../../constants/attributes';\r\nimport { CLASS_ACTIVE } from '../../constants/classes';\r\nimport {\r\n  EVENT_AUTOPLAY_PAUSE,\r\n  EVENT_AUTOPLAY_PLAY,\r\n  EVENT_AUTOPLAY_PLAYING,\r\n  EVENT_MOVE,\r\n  EVENT_REFRESH,\r\n  EVENT_SCROLL,\r\n} from '../../constants/events';\r\nimport { BaseComponent, ComponentConstructor } from '../../types';\r\nimport { getAttribute, RequestInterval, setAttribute, style, toggleClass } from '@splidejs/utils';\r\nimport { INTERVAL_DATA_ATTRIBUTE } from './constants';\r\n\r\n\r\n/**\r\n * The interface for the Autoplay component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface AutoplayComponent extends BaseComponent {\r\n  play(): void;\r\n  pause(): void;\r\n  isPaused(): boolean;\r\n}\r\n\r\n/**\r\n * The component for autoplay, handling a progress bar and a toggle button.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return An Autoplay component object.\r\n */\r\nexport const Autoplay: ComponentConstructor<AutoplayComponent> = (Splide, Components, options, event) => {\r\n  const { on, bind, emit } = event;\r\n  const { interval: duration, pauseOnHover = true, pauseOnFocus = true, resetProgress = true } = options;\r\n  const interval = RequestInterval(duration, () => Splide.go('>'), onAnimationFrame);\r\n  const { isPaused } = interval;\r\n  const { Elements, Elements: { root, toggle } } = Components;\r\n  const { autoplay } = options;\r\n\r\n  /**\r\n   * Indicates whether the slider is hovered or not.\r\n   */\r\n  let hovered: boolean;\r\n\r\n  /**\r\n   * Indicates whether one of slider elements has focus or not.\r\n   */\r\n  let focused: boolean;\r\n\r\n  /**\r\n   * Indicates whether the autoplay is stopped or not.\r\n   * If stopped, autoplay won't start automatically unless `play()` is explicitly called.\r\n   */\r\n  let stopped = autoplay === 'pause';\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    if (autoplay) {\r\n      listen();\r\n      toggle && setAttribute(toggle, ARIA_CONTROLS, Elements.track.id);\r\n      stopped || play();\r\n      update();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Listens to some events.\r\n   */\r\n  function listen(): void {\r\n    if (pauseOnHover) {\r\n      bind(root, 'mouseenter mouseleave', e => {\r\n        hovered = e.type === 'mouseenter';\r\n        autoToggle();\r\n      });\r\n    }\r\n\r\n    if (pauseOnFocus) {\r\n      bind(root, 'focusin focusout', e => {\r\n        focused = e.type === 'focusin';\r\n        autoToggle();\r\n      });\r\n    }\r\n\r\n    if (toggle) {\r\n      bind(toggle, 'click', () => {\r\n        stopped ? play() : pause(true);\r\n      });\r\n    }\r\n\r\n    on([EVENT_MOVE, EVENT_SCROLL, EVENT_REFRESH], interval.rewind);\r\n    on(EVENT_MOVE, onMove);\r\n  }\r\n\r\n  /**\r\n   * Starts autoplay and clears all flags.\r\n   */\r\n  function play(): void {\r\n    if (isPaused() && Components.Slides.isEnough()) {\r\n      interval.start(!resetProgress);\r\n      focused = hovered = stopped = false;\r\n      update();\r\n      emit(EVENT_AUTOPLAY_PLAY);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pauses autoplay.\r\n   *\r\n   * @param stop - If `true`, autoplay keeps paused until `play()` is explicitly called.\r\n   */\r\n  function pause(stop = true): void {\r\n    stopped = !!stop;\r\n    update();\r\n\r\n    if (!isPaused()) {\r\n      interval.pause();\r\n      emit(EVENT_AUTOPLAY_PAUSE);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggles play/pause according to current flags.\r\n   * If autoplay is manually paused, this will do nothing.\r\n   */\r\n  function autoToggle(): void {\r\n    if (!stopped) {\r\n      hovered || focused ? pause(false) : play();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the toggle button status.\r\n   */\r\n  function update(): void {\r\n    if (toggle) {\r\n      toggleClass(toggle, CLASS_ACTIVE, !stopped);\r\n      setAttribute(toggle, ARIA_LABEL, options.i18n[stopped ? 'play' : 'pause']);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called on every animation frame while autoplay is active.\r\n   *\r\n   * @param rate - The progress rate between 0 and 1.\r\n   */\r\n  function onAnimationFrame(rate: number): void {\r\n    const { bar } = Elements;\r\n    bar && style(bar, 'width', `${ rate * 100 }%`);\r\n    emit(EVENT_AUTOPLAY_PLAYING, rate);\r\n  }\r\n\r\n  /**\r\n   * Updates or restores the interval duration.\r\n   *\r\n   * @param index - An index to move to.\r\n   */\r\n  function onMove(index: number): void {\r\n    const Slide = Components.Slides.getAt(index);\r\n    interval.set(Slide && +getAttribute(Slide.slide, INTERVAL_DATA_ATTRIBUTE) || options.interval);\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy: interval.cancel,\r\n    play,\r\n    pause,\r\n    isPaused,\r\n  };\r\n};\r\n","import { CLASS_ARROW, CLASS_PAGINATION_PAGE } from '../../constants/classes';\r\nimport { EVENT_DRAG, EVENT_DRAGGED, EVENT_DRAGGING, EVENT_MOUNTED, EVENT_UPDATED } from '../../constants/events';\r\nimport { SCROLL_LISTENER_OPTIONS } from '../../constants/listener-options';\r\nimport { DRAGGING, IDLE, MOVING, SCROLLING } from '../../constants/states';\r\nimport { FADE, LOOP, SLIDE } from '../../constants/types';\r\nimport { BaseComponent, ComponentConstructor } from '../../types';\r\nimport { abs, isObject, matches, min, noop, prevent, sign, timeOf } from '@splidejs/utils';\r\nimport { FRICTION, LOG_INTERVAL, POINTER_DOWN_EVENTS, POINTER_MOVE_EVENTS, POINTER_UP_EVENTS } from './constants';\r\n\r\n\r\n/**\r\n * The interface for the Drag component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface DragComponent extends BaseComponent {\r\n  disable(disabled: boolean): void;\r\n  isDragging(): boolean;\r\n}\r\n\r\n/**\r\n * The component for dragging the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Drag component object.\r\n */\r\nexport const Drag: ComponentConstructor<DragComponent> = (Splide, Components, options, event) => {\r\n  const { on, emit, bind } = event;\r\n  const binder = event.lock();\r\n  const { state } = Splide;\r\n  const { Move, Scroll, Controller, Elements: { track }, Breakpoints: { reduce } } = Components;\r\n  const { resolve, orient } = Components.Direction;\r\n  const { getPosition, exceededLimit } = Move;\r\n\r\n  /**\r\n   * The position where the pointer gets active.\r\n   */\r\n  let startCoord: number;\r\n\r\n  /**\r\n   * The base slider position to calculate the delta of coords.\r\n   */\r\n  let basePosition: number;\r\n\r\n  /**\r\n   * The base event object saved per specific sampling interval.\r\n   */\r\n  let baseEvent: TouchEvent | MouseEvent;\r\n\r\n  /**\r\n   * Holds the previous base event object.\r\n   */\r\n  let prevBaseEvent: TouchEvent | MouseEvent;\r\n\r\n  /**\r\n   * Indicates whether the drag mode is `free` or not.\r\n   */\r\n  let isFree: boolean;\r\n\r\n  /**\r\n   * Indicates whether the user is dragging the slider or not.\r\n   */\r\n  let dragging: boolean;\r\n\r\n  /**\r\n   * Indicates whether the slider exceeds limits or not.\r\n   * This must not be `undefined` for strict comparison.\r\n   */\r\n  let exceeded = false;\r\n\r\n  /**\r\n   * Turns into `true` when the user starts dragging the slider.\r\n   */\r\n  let clickPrevented: boolean;\r\n\r\n  /**\r\n   * Indicates whether the drag component is now disabled or not.\r\n   */\r\n  let disabled: boolean;\r\n\r\n  /**\r\n   * The target element to attach listeners.\r\n   */\r\n  let target: Window | HTMLElement;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    bind(track, POINTER_MOVE_EVENTS, noop, SCROLL_LISTENER_OPTIONS);\r\n    bind(track, POINTER_UP_EVENTS, noop, SCROLL_LISTENER_OPTIONS);\r\n    bind(track, POINTER_DOWN_EVENTS, onPointerDown, SCROLL_LISTENER_OPTIONS);\r\n    bind(track, 'click', onClick, { capture: true });\r\n    bind(track, 'dragstart', prevent);\r\n    on([EVENT_MOUNTED, EVENT_UPDATED], init);\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   */\r\n  function init(): void {\r\n    const { drag } = options;\r\n    disable(!drag);\r\n    isFree = drag === 'free';\r\n  }\r\n\r\n  /**\r\n   * Called when the user clicks or touches the slider.\r\n   * - Needs to prevent the default behaviour when the slider is busy to deny any action, such as dragging images\r\n   * - IE does not support MouseEvent and TouchEvent constructors\r\n   * - The `dragging` state always becomes `true` when the user starts dragging while the slider is moving\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\r\n  function onPointerDown(e: TouchEvent | MouseEvent): void {\r\n    clickPrevented = false;\r\n\r\n    if (!disabled) {\r\n      const isTouch = isTouchEvent(e);\r\n\r\n      if (isDraggable(e.target) && (isTouch || !e.button)) {\r\n        if (!Controller.isBusy()) {\r\n          target = isTouch ? track : window;\r\n          dragging = state.is([MOVING, SCROLLING]);\r\n          prevBaseEvent = null;\r\n          startCoord = coordOf(e);\r\n\r\n          binder.bind(target, POINTER_MOVE_EVENTS, onPointerMove, SCROLL_LISTENER_OPTIONS);\r\n          binder.bind(target, POINTER_UP_EVENTS, onPointerUp, SCROLL_LISTENER_OPTIONS);\r\n          Move.cancel();\r\n          Scroll.cancel();\r\n          save(e);\r\n        } else {\r\n          prevent(e, true);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called while the user moves the pointer on the slider.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\r\n  function onPointerMove(e: TouchEvent | MouseEvent): void {\r\n    if (!state.is(DRAGGING)) {\r\n      state.set(DRAGGING);\r\n      emit(EVENT_DRAG);\r\n    }\r\n\r\n    if (shouldRelease(e)) {\r\n      return onPointerUp(e);\r\n    }\r\n\r\n    if (e.cancelable) {\r\n      if (dragging) {\r\n        Move.translate(basePosition + constrain(diffCoord(e)));\r\n\r\n        const expired = diffTime(e) > LOG_INTERVAL;\r\n        const hasExceeded = exceeded !== (exceeded = exceededLimit());\r\n\r\n        if (expired || hasExceeded) {\r\n          save(e);\r\n        }\r\n\r\n        clickPrevented = true;\r\n        emit(EVENT_DRAGGING);\r\n        prevent(e);\r\n      } else if (isSliderDirection(e)) {\r\n        dragging = shouldStart(e);\r\n        prevent(e);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the user releases pointing devices.\r\n   * Needs to move the slider when:\r\n   * - The user drags the slider and the distance exceeds the threshold\r\n   * - The user aborted the slider moving by pointerdown and just released it without dragging the slider\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\r\n  function onPointerUp(e: TouchEvent | MouseEvent): void {\r\n    if (state.is(DRAGGING)) {\r\n      state.set(IDLE);\r\n      emit(EVENT_DRAGGED);\r\n    }\r\n\r\n    if (dragging) {\r\n      move(e);\r\n      prevent(e);\r\n    }\r\n\r\n    binder.destroy();\r\n    dragging = false;\r\n    exceeded = false;\r\n  }\r\n\r\n  /**\r\n   * Called when the track element is clicked.\r\n   * Disables click any elements inside it while dragging.\r\n   *\r\n   * @param e - A MouseEvent object.\r\n   */\r\n  function onClick(e: MouseEvent): void {\r\n    if (!disabled && clickPrevented) {\r\n      prevent(e, true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Saves data at the specific moment.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   */\r\n  function save(e: TouchEvent | MouseEvent): void {\r\n    prevBaseEvent = baseEvent;\r\n    baseEvent = e;\r\n    basePosition = getPosition();\r\n  }\r\n\r\n  /**\r\n   * Calculates the destination by the drag velocity and moves the carousel.\r\n   * If motion is reduced, restores transition speed to the initial value\r\n   * because it's \"essential\" motion for the user to recognize what happens on the carousel.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   */\r\n  function move(e: TouchEvent | MouseEvent): void {\r\n    const { go } = Controller;\r\n    const { updateOnDragged = true } = options;\r\n    const velocity = computeVelocity(e);\r\n    const destination = computeDestination(velocity);\r\n    const forwards = orient(coordOf(e) - startCoord) > 0;\r\n    const rewind = options.rewind && options.rewindByDrag;\r\n    const scroll = updateOnDragged ? Controller.scroll : Scroll.scroll;\r\n\r\n    reduce(false);\r\n\r\n    if (isFree) {\r\n      scroll(destination, undefined, options.snap);\r\n    } else if (Splide.is(FADE)) {\r\n      go(forwards ? (rewind ? '>' : '+') : (rewind ? '<' : '-'));\r\n    } else if (Splide.is(SLIDE) && exceeded && rewind) {\r\n      go(exceededLimit(true) ? '>' : '<'); // todo\r\n    } else {\r\n      go(`${ forwards ? '>>' : '<<' }${ Controller.toDest(destination) }`);\r\n    }\r\n\r\n    reduce(true);\r\n  }\r\n\r\n  /**\r\n   * Checks if the provided touch event should be released or not.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   */\r\n  function shouldRelease(e: TouchEvent | MouseEvent): boolean {\r\n    if (options.releaseTouch && Splide.is(SLIDE) && isTouchEvent(e)) {\r\n      const { index } = Splide;\r\n      const diff = diffCoord(e);\r\n\r\n      if (exceededLimit() || index === 0 && diff > 0 || index === Splide.length - 1 && diff < 0) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Checks if the drag distance exceeds the defined threshold.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   *\r\n   * @return `true` if the distance exceeds the threshold, or `false` if not.\r\n   */\r\n  function shouldStart(e: TouchEvent | MouseEvent): boolean {\r\n    const { dragMinThreshold: thresholds } = options;\r\n    const isObj = isObject(thresholds);\r\n    const mouse = isObj && thresholds.mouse || 0;\r\n    const touch = (isObj ? thresholds.touch : +thresholds) || 10;\r\n    return abs(diffCoord(e)) > (isTouchEvent(e) ? touch : mouse);\r\n  }\r\n\r\n  /**\r\n   * Checks whether dragging towards the slider or the scroll direction.\r\n   *\r\n   * @return `true` if dragging towards the slider direction, or otherwise `false`.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\r\n  function isSliderDirection(e: TouchEvent | MouseEvent): boolean {\r\n    return abs(diffCoord(e)) > abs(diffCoord(e, true));\r\n  }\r\n\r\n  /**\r\n   * Computes the drag velocity.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   *\r\n   * @return The drag velocity.\r\n   */\r\n  function computeVelocity(e: TouchEvent | MouseEvent): number {\r\n    if (Splide.is(LOOP) || !exceeded) {\r\n      const time = diffTime(e);\r\n\r\n      if (time && time < LOG_INTERVAL) {\r\n        return diffCoord(e) / time;\r\n      }\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Computes the destination by the velocity and the `flickPower` option.\r\n   *\r\n   * @param velocity - The drag velocity.\r\n   *\r\n   * @return The destination.\r\n   */\r\n  function computeDestination(velocity: number): number {\r\n    return getPosition() + sign(velocity) * min(\r\n      abs(velocity) * (options.flickPower || 600),\r\n      isFree ? Infinity : Components.Layout.listSize() * (options.flickMaxPages || 1),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the coord difference between the provided and base events.\r\n   *\r\n   * @param e          - A TouchEvent or MouseEvent object.\r\n   * @param orthogonal - Optional. If `true`, returns the coord of the orthogonal axis against the drag one.\r\n   *\r\n   * @return The difference of the coord.\r\n   */\r\n  function diffCoord(e: TouchEvent | MouseEvent, orthogonal?: boolean): number {\r\n    return coordOf(e, orthogonal) - coordOf(getBaseEvent(e), orthogonal);\r\n  }\r\n\r\n  /**\r\n   * Returns the elapsed time from the base event to `e`.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   *\r\n   * @return The elapsed time in milliseconds.\r\n   */\r\n  function diffTime(e: TouchEvent | MouseEvent): number {\r\n    return timeOf(e) - timeOf(getBaseEvent(e));\r\n  }\r\n\r\n  /**\r\n   * Returns the base event.\r\n   * If the base event is same with `e`, returns previous one.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   *\r\n   * @return A base event.\r\n   */\r\n  function getBaseEvent(e: TouchEvent | MouseEvent): TouchEvent | MouseEvent {\r\n    return baseEvent === e && prevBaseEvent || baseEvent;\r\n  }\r\n\r\n  /**\r\n   * Returns the `pageX` and `pageY` coordinates provided by the event.\r\n   * Be aware that IE does not support both TouchEvent and MouseEvent constructors.\r\n   *\r\n   * @param e          - A TouchEvent or MouseEvent object.\r\n   * @param orthogonal - Optional. If `true`, returns the coord of the orthogonal axis against the drag one.\r\n   *\r\n   * @return A pageX or pageY coordinate.\r\n   */\r\n  function coordOf(e: TouchEvent | MouseEvent, orthogonal?: boolean): number {\r\n    return (isTouchEvent(e) ? e.changedTouches[0] : e)[`page${ resolve(orthogonal ? 'Y' : 'X') }`];\r\n  }\r\n\r\n  /**\r\n   * Reduces the distance to move by the predefined friction.\r\n   * This does nothing when the slider type is not `slide`, or the position is inside borders.\r\n   *\r\n   * @param diff - Diff to constrain.\r\n   *\r\n   * @return The constrained diff.\r\n   */\r\n  function constrain(diff: number): number {\r\n    return diff / (exceeded && Splide.is(SLIDE) ? FRICTION : 1);\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the user can drag the target.\r\n   *\r\n   * @param target - An event target.\r\n   *\r\n   * @return `true` if the target is draggable.\r\n   */\r\n  function isDraggable(target: EventTarget): boolean {\r\n    const { noDrag } = options;\r\n\r\n    return !matches(target, `.${ CLASS_PAGINATION_PAGE }, .${ CLASS_ARROW }`)\r\n      && (!noDrag || !matches(target, noDrag));\r\n  }\r\n\r\n  /**\r\n   * Checks if the provided event is TouchEvent or MouseEvent.\r\n   *\r\n   * @param e - An event to check.\r\n   *\r\n   * @return `true` if the `e` is TouchEvent.\r\n   */\r\n  function isTouchEvent(e: TouchEvent | MouseEvent): e is TouchEvent {\r\n    return typeof TouchEvent !== 'undefined' && e instanceof TouchEvent;\r\n  }\r\n\r\n  /**\r\n   * Checks if now the user is dragging the slider or not.\r\n   *\r\n   * @return `true` if the user is dragging the slider or otherwise `false`.\r\n   */\r\n  function isDragging(): boolean {\r\n    return dragging;\r\n  }\r\n\r\n  /**\r\n   * Disables the component.\r\n   *\r\n   * @param value - Set `true` to disable the component.\r\n   */\r\n  function disable(value: boolean): void {\r\n    disabled = value;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    disable,\r\n    isDragging,\r\n  };\r\n};\r\n","import { ARROW_LEFT, ARROW_RIGHT } from '../../constants/arrows';\r\nimport { EVENT_UPDATED } from '../../constants/events';\r\nimport { BaseComponent, ComponentConstructor } from '../../types';\r\nimport { prevent } from '../../../../../utils';\r\n\r\n\r\n/**\r\n * The interface for the Keyboard component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface KeyboardComponent extends BaseComponent {\r\n  disable(disabled: boolean): void;\r\n}\r\n\r\n/**\r\n * The keyboard event name.\r\n *\r\n * @since 3.6.0\r\n */\r\nconst KEYBOARD_EVENT = 'keydown';\r\n\r\n/**\r\n * The component for controlling the slider by keyboards.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Keyboard component object.\r\n */\r\nexport const Keyboard: ComponentConstructor<KeyboardComponent> = (Splide, Components, options, event) => {\r\n  const { destroy } = event;\r\n  const { resolve } = Components.Direction;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    const { keyboard } = options;\r\n\r\n    destroy();\r\n    keyboard && event.bind(keyboard === 'global' ? window : Splide.root, KEYBOARD_EVENT, onKeydown);\r\n    event.on(EVENT_UPDATED, mount);\r\n  }\r\n\r\n  /**\r\n   * Disables the keyboard input.\r\n   *\r\n   * @param value - Toggles disabling/enabling the keyboard input.\r\n   */\r\n  function disable(value: boolean): void {\r\n    value ? destroy() : mount();\r\n  }\r\n\r\n  /**\r\n   * Called when any key is pressed on the target.\r\n   *\r\n   * @param e - A KeyboardEvent object.\r\n   */\r\n  function onKeydown(e: KeyboardEvent): void {\r\n    if (e.key === resolve(ARROW_LEFT)) {\r\n      Splide.go('<');\r\n      prevent(e, true);\r\n    } else if (e.key === resolve(ARROW_RIGHT)) {\r\n      Splide.go('>');\r\n      prevent(e, true);\r\n    }\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy,\r\n    disable,\r\n  };\r\n};\r\n","import { CLASS_LOADING, CLASS_SPINNER } from '../../constants/classes';\r\nimport {\r\n  EVENT_LAZYLOAD_ERROR,\r\n  EVENT_LAZYLOAD_LOADED,\r\n  EVENT_MOVED,\r\n  EVENT_REFRESH,\r\n  EVENT_RESIZE,\r\n  EVENT_SCROLLED,\r\n} from '../../constants/events';\r\nimport { BaseComponent, ComponentConstructor } from '../../types';\r\nimport {\r\n  addClass,\r\n  apply,\r\n  child,\r\n  create,\r\n  display,\r\n  empty,\r\n  getAttribute,\r\n  queryAll,\r\n  removeAttribute,\r\n  removeClass,\r\n  removeNode,\r\n  setAttribute,\r\n} from '@splidejs/utils';\r\nimport { SlideComponent } from '../Slides/Slide';\r\nimport { IMAGE_SELECTOR, SRC_DATA_ATTRIBUTE, SRCSET_DATA_ATTRIBUTE } from './constants';\r\n\r\n\r\n/**\r\n * The interface for the LazyLoad component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface LazyLoadComponent extends BaseComponent {\r\n  /** @internal */\r\n  check(): void;\r\n}\r\n\r\n/**\r\n * The type for each entry.\r\n * Use a tuple for better compression.\r\n *\r\n * @since 4.0.0\r\n */\r\ntype LazyLoadEntry = [HTMLImageElement, SlideComponent, HTMLSpanElement];\r\n\r\n/**\r\n * The component for lazily loading images.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return An LazyLoad component object.\r\n */\r\nexport const LazyLoad: ComponentConstructor<LazyLoadComponent> = (Splide, Components, options, event) => {\r\n  const { on, off, bind, emit } = event;\r\n  const isSequential = options.lazyLoad === 'sequential';\r\n  const events = [EVENT_MOVED, EVENT_SCROLLED];\r\n\r\n  /**\r\n   * Stores data of images.\r\n   */\r\n  let entries: LazyLoadEntry[] = [];\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    if (options.lazyLoad) {\r\n      init();\r\n      on(EVENT_REFRESH, init);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes the component and start loading images.\r\n   * Be aware that `refresh` also calls this method.\r\n   */\r\n  function init() {\r\n    empty(entries);\r\n    register();\r\n\r\n    if (isSequential) {\r\n      loadNext();\r\n    } else {\r\n      off(events);\r\n      on(events, check);\r\n      check();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds images and register them as entries with creating spinner elements.\r\n   * Note that spinner can be already available because of `refresh()`.\r\n   */\r\n  function register(): void {\r\n    Components.Slides.forEach(Slide => {\r\n      queryAll<HTMLImageElement>(Slide.slide, IMAGE_SELECTOR).forEach(img => {\r\n        const src = getAttribute(img, SRC_DATA_ATTRIBUTE);\r\n        const srcset = getAttribute(img, SRCSET_DATA_ATTRIBUTE);\r\n\r\n        if (src !== img.src || srcset !== img.srcset) {\r\n          const parent = img.parentElement;\r\n          const spinner = child(parent, `.${ CLASS_SPINNER }`) || create('span', options.classes.spinner, parent);\r\n\r\n          entries.push([img, Slide, spinner]);\r\n          img.src || display(img, 'none');\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Checks how close each image is from the active slide, and determines whether to start loading or not.\r\n   * The last `+1` is for the current page.\r\n   */\r\n  function check(): void {\r\n    entries = entries.filter(data => {\r\n      const distance = options.perPage * ((options.preloadPages || 1) + 1) - 1;\r\n      return data[1].isWithin(Splide.index, distance) ? load(data) : true;\r\n    });\r\n\r\n    entries.length || off(events);\r\n  }\r\n\r\n  /**\r\n   * Starts loading the image in the provided data.\r\n   *\r\n   * @param data - A LazyLoadEntry object.\r\n   */\r\n  function load(data: LazyLoadEntry): void {\r\n    const [img] = data;\r\n\r\n    addClass(data[1].slide, CLASS_LOADING);\r\n    bind(img, 'load error', apply(onLoad, data));\r\n\r\n    setAttribute(img, 'src', getAttribute(img, SRC_DATA_ATTRIBUTE));\r\n    setAttribute(img, 'srcset', getAttribute(img, SRCSET_DATA_ATTRIBUTE));\r\n\r\n    removeAttribute(img, [SRC_DATA_ATTRIBUTE, SRCSET_DATA_ATTRIBUTE]);\r\n  }\r\n\r\n  /**\r\n   * Called when the image is loaded or any error occurs.\r\n   *\r\n   * @param data - A LazyLoadEntry object.\r\n   * @param e    - An Event object.\r\n   */\r\n  function onLoad(data: LazyLoadEntry, e: Event): void {\r\n    const [img, Slide] = data;\r\n\r\n    removeClass(Slide.slide, CLASS_LOADING);\r\n\r\n    if (e.type !== 'error') {\r\n      removeNode(data[2]);\r\n      display(img, '');\r\n      emit(EVENT_LAZYLOAD_LOADED, img, Slide);\r\n      emit(EVENT_RESIZE);\r\n    } else {\r\n      emit(EVENT_LAZYLOAD_ERROR, img, Slide);\r\n    }\r\n\r\n    isSequential && loadNext();\r\n  }\r\n\r\n  /**\r\n   * Starts loading a next image.\r\n   */\r\n  function loadNext(): void {\r\n    entries.length && load(entries.shift());\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy: apply(empty, entries),\r\n    check,\r\n  };\r\n};\r\n","import { ARROW_LEFT, ARROW_RIGHT } from '../../constants/arrows';\r\nimport {\r\n  ARIA_CONTROLS,\r\n  ARIA_LABEL,\r\n  ARIA_ORIENTATION,\r\n  ARIA_SELECTED,\r\n  ROLE,\r\n  TAB_INDEX,\r\n} from '../../constants/attributes';\r\nimport { CLASS_ACTIVE, CLASS_PAGINATION } from '../../constants/classes';\r\nimport { TTB } from '../../constants/directions';\r\nimport {\r\n  EVENT_END_INDEX_CHANGED,\r\n  EVENT_MOVE,\r\n  EVENT_PAGINATION_MOUNTED,\r\n  EVENT_PAGINATION_UPDATED,\r\n  EVENT_REFRESH,\r\n  EVENT_SCROLL,\r\n  EVENT_SCROLLED,\r\n  EVENT_UPDATED,\r\n} from '../../constants/events';\r\nimport { BaseComponent, ComponentConstructor, Options } from '../../types';\r\nimport {\r\n  addClass,\r\n  apply,\r\n  ceil,\r\n  create,\r\n  display,\r\n  empty,\r\n  focus,\r\n  format,\r\n  prevent,\r\n  removeAttribute,\r\n  removeClass,\r\n  removeNode,\r\n  setAttribute,\r\n  slice,\r\n} from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The interface for the Pagination component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface PaginationComponent extends BaseComponent {\r\n  readonly items: PaginationItem[];\r\n  getAt(index: number): PaginationItem;\r\n  update(): void;\r\n}\r\n\r\n/**\r\n * The interface for data of the pagination.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface PaginationData {\r\n  readonly list: HTMLUListElement;\r\n  readonly items: PaginationItem[];\r\n}\r\n\r\n/**\r\n * The interface for each pagination item.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface PaginationItem {\r\n  readonly li: HTMLLIElement;\r\n  readonly button: HTMLButtonElement;\r\n  readonly page: number;\r\n}\r\n\r\n/**\r\n * The component for the pagination UI (a slide picker).\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Pagination component object.\r\n */\r\nexport const Pagination: ComponentConstructor<PaginationComponent> = (Splide, Components, options, event) => {\r\n  const { on, emit, bind } = event;\r\n  const { Slides, Elements, Controller } = Components;\r\n  const { hasFocus, getIndex, go } = Controller;\r\n  const { resolve } = Components.Direction;\r\n  const { pagination: placeholder } = Elements;\r\n\r\n  /**\r\n   * Stores all pagination items.\r\n   */\r\n  const items: PaginationItem[] = [];\r\n\r\n  /**\r\n   * The pagination element.\r\n   */\r\n  let list: HTMLUListElement | null;\r\n\r\n  /**\r\n   * Holds modifier classes.\r\n   */\r\n  let paginationClasses: string;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    destroy();\r\n    on([EVENT_UPDATED, EVENT_REFRESH, EVENT_END_INDEX_CHANGED], mount);\r\n\r\n    const { pagination: enabled = true } = options;\r\n    placeholder && display(placeholder, enabled ? '' : 'none');\r\n\r\n    if (enabled) {\r\n      on([EVENT_MOVE, EVENT_SCROLL, EVENT_SCROLLED], update);\r\n      createPagination();\r\n      update();\r\n      emit(EVENT_PAGINATION_MOUNTED, { list, items }, getAt(Splide.index));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    if (list) {\r\n      removeNode(placeholder ? slice(list.children) : list);\r\n      removeClass(list, paginationClasses);\r\n      empty(items);\r\n      list = null;\r\n    }\r\n\r\n    event.destroy();\r\n  }\r\n\r\n  /**\r\n   * Creates the pagination element and appends it to the slider.\r\n   */\r\n  function createPagination(): void {\r\n    const { length } = Splide;\r\n    const { classes, i18n, perPage, paginationKeyboard = true } = options;\r\n    const max = hasFocus() ? Controller.getEnd() + 1 : ceil(length / perPage);\r\n    const dir = getDirection();\r\n\r\n    list = placeholder || create('ul', classes.pagination, Elements.track.parentElement);\r\n\r\n    addClass(list, (paginationClasses = `${ CLASS_PAGINATION }--${ dir }`));\r\n    setAttribute(list, ROLE, 'tablist');\r\n    setAttribute(list, ARIA_LABEL, i18n.select);\r\n    setAttribute(list, ARIA_ORIENTATION, dir === TTB ? 'vertical' : '');\r\n\r\n    for (let i = 0; i < max; i++) {\r\n      const li = create('li', null, list);\r\n      const button = create('button', { class: classes.page, type: 'button' }, li);\r\n      const controls = Slides.getIn(i).map(Slide => Slide.slide.id);\r\n      const text = !hasFocus() && perPage > 1 ? i18n.pageX : i18n.slideX;\r\n\r\n      bind(button, 'click', () => go(`>${ i }`));\r\n      paginationKeyboard && bind(button, 'keydown', apply(onKeydown, i));\r\n\r\n      setAttribute(li, ROLE, 'presentation');\r\n      setAttribute(button, ROLE, 'tab');\r\n      setAttribute(button, ARIA_CONTROLS, controls.join(' '));\r\n      setAttribute(button, ARIA_LABEL, format(text, i + 1));\r\n      setAttribute(button, TAB_INDEX, -1);\r\n\r\n      items.push({ li, button, page: i });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when any key is pressed on the pagination.\r\n   *\r\n   * @link https://www.w3.org/WAI/ARIA/apg/patterns/tabpanel/#keyboard-interaction-21\r\n   *\r\n   * @param page - A page index.\r\n   * @param e    - A KeyboardEvent object.\r\n   */\r\n  function onKeydown(page: number, e: KeyboardEvent): void {\r\n    const { length } = items;\r\n    const { key } = e;\r\n    const dir = getDirection();\r\n\r\n    let nextPage = -1;\r\n\r\n    if (key === resolve(ARROW_RIGHT, false, dir)) {\r\n      nextPage = ++page % length;\r\n    } else if (key === resolve(ARROW_LEFT, false, dir)) {\r\n      nextPage = (--page + length) % length;\r\n    } else if (key === 'Home') {\r\n      nextPage = 0;\r\n    } else if (key === 'End') {\r\n      nextPage = length - 1;\r\n    }\r\n\r\n    const item = items[nextPage];\r\n\r\n    if (item) {\r\n      focus(item.button);\r\n      go(`>${ nextPage }`);\r\n      prevent(e, true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the latest direction for pagination.\r\n   *\r\n   * @return The direction for pagination.\r\n   */\r\n  function getDirection(): Options[ 'direction' ] {\r\n    return options.paginationDirection || options.direction;\r\n  }\r\n\r\n  /**\r\n   * Returns the pagination item at the specified index.\r\n   *\r\n   * @param index - An index.\r\n   *\r\n   * @return A pagination item object if available, or otherwise `undefined`.\r\n   */\r\n  function getAt(index: number): PaginationItem | undefined {\r\n    return items[Controller.toPage(index)];\r\n  }\r\n\r\n  /**\r\n   * Updates the pagination status.\r\n   */\r\n  function update(): void {\r\n    const prev = getAt(getIndex(true));\r\n    const curr = getAt(getIndex());\r\n\r\n    if (prev) {\r\n      const { button } = prev;\r\n      removeClass(button, CLASS_ACTIVE);\r\n      removeAttribute(button, ARIA_SELECTED);\r\n      setAttribute(button, TAB_INDEX, -1);\r\n    }\r\n\r\n    if (curr) {\r\n      const { button } = curr;\r\n      addClass(button, CLASS_ACTIVE);\r\n      setAttribute(button, ARIA_SELECTED, true);\r\n      setAttribute(button, TAB_INDEX, '');\r\n    }\r\n\r\n    emit(EVENT_PAGINATION_UPDATED, { list, items }, prev, curr);\r\n  }\r\n\r\n  return {\r\n    items,\r\n    mount,\r\n    destroy,\r\n    getAt,\r\n    update,\r\n  };\r\n};\r\n","import { SCROLL_LISTENER_OPTIONS } from '../../constants/listener-options';\r\nimport { MOVING } from '../../constants/states';\r\nimport { BaseComponent, ComponentConstructor } from '../../types';\r\nimport { abs, includes, prevent, timeOf } from '@splidejs/utils';\r\nimport { EVENT_UPDATED } from '../../constants/events';\r\n\r\n\r\n/**\r\n * The interface for the Wheel component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface WheelComponent extends BaseComponent {\r\n}\r\n\r\n/**\r\n * The component for observing the mouse wheel and moving the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Wheel component object.\r\n */\r\nexport const Wheel: ComponentConstructor<WheelComponent> = (Splide, Components, options, event) => {\r\n  /**\r\n   * Holds the last time when the wheel moves the slider.\r\n   */\r\n  let lastTime = 0;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    event.destroy();\r\n\r\n    if (options.wheel) {\r\n      event.bind(Components.Elements.track, 'wheel', onWheel, SCROLL_LISTENER_OPTIONS);\r\n    }\r\n\r\n    event.on(EVENT_UPDATED, mount);\r\n  }\r\n\r\n  /**\r\n   * Called when the user rotates the mouse wheel on the slider.\r\n   *\r\n   * @param e - A WheelEvent object.\r\n   */\r\n  function onWheel(e: WheelEvent): void {\r\n    if (e.cancelable) {\r\n      const delta = parse(e);\r\n      const backwards = delta < 0;\r\n      const timeStamp = timeOf(e);\r\n      const min = options.wheelMinThreshold || 0;\r\n      const sleep = options.wheelSleep || 0;\r\n\r\n      if (abs(delta) > min && timeStamp - lastTime > sleep) {\r\n        Splide.go(delta < 0 ? '<' : '>');\r\n        lastTime = timeStamp;\r\n      }\r\n\r\n      shouldPrevent(backwards) && prevent(e);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses the wheel event and returns delta.\r\n   *\r\n   * @param e - A WheelEvent object.\r\n   */\r\n  function parse(e: WheelEvent): number {\r\n    const { wheelAxis = 'y' } = options;\r\n    const { deltaX, deltaY } = e;\r\n    const x = includes(wheelAxis, 'x') ? Components.Direction.orient(-deltaX) : 0;\r\n    const y = includes(wheelAxis, 'y') ? deltaY : 0;\r\n\r\n    return x || y;\r\n  }\r\n\r\n  /**\r\n   * Checks whether the component should prevent the default action of the wheel event or not.\r\n   *\r\n   * @param backwards - Set this to `true` for backwards direction.\r\n   *\r\n   * @return `true` if the action should be prevented.\r\n   */\r\n  function shouldPrevent(backwards: boolean): boolean {\r\n    return !options.releaseWheel\r\n      || Splide.state.is(MOVING)\r\n      || Components.Controller.getAdjacent(backwards) !== -1;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n  };\r\n};\r\n","import { ARIA_ATOMIC, ARIA_BUSY, ARIA_LIVE } from '../../constants/attributes';\r\nimport { CLASS_SR } from '../../constants/classes';\r\nimport { EVENT_AUTOPLAY_PAUSE, EVENT_AUTOPLAY_PLAY, EVENT_MOVED, EVENT_SCROLLED } from '../../constants/events';\r\nimport { BaseComponent, ComponentConstructor } from '../../types';\r\nimport { append, apply, create, removeAttribute, removeNode, RequestInterval, setAttribute } from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The interface for the Live component.\r\n *\r\n * @since 4.0.0\r\n */\r\nexport interface LiveComponent extends BaseComponent {\r\n  disable(disabled: boolean): void;\r\n}\r\n\r\n/**\r\n * Delay in milliseconds before removing the SR field for Windows Narrator.\r\n */\r\nconst SR_REMOVAL_DELAY = 90;\r\n\r\n/**\r\n * The component for implementing Live Region to the slider.\r\n *\r\n * @link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions\r\n *\r\n * @since 4.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Live component object.\r\n */\r\nexport const Live: ComponentConstructor<LiveComponent> = (Splide, Components, options, event) => {\r\n  const { on } = event;\r\n  const { track } = Components.Elements;\r\n  const { live = true } = options;\r\n\r\n  /**\r\n   * Indicates whether the live region is enabled or not.\r\n   */\r\n  const enabled = live && !options.isNavigation;\r\n\r\n  /**\r\n   * The span element for the SR only text.\r\n   */\r\n  const sr = create('span', CLASS_SR);\r\n\r\n  /**\r\n   * Holds the RequestInterval instance.\r\n   */\r\n  const interval = RequestInterval(SR_REMOVAL_DELAY, apply(toggle, false));\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   * - JAWS needs `aria-atomic` to make the `aria-busy` work.\r\n   * - Immediately removing the SR makes Windows Narrator silent, hence requires the delay around 50ms.\r\n   */\r\n  function mount(): void {\r\n    if (enabled) {\r\n      disable(!Components.Autoplay.isPaused());\r\n      setAttribute(track, ARIA_ATOMIC, true);\r\n      sr.textContent = '…';\r\n\r\n      on(EVENT_AUTOPLAY_PLAY, apply(disable, true));\r\n      on(EVENT_AUTOPLAY_PAUSE, apply(disable, false));\r\n      on([EVENT_MOVED, EVENT_SCROLLED], apply(toggle, true));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggles the SR field and `aria-busy`.\r\n   *\r\n   * @param active - Determines whether to activate the field or not.\r\n   */\r\n  function toggle(active: boolean): void {\r\n    setAttribute(track, ARIA_BUSY, active);\r\n\r\n    if (active) {\r\n      append(track, sr);\r\n      interval.start();\r\n    } else {\r\n      removeNode(sr);\r\n      interval.cancel();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    removeAttribute(track, [ARIA_LIVE, ARIA_ATOMIC, ARIA_BUSY]);\r\n    removeNode(sr);\r\n  }\r\n\r\n  /**\r\n   * Disables/enables the live region.\r\n   * Does nothing when the `live` option is not enabled.\r\n   *\r\n   * @param disabled - `true` to disable the live region or `false` to enable it again.\r\n   */\r\n  function disable(disabled: boolean): void {\r\n    if (enabled) {\r\n      setAttribute(track, ARIA_LIVE, disabled ? 'off' : 'polite');\r\n    }\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    disable,\r\n    destroy,\r\n  };\r\n};","import { Options } from '../types';\r\nimport { CLASSES } from './classes';\r\nimport { I18N } from './i18n';\r\n\r\n\r\n/**\r\n * The collection of default options.\r\n * Note that this collection does not contain all options.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const DEFAULTS: Options = {\r\n  type: 'slide',\r\n  speed: 400,\r\n  perPage: 1,\r\n  easing: 'cubic-bezier(0.25, 1, 0.5, 1)',\r\n  drag: true,\r\n  direction: 'ltr',\r\n  interval: 5000,\r\n  trimSpace: true,\r\n  focusableNodes: 'a, button, textarea, input, select, iframe',\r\n  classes: CLASSES,\r\n  i18n: I18N,\r\n  reducedMotion: {\r\n    speed: 0,\r\n    rewindSpeed: 0,\r\n    autoplay: 'pause',\r\n  },\r\n};","/**\r\n * The collection of i18n strings.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const I18N = {\r\n  prev: 'Previous slide',\r\n  next: 'Next slide',\r\n  first: 'Go to first slide',\r\n  last: 'Go to last slide',\r\n  slideX: 'Go to slide %s',\r\n  pageX: 'Go to page %s',\r\n  play: 'Start autoplay',\r\n  pause: 'Pause autoplay',\r\n  carousel: 'carousel',\r\n  slide: 'slide',\r\n  select: 'Select a slide to show',\r\n  slideLabel: '%s of %s', // [ slide number ] / [ slide size ]\r\n};\r\n","import { EVENT_MOUNTED, EVENT_REFRESH } from '../../constants/events';\r\nimport { ComponentConstructor, TransitionComponent } from '../../types';\r\nimport { nextTick, noop } from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The component for the fade transition.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Transition component object.\r\n */\r\nexport const Fade: ComponentConstructor<TransitionComponent> = (Splide, Components, options, event) => {\r\n  const { Slides, Direction } = Components;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    event.on([EVENT_MOUNTED, EVENT_REFRESH], init);\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   * Offsets all slides for stacking them onto the head of the list.\r\n   * The `nextTick` disables the initial fade transition of the first slide.\r\n   */\r\n  function init(): void {\r\n    Slides.forEach(Slide => {\r\n      Slide.style('transform', `translateX(${ Direction.orient(100 * Slide.index) }%)`);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Starts the transition.\r\n   *\r\n   * @param index - A slide index to be active.\r\n   * @param done  - The callback function that must be called after the transition ends.\r\n   */\r\n  function start(index: number, done: () => void): void {\r\n    Slides.style('transition', `opacity ${ options.speed }ms ${ options.easing }`);\r\n    nextTick(done);\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    start,\r\n    cancel: noop,\r\n  };\r\n};\r\n","import { SLIDE } from '../../constants/types';\r\nimport { ComponentConstructor, TransitionComponent } from '../../types';\r\nimport { abs, apply, style } from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The component for the slide transition.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Transition component object.\r\n */\r\nexport const Slide: ComponentConstructor<TransitionComponent> = (Splide, Components, options, event) => {\r\n  const { Move, Controller, Scroll } = Components;\r\n  const { list } = Components.Elements;\r\n  const transition = apply(style, list, 'transition');\r\n\r\n  /**\r\n   * Holds the `done` callback function.\r\n   */\r\n  let endCallback: () => void;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    event.bind(list, 'transitionend', e => {\r\n      if (e.target === list && endCallback) {\r\n        cancel();\r\n        endCallback();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Starts the transition.\r\n   * The Move component calls this method just before the slider moves.\r\n   *\r\n   * @param index - A destination index.\r\n   * @param done  - The callback function that must be called after the transition ends.\r\n   */\r\n  function start(index: number, done: () => void): void {\r\n    const destination = Move.toPosition(index);\r\n    const position = Move.getPosition();\r\n    const speed = getSpeed(index);\r\n\r\n    if (abs(destination - position) >= 1 && speed >= 1) {\r\n      if (options.useScroll) {\r\n        Scroll.scroll(destination, speed, false, done);\r\n      } else {\r\n        transition(`transform ${ speed }ms ${ options.easing }`);\r\n        Move.translate(destination, true);\r\n        endCallback = done;\r\n      }\r\n    } else {\r\n      Move.jump(index);\r\n      done();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancels the transition.\r\n   */\r\n  function cancel(): void {\r\n    transition('');\r\n    Scroll.cancel();\r\n  }\r\n\r\n  /**\r\n   * Returns the transition speed.\r\n   *\r\n   * @param index - A destination index.\r\n   */\r\n  function getSpeed(index: number): number {\r\n    const { rewindSpeed } = options;\r\n\r\n    if (Splide.is(SLIDE) && rewindSpeed) {\r\n      const prev = Controller.getIndex(true);\r\n      const end = Controller.getEnd();\r\n\r\n      if ((prev === 0 && index >= end) || (prev >= end && index === 0)) {\r\n        return rewindSpeed;\r\n      }\r\n    }\r\n\r\n    return options.speed;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    start,\r\n    cancel,\r\n  };\r\n};\r\n","import { COMPONENTS } from '../../components';\r\nimport { SlideMatcher } from '../../components/Slides/Slides';\r\nimport { CLASS_INITIALIZED } from '../../constants/classes';\r\nimport { DEFAULTS } from '../../constants/defaults';\r\nimport { EVENT_DESTROY, EVENT_MOUNTED, EVENT_READY, EVENT_REFRESH } from '../../constants/events';\r\nimport { DATA_ATTRIBUTE } from '../../constants/project';\r\nimport { CREATED, DESTROYED, IDLE, STATES } from '../../constants/states';\r\nimport { FADE } from '../../constants/types';\r\nimport { Fade, Slide } from '../../transitions';\r\nimport { AnyFunction, ComponentConstructor, Components, EventMap, Options, SyncTarget } from '../../types';\r\nimport {\r\n  addClass,\r\n  assign,\r\n  empty,\r\n  EventInterface,\r\n  forOwn,\r\n  getAttribute,\r\n  isString,\r\n  merge,\r\n  query,\r\n  State,\r\n} from '@splidejs/utils';\r\nimport { assert } from '../../utils';\r\nimport { ARIA_LABEL, ARIA_LABELLEDBY } from '../../constants/attributes';\r\n\r\n\r\n/**\r\n * The frontend class for the Splide slider.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport class Splide {\r\n  /**\r\n   * Changes the default options for all Splide instances.\r\n   */\r\n  static defaults: Options = {};\r\n\r\n  /**\r\n   * The collection of state numbers.\r\n   */\r\n  static readonly STATES = STATES;\r\n\r\n  /**\r\n   * Stores extension constructors.\r\n   */\r\n  static readonly Extensions: Record<string, ComponentConstructor> = {};\r\n\r\n  /**\r\n   * The root element where the Splide is applied.\r\n   */\r\n  readonly root: HTMLElement;\r\n\r\n  /**\r\n   * The EventInterface object.\r\n   */\r\n  readonly event = EventInterface<EventMap & Record<string, AnyFunction>>();\r\n\r\n  /**\r\n   * The collection of all component instances, including extensions.\r\n   */\r\n  readonly Components: Components = {} as Components;\r\n\r\n  /**\r\n   * The StateObject object.\r\n   */\r\n  readonly state = State(CREATED);\r\n\r\n  /**\r\n   * An array with SyncTarget objects for splide instances to sync with.\r\n   */\r\n  readonly splides: SyncTarget[] = [];\r\n\r\n  /**\r\n   * The current options.\r\n   */\r\n  private readonly _o: Options = {};\r\n\r\n  /**\r\n   * The collection of all components.\r\n   */\r\n  private _C: Components;\r\n\r\n  /**\r\n   * The collection of extensions.\r\n   */\r\n  private _E: Record<string, ComponentConstructor> = {};\r\n\r\n  /**\r\n   * The Transition component.\r\n   */\r\n  private _T: ComponentConstructor;\r\n\r\n  /**\r\n   * The Splide constructor.\r\n   *\r\n   * @param target  - The selector for the target element, or the element itself.\r\n   * @param options - Optional. An object with options.\r\n   */\r\n  constructor(target: string | HTMLElement, options: Options = {}) {\r\n    const root = isString(target) ? query<HTMLElement>(document, target) : target;\r\n    assert(root, `${ root } is invalid.`);\r\n\r\n    this.root = root;\r\n\r\n    options = merge({\r\n      label: getAttribute(root, ARIA_LABEL) || '',\r\n      labelledby: getAttribute(root, ARIA_LABELLEDBY) || '',\r\n    }, DEFAULTS, Splide.defaults, options);\r\n\r\n    try {\r\n      merge(options, JSON.parse(getAttribute(root, DATA_ATTRIBUTE)));\r\n    } catch (e) {\r\n      assert(false, 'Invalid JSON');\r\n    }\r\n\r\n    this._o = Object.create(merge({}, options));\r\n  }\r\n\r\n  /**\r\n   * Initializes the instance.\r\n   *\r\n   * @param Extensions - Optional. An object with extensions.\r\n   * @param Transition - Optional. A Transition component.\r\n   *\r\n   * @return `this`\r\n   */\r\n  mount(Extensions: Record<string, ComponentConstructor> = this._E, Transition: ComponentConstructor = this._T): this {\r\n    const { state, Components } = this;\r\n    assert(state.is([CREATED, DESTROYED]), 'Already mounted!');\r\n\r\n    state.set(CREATED);\r\n\r\n    this._C = Components;\r\n    this._T = Transition || (this.is(FADE) ? Fade : Slide);\r\n    this._E = Extensions;\r\n\r\n    const Constructors = assign({}, COMPONENTS, this._E, { Transition: this._T });\r\n\r\n    forOwn(Constructors, (Component, key) => {\r\n      const component = Component(this, Components, this._o, this.event.lock());\r\n      Components[key] = component;\r\n      component.setup && component.setup();\r\n    });\r\n\r\n    forOwn(Components, component => {\r\n      component.mount && component.mount();\r\n    });\r\n\r\n    this.emit(EVENT_MOUNTED);\r\n\r\n    addClass(this.root, CLASS_INITIALIZED);\r\n\r\n    state.set(IDLE);\r\n    this.emit(EVENT_READY);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Syncs the slider with the provided one.\r\n   * This method must be called before the `mount()`.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const primary   = new Splide();\r\n   * const secondary = new Splide();\r\n   *\r\n   * primary.sync( secondary );\r\n   * primary.mount();\r\n   * secondary.mount();\r\n   * ```\r\n   *\r\n   * @param splide - A Splide instance to sync with.\r\n   *\r\n   * @return `this`\r\n   */\r\n  sync(splide: Splide): this {\r\n    this.splides.push({ splide });\r\n    splide.splides.push({ splide: this, isParent: true });\r\n\r\n    if (this.state.is(IDLE)) {\r\n      this._C.Sync.remount();\r\n      splide.Components.Sync.remount();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Moves the carousel with the following control pattern.\r\n   *\r\n   * | Pattern | Description |\r\n   * |---|---|\r\n   * | `i` | Goes to the slide `i` |\r\n   * | `'+${i}'` | Increments the slide index by `i` |\r\n   * | `'-${i}'` | Decrements the slide index by `i` |\r\n   * | `'>'` | Goes to the next page |\r\n   * | `'<'` | Goes to the previous page |\r\n   * | `>${i}` | Goes to the page `i` |\r\n   * | `>>` | Goes to the first page |\r\n   * | `<<` | Goes to the last page |\r\n   *\r\n   * In most cases, `'>'` and `'<'` notations are enough to control the slider\r\n   * because they respect `perPage` and `perMove` options.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const splide = new Splide();\r\n   *\r\n   * // Goes to the slide 1:\r\n   * splide.go( 1 );\r\n   *\r\n   * // Increments the index:\r\n   * splide.go( '+2' );\r\n   *\r\n   * // Goes to the next page:\r\n   * splide.go( '>' );\r\n   *\r\n   * // Goes to the page 2:\r\n   * splide.go( '>2' );\r\n   * ```\r\n   *\r\n   * @param control - A control pattern.\r\n   *\r\n   * @return `this`\r\n   */\r\n  go(control: number | string): this {\r\n    this._C.Controller.go(control);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Moves the carousel without transition.\r\n   *\r\n   * @param control - A control pattern. See `move()` for more details.\r\n   *\r\n   * @return `this`\r\n   */\r\n  jump(control: number | string): this {\r\n    this._C.Controller.jump(control);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Registers an event handler.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const splide = new Splide();\r\n   *\r\n   * // Listens to a single event:\r\n   * splide.on( 'move', function() {} );\r\n   *\r\n   * // Listens to multiple events:\r\n   * splide.on( 'move resize', function() {} );\r\n   *\r\n   * // Appends a namespace:\r\n   * splide.on( 'move.myNamespace resize.myNamespace', function() {} );\r\n   * ```\r\n   *\r\n   * @param events   - An event name or names separated by spaces. Use a dot(.) to append a namespace.\r\n   * @param callback - A callback function.\r\n   *\r\n   * @return `this`\r\n   */\r\n  on<K extends keyof EventMap>(events: K, callback: EventMap[ K ]): this;\r\n  on(events: string | string[], callback: AnyFunction): this;\r\n  on(events: string | string[], callback: AnyFunction): this {\r\n    this.event.on(events, callback);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes the registered all handlers for the specified event or events.\r\n   * If you want to only remove a particular handler, use namespace to identify it.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const splide = new Splide();\r\n   *\r\n   * // Removes all handlers assigned to \"move\":\r\n   * splide.off( 'move' );\r\n   *\r\n   * // Only removes handlers that belong to the specified namespace:\r\n   * splide.off( 'move.myNamespace' );\r\n   * ```\r\n   *\r\n   * @param events   - An event name or names separated by spaces. Use a dot(.) to append a namespace.\r\n   * @param callback - A callback function to remove.\r\n   *\r\n   * @return `this`\r\n   */\r\n  off<K extends keyof EventMap>(events: K | K[] | string | string[], callback: AnyFunction): this {\r\n    this.event.off(events, callback);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Emits an event and triggers registered handlers.\r\n   *\r\n   * @param event - An event name to emit.\r\n   * @param args  - Optional. Any number of arguments to pass to handlers.\r\n   *\r\n   * @return `this`\r\n   */\r\n  emit<K extends keyof EventMap>(event: K, ...args: Parameters<EventMap[ K ]>): this;\r\n  emit(event: string, ...args: any[]): this;\r\n  emit(event: string, ...args: any[]): this {\r\n    this.event.emit(event, ...args);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Inserts a slide at the specified position.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const splide = new Splide();\r\n   * splide.mount();\r\n   *\r\n   * // Adds the slide by the HTML:\r\n   * splide.add( '<li></li> );\r\n   *\r\n   * // or adds the element:\r\n   * splide.add( document.createElement( 'li' ) );\r\n   * ```\r\n   *\r\n   * @param slides - A slide element, an HTML string that represents a slide, or an array with them.\r\n   * @param index  - Optional. An index to insert a slide at.\r\n   *\r\n   * @return `this`\r\n   */\r\n  add(slides: string | HTMLElement | Array<string | HTMLElement>, index?: number): this {\r\n    this._C.Slides.add(slides, index);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes slides that match the matcher\r\n   * that can be an index, an array with indices, a selector, or an iteratee function.\r\n   *\r\n   * @param matcher - An index, an array with indices, a selector string, or an iteratee function.\r\n   */\r\n  remove(matcher: SlideMatcher): this {\r\n    this._C.Slides.remove(matcher);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Checks the slider type.\r\n   *\r\n   * @param type - A type to test.\r\n   *\r\n   * @return `true` if the type matches the current one, or otherwise `false`.\r\n   */\r\n  is(type: string): boolean {\r\n    return this._o.type === type;\r\n  }\r\n\r\n  /**\r\n   * Refreshes the slider.\r\n   *\r\n   * @return `this`\r\n   */\r\n  refresh(): this {\r\n    this.emit(EVENT_REFRESH);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Destroys the slider.\r\n   *\r\n   * @param completely - Optional. If `true`, Splide will not remount the slider by breakpoints.\r\n   *\r\n   * @return `this`\r\n   */\r\n  destroy(completely = true): this {\r\n    const { event, state } = this;\r\n\r\n    if (state.is(CREATED)) {\r\n      // Postpones destruction requested before the slider becomes ready.\r\n      this.on(EVENT_READY, this.destroy.bind(this, completely));\r\n    } else {\r\n      forOwn(this._C, component => {\r\n        component.destroy && component.destroy(completely);\r\n      }, true);\r\n\r\n      event.emit(EVENT_DESTROY);\r\n      event.destroy();\r\n      completely && empty(this.splides);\r\n      state.set(DESTROYED);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns options.\r\n   *\r\n   * @return An object with the latest options.\r\n   */\r\n  get options(): Options {\r\n    return this._o;\r\n  }\r\n\r\n  /**\r\n   * Merges options to the current options and emits `updated` event.\r\n   *\r\n   * @param options - An object with new options.\r\n   */\r\n  set options(options: Options) {\r\n    this._C.Breakpoints.set(options, true, true);\r\n  }\r\n\r\n  /**\r\n   * Returns the number of slides without clones.\r\n   *\r\n   * @return The number of slides.\r\n   */\r\n  get length(): number {\r\n    return this._C.Slides.getLength(true);\r\n  }\r\n\r\n  /**\r\n   * Returns the active slide index.\r\n   *\r\n   * @return The active slide index.\r\n   */\r\n  get index(): number {\r\n    return this._C.Controller.getIndex();\r\n  }\r\n}\r\n"],"names":["MEDIA_PREFERS_REDUCED_MOTION","MOVING","SCROLLING","STATES","CREATED","MOUNTED","IDLE","DRAGGING","DESTROYED","empty","array","length","apply","func","args","bind","nextTick","setTimeout","noop","raf","requestAnimationFrame","typeOf","type","subject","isObject","isNull","isArray","Array","isFunction","isString","isUndefined","isHTMLElement","ownerDocument","defaultView","window","HTMLElement","e","toArray","value","forEach","values","iteratee","push","items","arrayProto","prototype","slice","arrayLike","start","end","call","includes","assert","assertion","message","Error","assign","Object","ownKeys","keys","forOwn","object","right","reverse","key","merge","sources","source","omit","toggleClass","elm","classes","force","split","className","classList","toggle","addClass","append","parent","children2","before","ref","nodes","matches","selector","children","filter","child2","child","firstElementChild","removeAttribute","elms","attrs","attr","setAttribute","value2","name","String","create","tag2","document","createElement","style","prop","getComputedStyle","display","display2","focus","preventScroll","getAttribute","hasClass","contains","rect","target","getBoundingClientRect","removeNode","node","parentNode","removeChild","parseHtml","html","DOMParser","parseFromString","body","prevent","stopPropagation","preventDefault","stopImmediatePropagation","query","querySelector","queryAll","querySelectorAll","removeClass","timeOf","timeStamp","unit","min","max","floor","ceil","abs","sign","Math","approximatelyEqual","x","y","epsilon","between","number","exclusive","minimum","maximum","clamp","format","string","replacements","reduce","prev","curr","replace","pad","padStart","ids","forEachEvent","events","event","EventBinder","removersRef","removers","Set","let","destroyed","callback","options","addEventListener","add","removeEventListener","lock","destroy","hard","remover","delete","EventBus","listenersRef","listeners","get","on","off","listener","emit","entries","unlocked","EventInterface","binder","bus","RequestInterval","interval","onInterval","onUpdate","limit","now","Date","startTime","rate","id","paused","count","update","pause","cancel","cancelAnimationFrame","resume","rewind","set","time","isPaused","State","initialState","state","is","states","EVENT_MOUNTED","EVENT_MOVE","EVENT_MOVED","EVENT_CLICK","EVENT_ACTIVE","EVENT_INACTIVE","EVENT_VISIBLE","EVENT_HIDDEN","EVENT_REFRESH","EVENT_UPDATED","EVENT_RESIZE","EVENT_RESIZED","EVENT_SCROLL","EVENT_SCROLLED","EVENT_OVERFLOW","EVENT_NAVIGATION_MOUNTED","EVENT_AUTOPLAY_PLAY","EVENT_AUTOPLAY_PAUSE","EVENT_SLIDE_KEYDOWN","EVENT_SHIFTED","EVENT_END_INDEX_CHANGED","NOT_OVERFLOW_KEY","ARROW_LEFT","ARROW_RIGHT","TTB","ORIENTATION_MAP","width","left","X","Y","ArrowLeft","ArrowRight","ROLE","TAB_INDEX","ARIA_CONTROLS","ARIA_CURRENT","ARIA_SELECTED","ARIA_LABEL","ARIA_LABELLEDBY","ARIA_HIDDEN","ARIA_ORIENTATION","ARIA_ROLEDESCRIPTION","ARIA_LIVE","ARIA_BUSY","ARIA_ATOMIC","ALL_ATTRIBUTES","PROJECT_CODE","DATA_ATTRIBUTE","CLASS_PREFIX","CLASS_ROOT","CLASS_TRACK","CLASS_LIST","CLASS_SLIDE","CLASS_CLONE","CLASS_CONTAINER","CLASS_ARROWS","CLASS_ARROW","CLASS_ARROW_PREV","CLASS_ARROW_NEXT","CLASS_PAGINATION","CLASS_PAGINATION_PAGE","CLASS_PROGRESS_BAR","CLASS_TOGGLE","CLASS_SPINNER","CLASS_SR","CLASS_ACTIVE","CLASS_PREV","CLASS_NEXT","CLASS_VISIBLE","CLASS_LOADING","CLASS_FOCUS_IN","CLASS_OVERFLOW","STATUS_CLASSES","CLASSES","slide","clone","arrows","arrow","next","pagination","page","spinner","condition","POINTER_DOWN_EVENTS","POINTER_MOVE_EVENTS","POINTER_UP_EVENTS","SLIDE","LOOP","FADE","Slide","Splide","index","slideIndex","Components","root","isNavigation","updateOnMove","i18n","slideFocus","Elements","resolve","Direction","styles","label","isClone","container","initNavigation","controls","splides","map","splide","Slides","getAt","join","slideX","onMove","hidden","active","isActive","self","visible","isVisible","focusableNodes","activeElement","cloneStatus","partial","trackRect","slideRect","track","mount","slideLabel","useContainer","_style","isWithin","from","distance","diff","INTERVAL_DATA_ATTRIBUTE","SCROLL_LISTENER_OPTIONS","passive","capture","SRC_DATA_ATTRIBUTE","SRCSET_DATA_ATTRIBUTE","IMAGE_SELECTOR","TRIGGER_KEYS","COMPONENTS","Breakpoints","breakpoints","reducedMotion","completely","register","queryList","matchMedia","direction","merged","entry","refresh","opts","base","notify","getPrototypeOf","setup","isMin","mediaQuery","sort","n","m","Layout","isOverflow","enable","axisOnly","match","offset","replacement","toLowerCase","charAt","toUpperCase","orient","elements","slides","rootClasses","trackClasses","list","isUsingKey","find","bar","role","prefix","tagName","carousel","concat","getClasses","labelledby","closest","drag","init","Slide1","Slide2","excludeClones","matcher","getIn","Controller","toIndex","hasFocus","perPage","forEachItem","observeImages","images","img","remove","getLength","isEnough","styleSlides","vertical","rootRect","overflow","cssPadding","resize","newRect","height","cssHeight","gap","autoWidth","fixedWidth","cssSlideSize","fixedHeight","autoHeight","rightPadding","padding","heightRatio","listSize","full","slideSize","withoutGap","getGap","totalSize","first","sliderSize","second","firstRect","duration","trackSize","getPadding","parseFloat","Clones","clones","cloneCount","remount","observe","computeCloneCount","generate","isHead","cloneNode","go","fixedCount","fixedSize","Move","Transition","indices","reposition","isBusy","Scroll","jump","onTransitionEnd","translate","getPosition","toPosition","position","preventLoop","destination","exceededLimit","shift","backwards","excess","getLimit","size","trimSpace","getEnd","canShift","shifted","exceededMin","exceededMax","move","dest","forwards","onMoved","shiftBackwards","minDistance","Infinity","i","getRate","isLoop","useIndex","isSlide","friction","scroll","snap","onScrolled","noConstrain","clear","snapped","toDest","immediately","onEnd","to","easingFunc","pow","t","omitEnd","getNext","getAdjacent","getPrev","currIndex","endIndex","prevIndex","slideCount","perMove","onResized","control","canGo","indicator","oneOf","indicators","computeDestIndex","loop","setIndex","snapPage","toPage","waitForTransition","speed","getIndex","Arrows","placeholder","wrapper","created","wrapperClasses","enabled","createArrow","arrowPath","nextIndex","prevLabel","nextLabel","last","disabled","Autoplay","pauseOnHover","pauseOnFocus","resetProgress","autoplay","hovered","focused","stopped","play","stop","autoToggle","Drag","startCoord","basePosition","baseEvent","prevBaseEvent","isFree","dragging","exceeded","clickPrevented","disable","onPointerDown","isTouch","noDrag","isTouchEvent","button","coordOf","onPointerMove","onPointerUp","save","releaseTouch","diffCoord","thresholds","isObj","mouse","cancelable","expired","diffTime","hasExceeded","touch","updateOnDragged","velocity","flickPower","flickMaxPages","rewindByDrag","onClick","orthogonal","getBaseEvent","changedTouches","TouchEvent","isDragging","Keyboard","keyboard","onKeydown","LazyLoad","isSequential","lazyLoad","src","srcset","parentElement","loadNext","check","preloadPages","data","load","onLoad","Pagination","paginationClasses","dir","getDirection","nextPage","item","paginationDirection","paginationKeyboard","select","li","class","text","pageX","Sync","isParent","sync","navigate","ev","Wheel","lastTime","onWheel","delta","sleep","wheelAxis","deltaX","deltaY","wheelMinThreshold","wheelSleep","releaseWheel","wheel","Live","live","sr","textContent","DEFAULTS","easing","rewindSpeed","Fade","done","transition","endCallback","useScroll","defaults","Extensions","_o","_C","_E","_T","constructor","this","JSON","parse","Component","component"],"mappings":"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"}