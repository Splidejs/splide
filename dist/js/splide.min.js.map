{"version":3,"file":"splide.min.js","sources":["../../src/js/constants/media.ts","../../src/js/constants/states.ts","../../../utils/dist/splide-utils.esm.js","../../src/js/constants/events.ts","../../src/js/constants/arrows.ts","../../src/js/constants/directions.ts","../../src/js/components/Direction/Direction.ts","../../src/js/constants/attributes.ts","../../src/js/constants/project.ts","../../src/js/constants/classes.ts","../../src/js/utils/error/assert/assert.ts","../../src/js/components/Drag/constants.ts","../../src/js/constants/types.ts","../../src/js/components/Slides/Slide.ts","../../src/js/components/Autoplay/constants.ts","../../src/js/constants/listener-options.ts","../../src/js/components/LazyLoad/constants.ts","../../src/js/components/Sync/Sync.ts","../../src/js/components/Media/Media.ts","../../src/js/components/Elements/Elements.ts","../../src/js/components/Slides/Slides.ts","../../src/js/components/Layout/Layout.ts","../../src/js/components/Clones/Clones.ts","../../src/js/components/Move/Move.ts","../../src/js/components/Controller/Controller.ts","../../src/js/components/Arrows/Arrows.ts","../../src/js/components/Arrows/path.ts","../../src/js/components/Autoplay/Autoplay.ts","../../src/js/components/Cover/Cover.ts","../../src/js/components/Scroll/Scroll.ts","../../src/js/components/Scroll/constants.ts","../../src/js/components/Drag/Drag.ts","../../src/js/components/Keyboard/Keyboard.ts","../../src/js/components/LazyLoad/LazyLoad.ts","../../src/js/components/Pagination/Pagination.ts","../../src/js/components/Wheel/Wheel.ts","../../src/js/components/Live/Live.ts","../../src/js/constants/defaults.ts","../../src/js/constants/i18n.ts","../../src/js/transitions/Fade/Fade.ts","../../src/js/transitions/Slide/Slide.ts","../../src/js/core/Splide/Splide.ts"],"sourcesContent":["/**\r\n * Matches when users request reducing non-essential animations.\r\n *\r\n * @link https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion\r\n */\r\nexport const MEDIA_PREFERS_REDUCED_MOTION = '(prefers-reduced-motion: reduce)';","/**\r\n * Splide has been just created.\r\n */\r\nexport const CREATED = 1;\r\n\r\n/**\r\n * Splide has mounted components.\r\n */\r\nexport const MOUNTED = 2;\r\n\r\n/**\r\n * Splide is ready.\r\n */\r\nexport const IDLE = 3;\r\n\r\n/**\r\n * Splide is moving.\r\n */\r\nexport const MOVING = 4;\r\n\r\n/**\r\n * Splide is moving.\r\n */\r\nexport const SCROLLING = 5;\r\n\r\n/**\r\n * The user is dragging the slider.\r\n */\r\nexport const DRAGGING = 6;\r\n\r\n/**\r\n * Splide has been destroyed.\r\n */\r\nexport const DESTROYED = 7;\r\n\r\n/**\r\n * The collection of all states.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const STATES = {\r\n  CREATED,\r\n  MOUNTED,\r\n  IDLE,\r\n  MOVING,\r\n  SCROLLING,\r\n  DRAGGING,\r\n  DESTROYED,\r\n};\r\n","function x(n) {\n  n.length = 0;\n}\nconst D = Array.prototype;\nfunction m(n, t, e) {\n  return D.slice.call(n, t, e);\n}\nfunction dn(n, t) {\n  return D.find.call(n, t);\n}\nfunction a(n) {\n  return n.bind(null, ...m(arguments, 1));\n}\nconst an = setTimeout, ln = () => {\n};\nfunction P(n) {\n  return requestAnimationFrame(n);\n}\nfunction p(n, t) {\n  return typeof t === n;\n}\nfunction g(n) {\n  return !q(n) && p(\"object\", n);\n}\nconst $ = Array.isArray, mn = a(p, \"function\"), h = a(p, \"string\"), pn = a(p, \"boolean\"), Z = a(p, \"undefined\");\nfunction q(n) {\n  return n === null;\n}\nfunction F(n) {\n  try {\n    return n instanceof (n.ownerDocument.defaultView || window).HTMLElement;\n  } catch {\n    return !1;\n  }\n}\nfunction L(n) {\n  return $(n) ? n : [n];\n}\nfunction d(n, t) {\n  L(n).forEach(t);\n}\nfunction G(n, t) {\n  return n.includes(t);\n}\nfunction hn(n, t) {\n  return n.push(...L(t)), n;\n}\nfunction I(n, t, e) {\n  n && d(t, (i) => {\n    i && n.classList[e ? \"add\" : \"remove\"](i);\n  });\n}\nfunction J(n, t) {\n  I(n, h(t) ? t.split(\" \") : t, !0);\n}\nfunction Q(n, t) {\n  d(t, n.appendChild.bind(n));\n}\nfunction yn(n, t) {\n  d(n, (e) => {\n    const i = (t || e).parentNode;\n    i && i.insertBefore(e, t);\n  });\n}\nfunction W(n, t) {\n  return F(n) && n.matches(t);\n}\nfunction X(n, t) {\n  const e = n ? m(n.children) : [];\n  return t ? e.filter((i) => W(i, t)) : e;\n}\nfunction Y(n, t) {\n  return t ? X(n, t)[0] : n.firstElementChild;\n}\nfunction gn(n, t) {\n  return n.closest(t);\n}\nconst b = Object.assign, A = Object.keys;\nfunction O(n, t, e) {\n  return n && (e ? A(n).reverse() : A(n)).forEach((i) => {\n    i !== \"__proto__\" && t(n[i], i);\n  }), n;\n}\nfunction U(n) {\n  return m(arguments, 1).forEach((t) => {\n    O(t, (e, i) => {\n      $(e) ? n[i] = e.slice() : g(e) ? n[i] = U({}, g(n[i]) ? n[i] : {}, e) : n[i] = e;\n    });\n  }), n;\n}\nfunction En(n, t) {\n  return d(t || A(n), (e) => {\n    delete n[e];\n  }), n;\n}\nfunction k(n, t) {\n  d(n, (e) => {\n    d(t, (i) => {\n      e && e.removeAttribute(i);\n    });\n  });\n}\nfunction M(n, t, e) {\n  g(t) ? O(t, (i, r) => {\n    M(n, r, i);\n  }) : d(n, (i) => {\n    q(e) || e === \"\" ? k(i, t) : i.setAttribute(t, String(e));\n  });\n}\nfunction j(n, t, e) {\n  const i = document.createElement(n);\n  return t && (h(t) ? J(i, t) : M(i, t)), e && Q(e, i), i;\n}\nfunction nn(n, t, e) {\n  if (Z(e))\n    return getComputedStyle(n)[t];\n  q(e) || (n.style[t] = `${e}`);\n}\nfunction $n(n, t) {\n  nn(n, \"display\", t);\n}\nfunction An(n) {\n  F(n) && n.focus({ preventScroll: !0 });\n}\nfunction wn(n, t) {\n  return n.getAttribute(t);\n}\nfunction Cn(n, t) {\n  return !!n && n.classList.contains(t);\n}\nfunction tn(n) {\n  return n.getBoundingClientRect();\n}\nfunction en(n) {\n  d(n, (t) => {\n    t && t.parentNode && t.parentNode.removeChild(t);\n  });\n}\nfunction Sn(n, t) {\n  if (h(t)) {\n    const e = j(\"div\", { style: `width: ${t}; position: absolute;` }, n);\n    t = tn(e).width, en(e);\n  }\n  return t;\n}\nfunction qn(n) {\n  return Y(new DOMParser().parseFromString(n, \"text/html\").body);\n}\nfunction Ln(n, t) {\n  n.preventDefault(), t && (n.stopPropagation(), n.stopImmediatePropagation());\n}\nfunction On(n, t) {\n  return n && n.querySelector(t);\n}\nfunction Tn(n, t) {\n  return t && n ? m(n.querySelectorAll(t)) : [];\n}\nfunction Nn(n, t) {\n  I(n, t, !1);\n}\nfunction Pn(n) {\n  return n.timeStamp;\n}\nfunction Bn(n) {\n  return h(n) ? n : n ? `${n}px` : \"\";\n}\nfunction rn(n) {\n  let t = \"\";\n  return O(n, (e, i) => {\n    t += e || e === 0 ? ` ${i}${e !== !0 ? `=\"${e}\"` : \"\"}` : \"\";\n  }), t.trim();\n}\nfunction _() {\n  return m(arguments).reduce((n, t) => `${n} ${$(t) ? _(...t) : t || \"\"}`.trim(), \"\");\n}\nfunction on(n, t) {\n  return t = $(t) || !g(t) ? { class: _(t) } : t, `<${`${n} ${t ? rn(t) : \"\"}`.trim()}>`;\n}\nconst xn = a(on, \"div\"), { min: E, max: w, floor: Dn, ceil: Fn, abs: un, sign: In } = Math;\nfunction Mn(n, t, e) {\n  return un(n - t) < e;\n}\nfunction _n(n, t, e, i) {\n  const r = E(t, e), o = w(t, e);\n  return i ? r < n && n < o : r <= n && n <= o;\n}\nfunction Hn(n, t, e) {\n  const i = E(t, e), r = w(t, e);\n  return E(w(i, n), r);\n}\nfunction vn(n) {\n  return n.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\nfunction Kn(n, t) {\n  return d(t, (e) => {\n    n = n.replace(\"%s\", `${e}`);\n  }), n;\n}\nfunction cn(n) {\n  return n < 10 ? `0${n}` : `${n}`;\n}\nconst B = {};\nfunction zn(n) {\n  return `${n}${cn(B[n] = (B[n] || 0) + 1)}`;\n}\nfunction C(n, t) {\n  d(n, (e) => {\n    h(e) && e.split(\" \").forEach(t);\n  });\n}\nfunction S(n, t) {\n  const e = [];\n  for (let i = n.length - 1; i >= 0; i--)\n    t(n[i]) && e.push(...n.splice(i, 1));\n  return e;\n}\nfunction H(n) {\n  const t = n || [], e = n ? {} : void 0;\n  function i(o, f, u, c) {\n    C(f, (s) => {\n      o.addEventListener(s, u, c), t.push([o.removeEventListener.bind(o, s, u, c), e]);\n    });\n  }\n  function r() {\n    e ? S(t, (o) => o[1] === e).forEach((o) => {\n      o[0]();\n    }) : (t.forEach((o) => {\n      o[0]();\n    }), x(t));\n  }\n  return {\n    bind: i,\n    create: a(H, t),\n    destroy: r\n  };\n}\nfunction v(n) {\n  const t = n || [], e = n ? {} : void 0;\n  function i(u, c) {\n    C(u, (s) => {\n      t.push([s, c, e]);\n    });\n  }\n  function r(u, c) {\n    C(u, (s) => {\n      S(t, (l) => l[0] === s && (!c || l[1] === c) && l[2] === e);\n    });\n  }\n  function o(u, ...c) {\n    t.slice().forEach((s) => {\n      s[0] === u && s[1](...c);\n    });\n  }\n  function f() {\n    e ? S(t, (u) => u[2] === e) : x(t);\n  }\n  return {\n    on: i,\n    off: r,\n    emit: o,\n    create: a(v, t),\n    destroy: f\n  };\n}\nfunction fn(n = H(), t = v()) {\n  function e() {\n    return fn(n.create(), t.create());\n  }\n  function i() {\n    n.destroy(), t.destroy();\n  }\n  return b({}, n, t, { create: e, destroy: i });\n}\nfunction sn(n, t, e, i) {\n  const { now: r } = Date;\n  let o, f = 0, u, c = !0, s = 0;\n  function l() {\n    if (!c) {\n      if (f = n ? E((r() - o) / n, 1) : 1, e && e(f), f >= 1 && (t(), o = r(), i && ++s >= i))\n        return T();\n      u = P(l);\n    }\n  }\n  function K(y) {\n    y || N(), o = r() - (y ? f * n : 0), c = !1, u = P(l);\n  }\n  function T() {\n    c = !0;\n  }\n  function z() {\n    o = r(), f = 0, e && e(f);\n  }\n  function N() {\n    u && cancelAnimationFrame(u), f = 0, u = 0, c = !0;\n  }\n  function R(y) {\n    n = y;\n  }\n  function V() {\n    return c;\n  }\n  return {\n    start: K,\n    rewind: z,\n    pause: T,\n    cancel: N,\n    set: R,\n    isPaused: V\n  };\n}\nfunction Rn(n) {\n  let t = n;\n  function e(r) {\n    t = r;\n  }\n  function i(r) {\n    return G(L(r), t);\n  }\n  return { set: e, is: i };\n}\nfunction Vn(n, t) {\n  const e = sn(t || 0, n, void 0, 1);\n  return () => {\n    e.isPaused() && e.start();\n  };\n}\nexport {\n  H as EventBinder,\n  v as EventBus,\n  fn as EventInterface,\n  sn as RequestInterval,\n  Rn as State,\n  Vn as Throttle,\n  un as abs,\n  J as addClass,\n  Q as append,\n  a as apply,\n  Mn as approximatelyEqual,\n  b as assign,\n  yn as before,\n  _n as between,\n  rn as buildAttrs,\n  vn as camelToKebab,\n  Fn as ceil,\n  Y as child,\n  X as children,\n  Hn as clamp,\n  _ as classNames,\n  gn as closest,\n  j as create,\n  $n as display,\n  xn as div,\n  x as empty,\n  dn as find,\n  Dn as floor,\n  An as focus,\n  d as forEach,\n  O as forOwn,\n  Kn as format,\n  wn as getAttribute,\n  Cn as hasClass,\n  G as includes,\n  $ as isArray,\n  pn as isBoolean,\n  mn as isFunction,\n  F as isHTMLElement,\n  q as isNull,\n  g as isObject,\n  h as isString,\n  Z as isUndefined,\n  W as matches,\n  w as max,\n  Sn as measure,\n  U as merge,\n  E as min,\n  an as nextTick,\n  ln as noop,\n  En as omit,\n  A as ownKeys,\n  cn as pad,\n  qn as parseHtml,\n  Ln as prevent,\n  hn as push,\n  On as query,\n  Tn as queryAll,\n  P as raf,\n  tn as rect,\n  k as removeAttribute,\n  Nn as removeClass,\n  en as removeNode,\n  M as setAttribute,\n  In as sign,\n  m as slice,\n  nn as style,\n  on as tag,\n  Pn as timeOf,\n  L as toArray,\n  I as toggleClass,\n  zn as uniqueId,\n  Bn as unit\n};\n","export const EVENT_MOUNTED            = 'mounted';\r\nexport const EVENT_READY              = 'ready';\r\nexport const EVENT_MOVE               = 'move';\r\nexport const EVENT_MOVED              = 'moved';\r\nexport const EVENT_CLICK              = 'click';\r\nexport const EVENT_ACTIVE             = 'active';\r\nexport const EVENT_INACTIVE           = 'inactive';\r\nexport const EVENT_VISIBLE            = 'visible';\r\nexport const EVENT_HIDDEN             = 'hidden';\r\nexport const EVENT_REFRESH            = 'refresh';\r\nexport const EVENT_UPDATED            = 'updated';\r\nexport const EVENT_RESIZE             = 'resize';\r\nexport const EVENT_RESIZED            = 'resized';\r\nexport const EVENT_DRAG               = 'drag';\r\nexport const EVENT_DRAGGING           = 'dragging';\r\nexport const EVENT_DRAGGED            = 'dragged';\r\nexport const EVENT_SCROLL             = 'scroll';\r\nexport const EVENT_SCROLLED           = 'scrolled';\r\nexport const EVENT_OVERFLOW           = 'overflow';\r\nexport const EVENT_DESTROY            = 'destroy';\r\nexport const EVENT_ARROWS_MOUNTED     = 'arrows:mounted';\r\nexport const EVENT_ARROWS_UPDATED     = 'arrows:updated';\r\nexport const EVENT_PAGINATION_MOUNTED = 'pagination:mounted';\r\nexport const EVENT_PAGINATION_UPDATED = 'pagination:updated';\r\nexport const EVENT_NAVIGATION_MOUNTED = 'navigation:mounted';\r\nexport const EVENT_AUTOPLAY_PLAY      = 'autoplay:play';\r\nexport const EVENT_AUTOPLAY_PLAYING   = 'autoplay:playing';\r\nexport const EVENT_AUTOPLAY_PAUSE     = 'autoplay:pause';\r\nexport const EVENT_LAZYLOAD_LOADED    = 'lazyload:loaded';\r\n\r\n/** @internal */\r\nexport const EVENT_SLIDE_KEYDOWN     = 'sk';\r\nexport const EVENT_SHIFTED           = 'sh';\r\nexport const EVENT_END_INDEX_CHANGED = 'ei';\r\n","const ARROW = 'Arrow';\r\nexport const ARROW_LEFT  = `${ ARROW }Left`;\r\nexport const ARROW_RIGHT = `${ ARROW }Right`;\r\nexport const ARROW_UP    = `${ ARROW }Up`;\r\nexport const ARROW_DOWN  = `${ ARROW }Down`;","/**\r\n * Enumerates slides from left to right.\r\n */\r\nexport const LTR = 'ltr';\r\n\r\n/**\r\n * Enumerates slides from right to left.\r\n */\r\nexport const RTL = 'rtl';\r\n\r\n/**\r\n * Enumerates slides in a col.\r\n */\r\nexport const TTB = 'ttb';\r\n","import { ARROW_DOWN, ARROW_LEFT, ARROW_RIGHT, ARROW_UP } from '../../constants/arrows';\r\nimport { RTL, TTB } from '../../constants/directions';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\n\r\n\r\n/**\r\n * The interface for the Direction component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface DirectionComponent extends BaseComponent {\r\n  resolve<R extends string>( prop: string, axisOnly?: boolean, direction?: Options['direction'] ): R;\r\n  orient( value: number ): number;\r\n}\r\n\r\n/**\r\n * The translation map for directions.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const ORIENTATION_MAP = {\r\n  width     : [ 'height' ],\r\n  left      : [ 'top', 'right' ],\r\n  right     : [ 'bottom', 'left' ],\r\n  x         : [ 'y' ],\r\n  X         : [ 'Y' ],\r\n  Y         : [ 'X' ],\r\n  ArrowLeft : [ ARROW_UP, ARROW_RIGHT ],\r\n  ArrowRight: [ ARROW_DOWN, ARROW_LEFT ],\r\n};\r\n\r\n/**\r\n * The component that absorbs the difference among directions.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Direction component object.\r\n */\r\nexport function Direction( Splide: Splide, Components: Components, options: Options ): DirectionComponent {\r\n  /**\r\n   * Resolves the provided property name.\r\n   *\r\n   * @param prop      - A property name to translate.\r\n   * @param axisOnly  - Optional. If `ture`, returns the same property for LTR and RTL.\r\n   * @param direction - Optional. Specify the direction. The default value is the `direction` option.\r\n   */\r\n  function resolve<R extends string>( prop: string, axisOnly?: boolean, direction?: Options['direction'] ): R {\r\n    direction = direction || options.direction;\r\n    const index = direction === RTL && ! axisOnly ? 1 : direction === TTB ? 0 : -1;\r\n\r\n    return ORIENTATION_MAP[ prop ] && ORIENTATION_MAP[ prop ][ index ]\r\n      || prop.replace( /width|left|right/i, ( match, offset ) => {\r\n        const replacement = ORIENTATION_MAP[ match.toLowerCase() ][ index ] || match;\r\n        return offset > 0 ? replacement.charAt( 0 ).toUpperCase() + replacement.slice( 1 ) : replacement;\r\n      } );\r\n  }\r\n\r\n  /**\r\n   * Orients the value towards the current direction.\r\n   *\r\n   * @param value - A value to orient.\r\n   *\r\n   * @return The oriented value.\r\n   */\r\n  function orient( value: number ): number {\r\n    return value * ( options.direction === RTL ? 1 : -1 );\r\n  }\r\n\r\n  return {\r\n    resolve,\r\n    orient,\r\n  };\r\n}\r\n","export const ROLE      = 'role';\r\nexport const TAB_INDEX = 'tabindex';\r\nexport const DISABLED  = 'disabled';\r\n\r\nexport const ARIA_PREFIX          = 'aria-';\r\nexport const ARIA_CONTROLS        = `${ ARIA_PREFIX }controls`;\r\nexport const ARIA_CURRENT         = `${ ARIA_PREFIX }current`;\r\nexport const ARIA_SELECTED        = `${ ARIA_PREFIX }selected`;\r\nexport const ARIA_LABEL           = `${ ARIA_PREFIX }label`;\r\nexport const ARIA_LABELLEDBY      = `${ ARIA_PREFIX }labelledby`;\r\nexport const ARIA_HIDDEN          = `${ ARIA_PREFIX }hidden`;\r\nexport const ARIA_ORIENTATION     = `${ ARIA_PREFIX }orientation`;\r\nexport const ARIA_ROLEDESCRIPTION = `${ ARIA_PREFIX }roledescription`;\r\nexport const ARIA_LIVE            = `${ ARIA_PREFIX }live`;\r\nexport const ARIA_BUSY            = `${ ARIA_PREFIX }busy`;\r\nexport const ARIA_ATOMIC          = `${ ARIA_PREFIX }atomic`;\r\n\r\n/**\r\n * The array with all attributes to remove later.\r\n * Need to manually remove attributes that are not in this.\r\n * Note that removing `aria-live` disables the live region until the page reload.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const ALL_ATTRIBUTES = [\r\n  ROLE,\r\n  TAB_INDEX,\r\n  DISABLED,\r\n  ARIA_CONTROLS,\r\n  ARIA_CURRENT,\r\n  ARIA_LABEL,\r\n  ARIA_LABELLEDBY,\r\n  ARIA_HIDDEN,\r\n  ARIA_ORIENTATION,\r\n  ARIA_ROLEDESCRIPTION,\r\n];\r\n","/**\r\n * The project code.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const PROJECT_CODE = 'splide';\r\n\r\n/**\r\n * The data attribute prefix.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const DATA_ATTRIBUTE = `data-${ PROJECT_CODE }`;\r\n","import { PROJECT_CODE } from './project';\r\n\r\n/**\r\n * The prefix for classes.\r\n *\r\n * @since 4.1.0\r\n */\r\nconst CLASS_PREFIX = `${ PROJECT_CODE }__`;\r\n\r\n/**\r\n * The prefix for status classes.\r\n *\r\n * @since 4.1.0\r\n */\r\nconst STATUS_CLASS_PREFIX = 'is-';\r\n\r\n/**\r\n * All classes as constants.\r\n */\r\nexport const CLASS_ROOT            = PROJECT_CODE;\r\nexport const CLASS_TRACK           = `${ CLASS_PREFIX }track`;\r\nexport const CLASS_LIST            = `${ CLASS_PREFIX }list`;\r\nexport const CLASS_SLIDE           = `${ CLASS_PREFIX }slide`;\r\nexport const CLASS_CLONE           = `${ CLASS_SLIDE }--clone`;\r\nexport const CLASS_CONTAINER       = `${ CLASS_SLIDE }__container`;\r\nexport const CLASS_ARROWS          = `${ CLASS_PREFIX }arrows`;\r\nexport const CLASS_ARROW           = `${ CLASS_PREFIX }arrow`;\r\nexport const CLASS_ARROW_PREV      = `${ CLASS_ARROW }--prev`;\r\nexport const CLASS_ARROW_NEXT      = `${ CLASS_ARROW }--next`;\r\nexport const CLASS_PAGINATION      = `${ CLASS_PREFIX }pagination`;\r\nexport const CLASS_PAGINATION_PAGE = `${ CLASS_PAGINATION }__page`;\r\nexport const CLASS_PROGRESS        = `${ CLASS_PREFIX }progress`;\r\nexport const CLASS_PROGRESS_BAR    = `${ CLASS_PROGRESS }__bar`;\r\nexport const CLASS_TOGGLE          = `${ CLASS_PREFIX }toggle`;\r\nexport const CLASS_TOGGLE_PLAY     = `${ CLASS_TOGGLE }__play`;\r\nexport const CLASS_TOGGLE_PAUSE    = `${ CLASS_TOGGLE }__pause`;\r\nexport const CLASS_SPINNER         = `${ CLASS_PREFIX }spinner`;\r\nexport const CLASS_SR              = `${ CLASS_PREFIX }sr`;\r\nexport const CLASS_INITIALIZED     = `${ STATUS_CLASS_PREFIX }initialized`;\r\nexport const CLASS_ACTIVE          = `${ STATUS_CLASS_PREFIX }active`;\r\nexport const CLASS_PREV            = `${ STATUS_CLASS_PREFIX }prev`;\r\nexport const CLASS_NEXT            = `${ STATUS_CLASS_PREFIX }next`;\r\nexport const CLASS_VISIBLE         = `${ STATUS_CLASS_PREFIX }visible`;\r\nexport const CLASS_LOADING         = `${ STATUS_CLASS_PREFIX }loading`;\r\nexport const CLASS_FOCUS_IN        = `${ STATUS_CLASS_PREFIX }focus-in`;\r\nexport const CLASS_OVERFLOW        = `${ STATUS_CLASS_PREFIX }overflow`;\r\n\r\n/**\r\n * The array with all status classes except for `is-initialized`.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const STATUS_CLASSES = [\r\n  CLASS_ACTIVE,\r\n  CLASS_VISIBLE,\r\n  CLASS_PREV,\r\n  CLASS_NEXT,\r\n  CLASS_LOADING,\r\n  CLASS_FOCUS_IN,\r\n  CLASS_OVERFLOW,\r\n];\r\n\r\n/**\r\n * The collection of classes for elements that Splide dynamically creates.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const CLASSES = {\r\n  slide     : CLASS_SLIDE,\r\n  clone     : CLASS_CLONE,\r\n  arrows    : CLASS_ARROWS,\r\n  arrow     : CLASS_ARROW,\r\n  prev      : CLASS_ARROW_PREV,\r\n  next      : CLASS_ARROW_NEXT,\r\n  pagination: CLASS_PAGINATION,\r\n  page      : CLASS_PAGINATION_PAGE,\r\n  spinner   : CLASS_SPINNER,\r\n};\r\n","import { PROJECT_CODE } from '../../../constants/project';\r\n\r\n\r\n/**\r\n * Throws an error if the provided condition is falsy.\r\n *\r\n * @param condition - If falsy, an error is thrown.\r\n * @param message   - Optional. A message to display.\r\n */\r\nexport function assert( condition: any, message?: string ): void {\r\n  if ( ! condition ) {\r\n    throw new Error( `[${ PROJECT_CODE }] ${ message || '' }` );\r\n  }\r\n}\r\n","/**\r\n * The power of the friction.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const FRICTION = 5;\r\n\r\n/**\r\n * If the user stops dragging for this duration with keeping the pointer down, updates the base coord and time.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const LOG_INTERVAL = 200;\r\n\r\n/**\r\n * Start events for dragging.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const POINTER_DOWN_EVENTS = 'touchstart mousedown';\r\n\r\n/**\r\n * Update events for dragging.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const POINTER_MOVE_EVENTS = 'touchmove mousemove';\r\n\r\n/**\r\n * End events for dragging.\r\n * The `click` event is required because the browser sometimes dispatches `drag` events instead of `mouse`.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const POINTER_UP_EVENTS = 'touchend touchcancel mouseup click';\r\n","/**\r\n * The type for the regular slider.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const SLIDE = 'slide';\r\n\r\n/**\r\n * The type for the carousel slider.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const LOOP = 'loop';\r\n\r\n/**\r\n * The type for the fade slider that can not have multiple slides in a page.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const FADE = 'fade';\r\n","import {\r\n  ALL_ATTRIBUTES,\r\n  ARIA_CONTROLS,\r\n  ARIA_CURRENT,\r\n  ARIA_HIDDEN,\r\n  ARIA_LABEL,\r\n  ARIA_ROLEDESCRIPTION,\r\n  ROLE,\r\n  TAB_INDEX,\r\n} from '../../constants/attributes';\r\nimport {\r\n  CLASS_ACTIVE,\r\n  CLASS_CONTAINER,\r\n  CLASS_NEXT,\r\n  CLASS_PREV,\r\n  CLASS_VISIBLE,\r\n  STATUS_CLASSES,\r\n} from '../../constants/classes';\r\nimport {\r\n  EVENT_ACTIVE,\r\n  EVENT_CLICK,\r\n  EVENT_HIDDEN,\r\n  EVENT_INACTIVE,\r\n  EVENT_MOVE,\r\n  EVENT_MOVED,\r\n  EVENT_NAVIGATION_MOUNTED,\r\n  EVENT_SCROLLED,\r\n  EVENT_SHIFTED,\r\n  EVENT_SLIDE_KEYDOWN,\r\n  EVENT_VISIBLE,\r\n} from '../../constants/events';\r\nimport { MOVING, SCROLLING } from '../../constants/states';\r\nimport { FADE, LOOP } from '../../constants/types';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent } from '../../types';\r\nimport {\r\n  abs,\r\n  apply,\r\n  ceil,\r\n  child,\r\n  CSSProperties,\r\n  floor,\r\n  focus,\r\n  format,\r\n  getAttribute,\r\n  hasClass,\r\n  min,\r\n  pad,\r\n  queryAll,\r\n  rect,\r\n  removeAttribute,\r\n  removeClass,\r\n  setAttribute,\r\n  style as _style,\r\n  toggleClass,\r\n} from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The interface for the Slide sub component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface  SlideComponent extends BaseComponent {\r\n  index: number;\r\n  slideIndex: number;\r\n  slide: HTMLElement;\r\n  container: HTMLElement;\r\n  isClone: boolean;\r\n  update(): void;\r\n  style( prop: CSSProperties, value: string | number, useContainer?: boolean ): void\r\n  isWithin( from: number, distance: number ): boolean;\r\n}\r\n\r\n/**\r\n * The subcomponent for managing each slide.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param index      - A slide index.\r\n * @param slideIndex - A slide index for clones. This must be `-1` if the slide is not a clone.\r\n * @param slide      - A slide element.\r\n *\r\n * @return A Slide subcomponent.\r\n */\r\nexport function Slide( Splide: Splide, index: number, slideIndex: number, slide: HTMLElement ): SlideComponent {\r\n  const event = Splide.event.create();\r\n  const { on, emit, bind } = event;\r\n  const { Components, root, options } = Splide;\r\n  const { isNavigation, updateOnMove, i18n, pagination, slideFocus } = options;\r\n  const { resolve } = Components.Direction;\r\n  const styles    = getAttribute( slide, 'style' );\r\n  const label     = getAttribute( slide, ARIA_LABEL );\r\n  const isClone   = slideIndex > -1;\r\n  const container = child( slide, `.${ CLASS_CONTAINER }` );\r\n\r\n  /**\r\n   * Turns into `true` when the component is destroyed.\r\n   */\r\n  let destroyed: boolean;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount( this: SlideComponent ): void {\r\n    if ( ! isClone ) {\r\n      slide.id = `${ root.id }-slide${ pad( index + 1 ) }`;\r\n      setAttribute( slide, ROLE, pagination ? 'tabpanel' : 'group' );\r\n      setAttribute( slide, ARIA_ROLEDESCRIPTION, i18n.slide );\r\n      setAttribute( slide, ARIA_LABEL, label || format( i18n.slideLabel, [ index + 1, Splide.length ] ) );\r\n    }\r\n\r\n    listen();\r\n  }\r\n\r\n  /**\r\n   * Listens to some events.\r\n   */\r\n  function listen(): void {\r\n    bind( slide, 'click', apply( emit, EVENT_CLICK, self ) );\r\n    bind( slide, 'keydown', apply( emit, EVENT_SLIDE_KEYDOWN, self ) );\r\n    on( [ EVENT_MOVED, EVENT_SHIFTED, EVENT_SCROLLED ], update );\r\n    on( EVENT_NAVIGATION_MOUNTED, initNavigation );\r\n\r\n    if ( updateOnMove ) {\r\n      on( EVENT_MOVE, onMove );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    destroyed = true;\r\n    event.destroy();\r\n    removeClass( slide, STATUS_CLASSES );\r\n    removeAttribute( slide, ALL_ATTRIBUTES );\r\n    setAttribute( slide, 'style', styles );\r\n    setAttribute( slide, ARIA_LABEL, label || '' );\r\n  }\r\n\r\n  /**\r\n   * Initializes slides as navigation.\r\n   */\r\n  function initNavigation(): void {\r\n    const controls = Splide.splides.map( target => {\r\n      const Slide = target.splide.Components.Slides.getAt( index );\r\n      return Slide ? Slide.slide.id : '';\r\n    } ).join( ' ' );\r\n\r\n    setAttribute( slide, ARIA_LABEL, format( i18n.slideX, ( isClone ? slideIndex : index ) + 1 ) );\r\n    setAttribute( slide, ARIA_CONTROLS, controls );\r\n    setAttribute( slide, ROLE, slideFocus ? 'button' : '' );\r\n    slideFocus && removeAttribute( slide, ARIA_ROLEDESCRIPTION );\r\n  }\r\n\r\n  /**\r\n   * If the `updateOnMove` option is `true`, called when the slider starts moving.\r\n   */\r\n  function onMove(): void {\r\n    if ( ! destroyed ) {\r\n      update();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates attribute and classes of the slide.\r\n   */\r\n  function update(): void {\r\n    if ( ! destroyed ) {\r\n      const { index: curr } = Splide;\r\n\r\n      updateActivity();\r\n      updateVisibility();\r\n      toggleClass( slide, CLASS_PREV, index === curr - 1 );\r\n      toggleClass( slide, CLASS_NEXT, index === curr + 1 );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the status related with activity.\r\n   */\r\n  function updateActivity(): void {\r\n    const active = isActive();\r\n\r\n    if ( active !== hasClass( slide, CLASS_ACTIVE ) ) {\r\n      toggleClass( slide, CLASS_ACTIVE, active );\r\n      setAttribute( slide, ARIA_CURRENT, isNavigation && active || '' );\r\n      emit( active ? EVENT_ACTIVE : EVENT_INACTIVE, self );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates classes and attributes related with visibility.\r\n   * - Do not update aria-hidden on shifting to avoid Window Narrator from start reading contents.\r\n   * - If the slide has focus and gets hidden, moves focus to the active slide.\r\n   */\r\n  function updateVisibility(): void {\r\n    const visible = isVisible();\r\n    const hidden = ! visible && ( ! isActive() || isClone );\r\n\r\n    if ( ! Splide.state.is( [ MOVING, SCROLLING ] ) ) {\r\n      setAttribute( slide, ARIA_HIDDEN, hidden || '' );\r\n    }\r\n\r\n    setAttribute( queryAll( slide, options.focusableNodes || '' ), TAB_INDEX, hidden ? -1 : '' );\r\n\r\n    if ( slideFocus ) {\r\n      setAttribute( slide, TAB_INDEX, hidden ? -1 : 0 );\r\n    }\r\n\r\n    if ( visible !== hasClass( slide, CLASS_VISIBLE ) ) {\r\n      toggleClass( slide, CLASS_VISIBLE, visible );\r\n      emit( visible ? EVENT_VISIBLE : EVENT_HIDDEN, self );\r\n    }\r\n\r\n    if ( ! visible && document.activeElement === slide ) {\r\n      const Slide = Components.Slides.getAt( Splide.index );\r\n      Slide && focus( Slide.slide );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds a CSS rule to the slider or the container.\r\n   *\r\n   * @param prop         - A property name.\r\n   * @param value        - A CSS value to add.\r\n   * @param useContainer - Optional. Determines whether to apply the rule to the container or not.\r\n   */\r\n  function style( prop: CSSProperties, value: string | number, useContainer?: boolean ): void {\r\n    _style( ( useContainer && container ) || slide, prop, value );\r\n  }\r\n\r\n  /**\r\n   * Checks if the slide is active or not.\r\n   *\r\n   * @return `true` if the slide is active.\r\n   */\r\n  function isActive(): boolean {\r\n    const { index: curr } = Splide;\r\n    return curr === index || ( options.cloneStatus && curr === slideIndex );\r\n  }\r\n\r\n  /**\r\n   * Checks if the slide is visible or not.\r\n   */\r\n  function isVisible(): boolean {\r\n    if ( Splide.is( FADE ) ) {\r\n      return isActive();\r\n    }\r\n\r\n    const trackRect = rect( Components.Elements.track );\r\n    const slideRect = rect( slide );\r\n    const left      = resolve( 'left', true );\r\n    const right     = resolve( 'right', true );\r\n\r\n    return floor( trackRect[ left ] ) <= ceil( slideRect[ left ] )\r\n      && floor( slideRect[ right ] ) <= ceil( trackRect[ right ] );\r\n  }\r\n\r\n  /**\r\n   * Calculates how far this slide is from another slide and\r\n   * returns `true` if the distance is within the given number.\r\n   *\r\n   * @param from     - An index of a base slide.\r\n   * @param distance - `true` if the slide is within this number.\r\n   *\r\n   * @return `true` if the slide is within the `distance` from the base slide, or otherwise `false`.\r\n   */\r\n  function isWithin( from: number, distance: number ): boolean {\r\n    let diff = abs( from - index );\r\n\r\n    if ( ! isClone && ( options.rewind || Splide.is( LOOP ) ) ) {\r\n      diff = min( diff, Splide.length - diff );\r\n    }\r\n\r\n    return diff <= distance;\r\n  }\r\n\r\n  const self = {\r\n    index,\r\n    slideIndex,\r\n    slide,\r\n    container,\r\n    isClone,\r\n    mount,\r\n    destroy,\r\n    update,\r\n    style,\r\n    isWithin,\r\n  };\r\n\r\n  return self;\r\n}\r\n","import { DATA_ATTRIBUTE } from '../../constants/project';\r\n\r\n\r\n/**\r\n * The data attribute for the autoplay interval duration.\r\n *\r\n * @since 3.5.0\r\n */\r\nexport const INTERVAL_DATA_ATTRIBUTE = `${ DATA_ATTRIBUTE }-interval`;\r\n","/**\r\n * AddEventListenerOptions for listeners that may prevent the browser scroll.\r\n *\r\n * @since 3.4.1\r\n */\r\nexport const SCROLL_LISTENER_OPTIONS = { passive: false, capture: true };\r\n","import { DATA_ATTRIBUTE } from '../../constants/project';\r\n\r\n\r\n/**\r\n * The data attribute for the src value.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const SRC_DATA_ATTRIBUTE = `${ DATA_ATTRIBUTE }-lazy`;\r\n\r\n/**\r\n * The data attribute for the srcset value.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const SRCSET_DATA_ATTRIBUTE = `${ SRC_DATA_ATTRIBUTE }-srcset`;\r\n\r\n/**\r\n * The selector string for images to load.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const IMAGE_SELECTOR = `[${ SRC_DATA_ATTRIBUTE }], [${ SRCSET_DATA_ATTRIBUTE }]`;\r\n","import { ARIA_ORIENTATION } from '../../constants/attributes';\r\nimport { TTB } from '../../constants/directions';\r\nimport {\r\n  EVENT_CLICK,\r\n  EVENT_MOUNTED,\r\n  EVENT_MOVE,\r\n  EVENT_NAVIGATION_MOUNTED,\r\n  EVENT_SLIDE_KEYDOWN,\r\n  EVENT_UPDATED,\r\n} from '../../constants/events';\r\nimport { LOOP } from '../../constants/types';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { apply, empty, EventInterface, includes, isUndefined, prevent, setAttribute } from '@splidejs/utils';\r\nimport { SlideComponent } from '../Slides/Slide';\r\n\r\n\r\n/**\r\n * The interface for the Sync component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface SyncComponent extends BaseComponent {\r\n  remount(): void;\r\n}\r\n\r\n/**\r\n * The keys for triggering the navigation slide.\r\n *\r\n * @since 3.0.0\r\n */\r\nconst TRIGGER_KEYS = [ ' ', 'Enter' ];\r\n\r\n/**\r\n * The component for syncing multiple sliders.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface object.\r\n *\r\n * @return A Sync component object.\r\n */\r\nexport function Sync(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): SyncComponent {\r\n  const { isNavigation, slideFocus } = options;\r\n\r\n  /**\r\n   * Stores event objects.\r\n   */\r\n  const events: EventInterface[] = []; // todo\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    Splide.splides.forEach( target => {\r\n      if ( ! target.isParent ) {\r\n        sync( Splide, target.splide );\r\n        sync( target.splide, Splide );\r\n      }\r\n    } );\r\n\r\n    if ( isNavigation ) {\r\n      navigate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    events.forEach( event => { event.destroy() } );\r\n    empty( events );\r\n  }\r\n\r\n  /**\r\n   * Remounts the component.\r\n   *\r\n   * @internal\r\n   */\r\n  function remount(): void {\r\n    destroy();\r\n    mount();\r\n  }\r\n\r\n  /**\r\n   * Syncs the current index with a provided child splide instance.\r\n   *\r\n   * @param splide - A splide instance to sync with.\r\n   * @param target - A target splide instance.\r\n   */\r\n  function sync( splide: Splide, target: Splide ): void {\r\n    const event = splide.event.create();\r\n\r\n    event.on( EVENT_MOVE, ( index, prev, dest ) => {\r\n      target.go( target.is( LOOP ) ? dest : index );\r\n    } );\r\n\r\n    events.push( event );\r\n  }\r\n\r\n  /**\r\n   * Makes slides clickable and moves the slider to the index of clicked slide.\r\n   * Note that the direction of `menu` is implicitly `vertical` as default.\r\n   */\r\n  function navigate(): void {\r\n    const ev = event.create();\r\n    const { on } = ev;\r\n\r\n    on( EVENT_CLICK, onClick );\r\n    on( EVENT_SLIDE_KEYDOWN, onKeydown );\r\n    on( [ EVENT_MOUNTED, EVENT_UPDATED ], update );\r\n\r\n    events.push( ev );\r\n    ev.emit( EVENT_NAVIGATION_MOUNTED, Splide.splides );\r\n  }\r\n\r\n  /**\r\n   * Update attributes.\r\n   */\r\n  function update(): void {\r\n    setAttribute(\r\n      Components.Elements.list,\r\n      ARIA_ORIENTATION,\r\n      options.direction === TTB ? 'vertical' : ''\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Called when the navigation slide is clicked.\r\n   *\r\n   * @param Slide - A clicked Slide component.\r\n   */\r\n  function onClick( Slide: SlideComponent ): void {\r\n    Splide.go( Slide.index );\r\n  }\r\n\r\n  /**\r\n   * Called when any key is pressed on the navigation slide.\r\n   *\r\n   * @param Slide - A Slide component.\r\n   * @param e     - A KeyboardEvent object.\r\n   */\r\n  function onKeydown( Slide: SlideComponent, e: KeyboardEvent ): void {\r\n    if ( includes( TRIGGER_KEYS, e.key ) ) {\r\n      onClick( Slide );\r\n      prevent( e );\r\n    }\r\n  }\r\n\r\n  return {\r\n    setup: apply(\r\n      Components.Media.set,\r\n      { slideFocus: isUndefined( slideFocus ) ? isNavigation : slideFocus },\r\n      true\r\n    ),\r\n    mount,\r\n    destroy,\r\n    remount,\r\n  };\r\n}\r\n","import { MEDIA_PREFERS_REDUCED_MOTION } from '../../constants/media';\r\nimport { CREATED, DESTROYED } from '../../constants/states';\r\nimport { EventBinder, merge, omit, ownKeys } from '@splidejs/utils';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { EVENT_UPDATED } from '../../constants/events';\r\n\r\n\r\n/**\r\n * The interface for the Media component.\r\n *\r\n * @since 4.0.0\r\n */\r\nexport interface MediaComponent extends BaseComponent {\r\n  /** @internal */\r\n  reduce( reduced: boolean ): void;\r\n  set( options: Options, base?: boolean, notify?: boolean ): void;\r\n}\r\n\r\n/**\r\n * The component for observing media queries and updating options if necessary.\r\n * This used to be the Options component.\r\n *\r\n * @since 4.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n *\r\n * @return A Media component object.\r\n */\r\nexport function Media( Splide: Splide, Components: Components, options: Options ): MediaComponent {\r\n  const { state } = Splide;\r\n  const breakpoints   = options.breakpoints || {};\r\n  const reducedMotion = options.reducedMotion || {};\r\n  const binder        = EventBinder();\r\n\r\n  /**\r\n   * Stores options and MediaQueryList object.\r\n   */\r\n  const queries: Array<[ Options, MediaQueryList ]> = [];\r\n\r\n  /**\r\n   * Called when the component is constructed.\r\n   */\r\n  function setup(): void {\r\n    const isMin = options.mediaQuery === 'min';\r\n\r\n    ownKeys( breakpoints )\r\n      .sort( ( n, m ) => isMin ? +n - +m : +m - +n )\r\n      .forEach( key => {\r\n        register( breakpoints[ key ], `(${ isMin ? 'min' : 'max' }-width:${ key }px)` );\r\n      } );\r\n\r\n    register( reducedMotion, MEDIA_PREFERS_REDUCED_MOTION );\r\n    update();\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   *\r\n   * @param completely - Will be `true` for complete destruction.\r\n   */\r\n  function destroy( completely: boolean ): void {\r\n    if ( completely ) {\r\n      binder.destroy();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registers entries as [ Options, media query string ].\r\n   *\r\n   * @param options - Options merged to current options when the document matches the query.\r\n   * @param query   - A query string.\r\n   */\r\n  function register( options: Options, query: string ): void {\r\n    const queryList = matchMedia( query );\r\n    binder.bind( queryList, 'change', update );\r\n    queries.push( [ options, queryList ] );\r\n  }\r\n\r\n  /**\r\n   * Checks all media queries in entries and updates options.\r\n   */\r\n  function update(): void {\r\n    const destroyed = state.is( DESTROYED );\r\n    const direction = options.direction;\r\n    const merged = queries.reduce<Options>( ( merged, entry ) => {\r\n      return merge( merged, entry[ 1 ].matches ? entry[ 0 ] : {} );\r\n    }, {} );\r\n\r\n    omit( options );\r\n    set( merged );\r\n\r\n    if ( options.destroy ) {\r\n      Splide.destroy( options.destroy === 'completely' );\r\n    } else if ( destroyed ) {\r\n      destroy( true );\r\n      Splide.mount();\r\n    } else {\r\n      direction !== options.direction && Splide.refresh();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disables or enables `reducedMotion` options.\r\n   * This method does nothing when the document does not match the query.\r\n   *\r\n   * @internal\r\n   *\r\n   * @param enable - Determines whether to apply `reducedMotion` options or not.\r\n   */\r\n  function reduce( enable: boolean ): void {\r\n    if ( matchMedia( MEDIA_PREFERS_REDUCED_MOTION ).matches ) {\r\n      enable ? merge( options, reducedMotion ) : omit( options, ownKeys( reducedMotion ) );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets current options or base options (prototype).\r\n   * If changing base options, always emits the `updated` event.\r\n   *\r\n   * @internal\r\n   *\r\n   * @param opts   - New options.\r\n   * @param base   - Optional. Determines whether to also update base options or not.\r\n   * @param notify - Optional. If `true`, always emits the `update` event.\r\n   */\r\n  function set( opts: Options, base?: boolean, notify?: boolean ): void {\r\n    merge( options, opts );\r\n    base && merge( Object.getPrototypeOf( options ), opts );\r\n\r\n    if ( notify || ! state.is( CREATED ) ) {\r\n      Splide.emit( EVENT_UPDATED, options );\r\n    }\r\n  }\r\n\r\n  return {\r\n    setup,\r\n    destroy,\r\n    reduce,\r\n    set,\r\n  };\r\n}\r\n","import { ALL_ATTRIBUTES, ARIA_LABEL, ARIA_LABELLEDBY, ARIA_ROLEDESCRIPTION, ROLE } from '../../constants/attributes';\r\nimport {\r\n  CLASS_ACTIVE,\r\n  CLASS_ARROW_NEXT,\r\n  CLASS_ARROW_PREV,\r\n  CLASS_ARROWS,\r\n  CLASS_CLONE,\r\n  CLASS_FOCUS_IN,\r\n  CLASS_LIST,\r\n  CLASS_PAGINATION,\r\n  CLASS_PROGRESS_BAR,\r\n  CLASS_ROOT,\r\n  CLASS_SLIDE,\r\n  CLASS_TOGGLE,\r\n  CLASS_TRACK,\r\n} from '../../constants/classes';\r\nimport { EVENT_REFRESH, EVENT_UPDATED } from '../../constants/events';\r\nimport { PROJECT_CODE } from '../../constants/project';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport {\r\n  addClass,\r\n  assign,\r\n  child,\r\n  children,\r\n  closest,\r\n  empty,\r\n  EventInterface,\r\n  getAttribute,\r\n  push,\r\n  query,\r\n  removeAttribute,\r\n  removeClass,\r\n  setAttribute,\r\n  toggleClass,\r\n  uniqueId,\r\n} from '@splidejs/utils';\r\nimport { assert } from '../../utils';\r\nimport { POINTER_DOWN_EVENTS } from '../Drag/constants';\r\n\r\n\r\n/**\r\n * The interface for elements which the slider consists of.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ElementCollection {\r\n  root: HTMLElement;\r\n  track: HTMLElement;\r\n  list: HTMLElement;\r\n  slides: HTMLElement[];\r\n  arrows?: HTMLElement;\r\n  pagination?: HTMLUListElement;\r\n  prev?: HTMLButtonElement;\r\n  next?: HTMLButtonElement;\r\n  bar?: HTMLElement;\r\n  toggle?: HTMLElement;\r\n}\r\n\r\n/**\r\n * The interface for the Elements component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ElementsComponent extends BaseComponent, ElementCollection {\r\n}\r\n\r\n/**\r\n * The component that collects and handles elements which the slider consists of.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return An Elements component object.\r\n */\r\nexport function Elements(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): ElementsComponent {\r\n  const { on, bind } = event;\r\n  const { root } = Splide;\r\n  const { i18n } = options;\r\n  const elements: ElementCollection = {} as ElementCollection;\r\n\r\n  /**\r\n   * Stores all slide elements.\r\n   */\r\n  const slides: HTMLElement[] = [];\r\n\r\n  /**\r\n   * Stores all root classes.\r\n   */\r\n  let rootClasses: string[] = [];\r\n\r\n  /**\r\n   * Stores all list classes.\r\n   */\r\n  let trackClasses: string[] = [];\r\n\r\n  /**\r\n   * The track element.\r\n   */\r\n  let track: HTMLElement;\r\n\r\n  /**\r\n   * The list element.\r\n   */\r\n  let list: HTMLElement;\r\n\r\n  /**\r\n   * Turns into `true` when detecting keydown, and `false` when detecting pointerdown.\r\n   */\r\n  let isUsingKey: boolean;\r\n\r\n  /**\r\n   * Called when the component is constructed.\r\n   */\r\n  function setup(): void {\r\n    collect();\r\n    init();\r\n    update();\r\n  }\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    on( EVENT_REFRESH, destroy );\r\n    on( EVENT_REFRESH, setup );\r\n    on( EVENT_UPDATED, update );\r\n\r\n    bind( document, `${ POINTER_DOWN_EVENTS } keydown`, e => {\r\n      isUsingKey = e.type === 'keydown';\r\n    }, { capture: true } );\r\n\r\n    bind( root, 'focusin', () => {\r\n      toggleClass( root, CLASS_FOCUS_IN, !! isUsingKey );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   *\r\n   * @param completely - Whether to destroy the component completely or not.\r\n   */\r\n  function destroy( completely?: boolean ): void {\r\n    const attrs = ALL_ATTRIBUTES.concat( 'style' );\r\n\r\n    empty( slides );\r\n    removeClass( root, rootClasses );\r\n    removeClass( track, trackClasses );\r\n    removeAttribute( [ track, list ], attrs );\r\n    removeAttribute( root, completely ? attrs : [ 'style', ARIA_ROLEDESCRIPTION ] );\r\n  }\r\n\r\n  /**\r\n   * Updates the status of elements.\r\n   */\r\n  function update(): void {\r\n    removeClass( root, rootClasses );\r\n    removeClass( track, trackClasses );\r\n\r\n    rootClasses  = getClasses( CLASS_ROOT );\r\n    trackClasses = getClasses( CLASS_TRACK );\r\n\r\n    addClass( root, rootClasses );\r\n    addClass( track, trackClasses );\r\n\r\n    setAttribute( root, ARIA_LABEL, options.label );\r\n    setAttribute( root, ARIA_LABELLEDBY, options.labelledby );\r\n  }\r\n\r\n  /**\r\n   * Collects elements which the slider consists of.\r\n   */\r\n  function collect(): void {\r\n    track = find( CLASS_TRACK );\r\n    list  = child( track, `.${ CLASS_LIST }` );\r\n\r\n    assert( track && list, 'A track/list element is missing.' );\r\n    push( slides, children( list, `.${ CLASS_SLIDE }:not(.${ CLASS_CLONE })` ) );\r\n\r\n    assign( elements, {\r\n      root,\r\n      track,\r\n      list,\r\n      slides,\r\n      arrows    : find( CLASS_ARROWS ),\r\n      pagination: find( CLASS_PAGINATION ),\r\n      prev      : find( CLASS_ARROW_PREV ),\r\n      next      : find( CLASS_ARROW_NEXT ),\r\n      bar       : find( CLASS_PROGRESS_BAR ),\r\n      toggle    : find( CLASS_TOGGLE ),\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Initializes essential elements.\r\n   * Note that do not change the role of the root element,\r\n   * which removes the region from the accessibility tree.\r\n   */\r\n  function init(): void {\r\n    const id   = root.id || uniqueId( PROJECT_CODE );\r\n    const role = options.role;\r\n\r\n    root.id  = id;\r\n    track.id = track.id || `${ id }-track`;\r\n    list.id  = list.id || `${ id }-list`;\r\n\r\n    if ( ! getAttribute( root, ROLE ) && root.tagName !== 'SECTION' && role ) {\r\n      setAttribute( root, ROLE, role );\r\n    }\r\n\r\n    setAttribute( root, ARIA_ROLEDESCRIPTION, i18n.carousel );\r\n    setAttribute( list, ROLE, 'presentation' );\r\n  }\r\n\r\n  /**\r\n   * Finds an element only in this slider, ignoring elements in a nested slider.\r\n   *\r\n   * @param className - A class name.\r\n   *\r\n   * @return A found element or null.\r\n   */\r\n  function find( className: string ): HTMLElement | undefined {\r\n    const elm = query<HTMLElement>( root, `.${ className }` );\r\n    return elm && closest( elm, `.${ CLASS_ROOT }` ) === root ? elm : undefined;\r\n  }\r\n\r\n  /**\r\n   * Return an array with modifier classes.\r\n   *\r\n   * @param base - A base class name.\r\n   *\r\n   * @return An array with classes.\r\n   */\r\n  function getClasses( base: string ): string[] {\r\n    return [\r\n      `${ base }--${ options.type }`,\r\n      `${ base }--${ options.direction }`,\r\n      options.drag && `${ base }--draggable`,\r\n      options.isNavigation && `${ base }--nav`,\r\n      base === CLASS_ROOT && CLASS_ACTIVE,\r\n    ];\r\n  }\r\n\r\n  return assign( elements, {\r\n    setup,\r\n    mount,\r\n    destroy,\r\n  } );\r\n}\r\n","import { EVENT_REFRESH, EVENT_RESIZE } from '../../constants/events';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { AnyFunction, BaseComponent, Components, Options } from '../../types';\r\nimport {\r\n  addClass,\r\n  append,\r\n  apply,\r\n  before,\r\n  between, CSSProperties,\r\n  empty,\r\n  EventInterface,\r\n  forEach as forEachItem,\r\n  includes,\r\n  isFunction,\r\n  isHTMLElement,\r\n  isString,\r\n  matches,\r\n  parseHtml,\r\n  queryAll,\r\n  removeNode,\r\n  toArray,\r\n} from '@splidejs/utils';\r\nimport { Slide, SlideComponent } from './Slide';\r\n\r\n\r\n/**\r\n * The interface for the Slides component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface SlidesComponent extends BaseComponent {\r\n  update(): void;\r\n  register( slide: HTMLElement, index: number, slideIndex: number ): void;\r\n  get( excludeClones?: boolean ): SlideComponent[];\r\n  getIn( page: number ): SlideComponent[];\r\n  getAt( index: number ): SlideComponent | undefined;\r\n  add( slide: string | Element | Array<string | Element>, index?: number ): void;\r\n  remove( selector: SlideMatcher ): void;\r\n  forEach( iteratee: SlidesIteratee, excludeClones?: boolean ): void;\r\n  filter( matcher: SlideMatcher ): SlideComponent[];\r\n  style( prop: string, value: string | number, useContainer?: boolean ): void\r\n  getLength( excludeClones?: boolean ): number;\r\n  isEnough(): boolean;\r\n}\r\n\r\n/**\r\n * The iteratee function for Slides.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport type SlidesIteratee = ( Slide: SlideComponent, index: number, Slides: SlideComponent[] ) => void\r\n\r\n/**\r\n * The predicate function for Slides.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport type SlidesPredicate = ( Slide: SlideComponent, index: number, Slides: SlideComponent[] ) => any\r\n\r\n/**\r\n * The type for filtering SlideComponent objects.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport type SlideMatcher = number | number[] | string | SlidesPredicate;\r\n\r\n/**\r\n * The component for managing all slides include clones.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return An Slides component object.\r\n */\r\nexport function Slides(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): SlidesComponent {\r\n  const { on, emit, bind } = event;\r\n  const { slides, list } = Components.Elements;\r\n\r\n  /**\r\n   * Stores all SlideComponent objects.\r\n   */\r\n  const Slides: SlideComponent[] = [];\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on( EVENT_REFRESH, destroy );\r\n    on( EVENT_REFRESH, init );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   */\r\n  function init(): void {\r\n    slides.forEach( ( slide, index ) => { register( slide, index, -1 ) } );\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    forEach( Slide => { Slide.destroy() } );\r\n    empty( Slides );\r\n  }\r\n\r\n  /**\r\n   * Manually updates the status of all slides.\r\n   */\r\n  function update(): void {\r\n    forEach( Slide => { Slide.update() } );\r\n  }\r\n\r\n  /**\r\n   * Registers a slide element and creates a Slide object.\r\n   * Needs to sort every time when a new slide is registered especially for clones.\r\n   *\r\n   * @param slide      - A slide element to register.\r\n   * @param index      - A slide index.\r\n   * @param slideIndex - A slide index for clones. This must be `-1` for regular slides.\r\n   */\r\n  function register( slide: HTMLElement, index: number, slideIndex: number ): void {\r\n    const object = Slide( Splide, index, slideIndex, slide );\r\n    object.mount();\r\n    Slides.push( object );\r\n    Slides.sort( ( Slide1, Slide2 ) => Slide1.index - Slide2.index );\r\n  }\r\n\r\n  /**\r\n   * Returns all Slide objects.\r\n   *\r\n   * @param excludeClones - Optional. Determines whether to exclude clones or not.\r\n   *\r\n   * @return An array with Slide objects.\r\n   */\r\n  function get( excludeClones?: boolean ): SlideComponent[] {\r\n    return excludeClones ? filter( Slide => ! Slide.isClone ) : Slides;\r\n  }\r\n\r\n  /**\r\n   * Returns slides in the specified page.\r\n   *\r\n   * @param page - A page index.\r\n   *\r\n   * @return An array with slides that belong to the page.\r\n   */\r\n  function getIn( page: number ): SlideComponent[] {\r\n    const { Controller } = Components;\r\n    const index = Controller.toIndex( page );\r\n    const max   = Controller.hasFocus() ? 1 : options.perPage;\r\n    return filter( Slide => between( Slide.index, index, index + max - 1 ) );\r\n  }\r\n\r\n  /**\r\n   * Returns a Slide object at the specified index.\r\n   *\r\n   * @param index - A slide index.\r\n   *\r\n   * @return A Slide object if available, or otherwise `undefined`.\r\n   */\r\n  function getAt( index: number ): SlideComponent | undefined {\r\n    return filter( index )[ 0 ];\r\n  }\r\n\r\n  /**\r\n   * Inserts a slide or slides at a specified index.\r\n   *\r\n   * @param items - A slide element, an HTML string or an array with them.\r\n   * @param index - Optional. An index to insert the slide at. If omitted, appends it to the list.\r\n   */\r\n  function add( items: string | Element | Array<string | Element>, index?: number ): void {\r\n    forEachItem( items, slide => {\r\n      if ( isString( slide ) ) {\r\n        slide = parseHtml( slide );\r\n      }\r\n\r\n      if ( isHTMLElement( slide ) ) {\r\n        const ref = slides[ index ];\r\n        ref ? before( slide, ref ) : append( list, slide );\r\n        addClass( slide, options.classes.slide );\r\n        observeImages( slide, apply( emit, EVENT_RESIZE ) );\r\n      }\r\n    } );\r\n\r\n    emit( EVENT_REFRESH );\r\n  }\r\n\r\n  /**\r\n   * Removes slides that match the matcher\r\n   * that can be an index, an array with indices, a selector, or an iteratee function.\r\n   *\r\n   * @param matcher - An index, an array with indices, a selector string, or an iteratee function.\r\n   */\r\n  function remove( matcher: SlideMatcher ): void {\r\n    removeNode( filter( matcher ).map( Slide => Slide.slide ) );\r\n    emit( EVENT_REFRESH );\r\n  }\r\n\r\n  /**\r\n   * Iterates over Slide objects by the iteratee function.\r\n   *\r\n   * @param iteratee      - An iteratee function that takes a Slide object, an index and an array with Slides.\r\n   * @param excludeClones - Optional. Determines whether to exclude clones or not.\r\n   */\r\n  function forEach( iteratee: SlidesIteratee, excludeClones?: boolean ): void {\r\n    get( excludeClones ).forEach( iteratee );\r\n  }\r\n\r\n  /**\r\n   * Filters Slides by the matcher\r\n   * that can be an index, an array with indices, a selector, or a predicate function.\r\n   *\r\n   * @param matcher - An index, an array with indices, a selector string, or a predicate function.\r\n   *\r\n   * @return An array with SlideComponent objects.\r\n   */\r\n  function filter( matcher: SlideMatcher ): SlideComponent[] {\r\n    return Slides.filter( isFunction( matcher )\r\n      ? matcher\r\n      : Slide => isString( matcher )\r\n        ? matches( Slide.slide, matcher )\r\n        : includes( toArray( matcher ), Slide.index )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Adds a CSS rule to all slides or containers.\r\n   *\r\n   * @param prop         - A property name.\r\n   * @param value        - A CSS value to add.\r\n   * @param useContainer - Optional. Determines whether to apply the rule to the container or not.\r\n   */\r\n  function style( prop: CSSProperties, value: string | number, useContainer?: boolean ): void {\r\n    forEach( Slide => { Slide.style( prop, value, useContainer ) } );\r\n  }\r\n\r\n  /**\r\n   * Invokes the callback after all images in the element are loaded.\r\n   *\r\n   * @param elm      - An element that may contain images.\r\n   * @param callback - A callback function.\r\n   */\r\n  function observeImages( elm: Element, callback: AnyFunction ): void {\r\n    const images = queryAll( elm, 'img' );\r\n    let { length } = images;\r\n\r\n    if ( length ) {\r\n      images.forEach( img => {\r\n        bind( img, 'load error', () => {\r\n          if ( ! --length ) {\r\n            callback();\r\n          }\r\n        } );\r\n      } );\r\n    } else {\r\n      callback();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the length of slides.\r\n   *\r\n   * @param excludeClones - Optional. Determines whether to exclude clones or not.\r\n   *\r\n   * @return The length of slides.\r\n   */\r\n  function getLength( excludeClones?: boolean ): number {\r\n    return excludeClones ? slides.length : Slides.length;\r\n  }\r\n\r\n  /**\r\n   * Checks if the number of slides is over than the `perPage` option, including clones.\r\n   *\r\n   * @return `true` if there are enough slides, or otherwise `false`.\r\n   */\r\n  function isEnough(): boolean {\r\n    return Slides.length > options.perPage;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy,\r\n    update,\r\n    register,\r\n    get,\r\n    getIn,\r\n    getAt,\r\n    add,\r\n    remove,\r\n    forEach,\r\n    filter,\r\n    style,\r\n    getLength,\r\n    isEnough,\r\n  };\r\n}\r\n","import { TTB } from '../../constants/directions';\r\nimport { EVENT_OVERFLOW, EVENT_REFRESH, EVENT_RESIZE, EVENT_RESIZED, EVENT_UPDATED } from '../../constants/events';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { abs, apply, EventInterface, isObject, rect, style, Throttle, toggleClass, unit } from '@splidejs/utils';\r\nimport { assert } from '../../utils';\r\nimport { FADE } from '../../constants/types';\r\nimport { CLASS_OVERFLOW } from '../../constants/classes';\r\n\r\n\r\n/**\r\n * The interface for the Layout component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface LayoutComponent extends BaseComponent {\r\n  listSize(): number;\r\n  slideSize( index: number, withoutGap?: boolean ): number;\r\n  sliderSize( withoutGap?: boolean ): number;\r\n  totalSize( index?: number, withoutGap?: boolean ): number;\r\n  getPadding( right: boolean ): number;\r\n  isOverflow(): boolean;\r\n\r\n  /** @internal */\r\n  resize( force?: boolean ): void;\r\n}\r\n\r\n/**\r\n * The component that adjusts slider styles and provides methods for dimensions.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return An Layout component object.\r\n */\r\nexport function Layout(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): LayoutComponent {\r\n  const { on, bind, emit } = event;\r\n  const { Slides } = Components;\r\n  const { resolve } = Components.Direction;\r\n  const { root, track, list } = Components.Elements;\r\n  const { getAt, style: styleSlides } = Slides;\r\n\r\n  /**\r\n   * Indicates whether the slider direction is vertical or not.\r\n   */\r\n  let vertical: boolean;\r\n\r\n  /**\r\n   * Keeps the DOMRect object of the root element.\r\n   */\r\n  let rootRect: DOMRect;\r\n\r\n  /**\r\n   * Turns into `true` when the carousel is wider than the list.\r\n   */\r\n  let overflow: boolean;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    bind( window, 'resize load', Throttle( apply( emit, EVENT_RESIZE ) ) );\r\n    on( [ EVENT_UPDATED, EVENT_REFRESH ], init );\r\n    on( EVENT_RESIZE, resize );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component on `mount` or `updated`.\r\n   * Uses `max-width` for the root to prevent the slider from exceeding the parent element.\r\n   */\r\n  function init(): void {\r\n    vertical = options.direction === TTB;\r\n\r\n    style( root, 'maxWidth', unit( options.width ) );\r\n    style( track, resolve( 'paddingLeft' ), cssPadding( false ) );\r\n    style( track, resolve( 'paddingRight' ), cssPadding( true ) );\r\n\r\n    resize( true );\r\n  }\r\n\r\n  /**\r\n   * Updates dimensions of some elements when the carousel is resized.\r\n   * Also checks the carousel size and emits `overflow` events when it exceeds the list width.\r\n   *\r\n   * @param force - Skips checking the root dimension change and always performs the resizing process.\r\n   */\r\n  function resize( force?: boolean ): void {\r\n    const newRect = rect( root );\r\n\r\n    if ( force || rootRect.width !== newRect.width || rootRect.height !== newRect.height ) {\r\n      style( track, 'height', cssTrackHeight() );\r\n\r\n      styleSlides( resolve( 'marginRight' ), unit( options.gap ) );\r\n      styleSlides( 'width', cssSlideWidth() );\r\n      styleSlides( 'height', cssSlideHeight(), true );\r\n\r\n      rootRect = newRect;\r\n      emit( EVENT_RESIZED );\r\n\r\n      if ( overflow !== ( overflow = isOverflow() ) ) {\r\n        toggleClass( root, CLASS_OVERFLOW, overflow );\r\n        emit( EVENT_OVERFLOW, overflow );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses the padding option and returns the value for each side.\r\n   * This method returns `paddingTop` or `paddingBottom` for the vertical slider.\r\n   *\r\n   * @param right - Determines whether to get `paddingRight/Bottom` or `paddingLeft/Top`.\r\n   *\r\n   * @return The padding value as a CSS string.\r\n   */\r\n  function cssPadding( right: boolean ): string {\r\n    const { padding } = options;\r\n    const prop = resolve( right ? 'right' : 'left' );\r\n    return padding\r\n      && unit( padding[ prop ] || ( isObject( padding ) ? 0 : padding ) )\r\n      || '0px';\r\n  }\r\n\r\n  /**\r\n   * Returns the height of the track element as a CSS string.\r\n   *\r\n   * @return The height of the track.\r\n   */\r\n  function cssTrackHeight(): string {\r\n    let height = '';\r\n\r\n    if ( vertical ) {\r\n      height = cssHeight();\r\n      assert( height, 'height or heightRatio is missing.' );\r\n      height = `calc(${ height } - ${ cssPadding( false ) } - ${ cssPadding( true ) })`;\r\n    }\r\n\r\n    return height;\r\n  }\r\n\r\n  /**\r\n   * Converts options related with height to a CSS string.\r\n   *\r\n   * @return The height as a CSS string if available, or otherwise an empty string.\r\n   */\r\n  function cssHeight(): string {\r\n    return unit( options.height || rect( list ).width * options.heightRatio );\r\n  }\r\n\r\n  /**\r\n   * Returns the width of the slide as a CSS string.\r\n   *\r\n   * @return The width of the slide.\r\n   */\r\n  function cssSlideWidth(): string | null {\r\n    return options.autoWidth\r\n      ? null\r\n      : unit( options.fixedWidth ) || ( vertical ? '' : cssSlideSize() );\r\n  }\r\n\r\n  /**\r\n   * Returns the height of the slide as a CSS string.\r\n   *\r\n   * @return The height of the slide.\r\n   */\r\n  function cssSlideHeight(): string | null {\r\n    return unit( options.fixedHeight )\r\n      || ( vertical ? ( options.autoHeight ? null : cssSlideSize() ) : cssHeight() );\r\n  }\r\n\r\n  /**\r\n   * Returns the CSS string for slide width or height without gap.\r\n   *\r\n   * @return The CSS string for slide width or height.\r\n   */\r\n  function cssSlideSize(): string {\r\n    const gap = unit( options.gap );\r\n    return `calc((100%${ gap && ` + ${ gap }` })/${ options.perPage || 1 }${ gap && ` - ${ gap }` })`;\r\n  }\r\n\r\n  /**\r\n   * Returns the list width for the horizontal slider, or the height for the vertical slider.\r\n   *\r\n   * @return The size of the list element in pixel.\r\n   */\r\n  function listSize(): number {\r\n    return rect( list )[ resolve( 'width' ) ];\r\n  }\r\n\r\n  /**\r\n   * Returns the slide width for the horizontal slider, or the height for the vertical slider.\r\n   *\r\n   * @param index      - Optional. A slide index.\r\n   * @param withoutGap - Optional. Determines whether to exclude the gap amount or not.\r\n   *\r\n   * @return The size of the specified slide element in pixel.\r\n   */\r\n  function slideSize( index?: number, withoutGap?: boolean ): number {\r\n    const Slide = getAt( index || 0 );\r\n    return Slide\r\n      ? rect( Slide.slide )[ resolve( 'width' ) ] + ( withoutGap ? 0 : getGap() )\r\n      : 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the total width or height of slides from the head of the slider to the specified index.\r\n   * This includes sizes of clones before the first slide.\r\n   *\r\n   * @param index      - A slide index. If omitted, uses the last index.\r\n   * @param withoutGap - Optional. Determines whether to exclude the last gap or not.\r\n   *\r\n   * @return The total width of slides in the horizontal slider, or the height in the vertical one.\r\n   */\r\n  function totalSize( index: number, withoutGap?: boolean ): number {\r\n    const Slide = getAt( index );\r\n\r\n    if ( Slide ) {\r\n      const right = rect( Slide.slide )[ resolve( 'right' ) ];\r\n      const left  = rect( list )[ resolve( 'left' ) ];\r\n      return abs( right - left ) + ( withoutGap ? 0 : getGap() );\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the slider size without clones before the first slide.\r\n   * Do not use the clone's size because it's unstable while initializing and refreshing process.\r\n   *\r\n   * @param withoutGap - Optional. Determines whether to exclude the last gap or not.\r\n   *\r\n   * @return The width or height of the slider without clones.\r\n   */\r\n  function sliderSize( withoutGap?: boolean ): number {\r\n    return totalSize( Splide.length - 1 ) - totalSize( 0 ) + slideSize( 0, withoutGap );\r\n  }\r\n\r\n  /**\r\n   * Returns the gap value in pixel by using the computed style of the first slide.\r\n   *\r\n   * @return The gap value in pixel.\r\n   */\r\n  function getGap(): number {\r\n    const Slide = getAt( 0 );\r\n    return Slide && parseFloat( style( Slide.slide, resolve( 'marginRight' ) ) ) || 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the padding value.\r\n   * This method resolves the difference of the direction.\r\n   *\r\n   * @param right - Determines whether to get `paddingRight/Bottom` or `paddingLeft/Top`.\r\n   *\r\n   * @return The padding value in pixel.\r\n   */\r\n  function getPadding( right: boolean ): number {\r\n    return parseFloat( style(\r\n      track,\r\n      resolve( `padding${ right ? 'Right' : 'Left' }` )\r\n    ) ) || 0;\r\n  }\r\n\r\n  /**\r\n   * Checks if the carousel is wider than the list.\r\n   * This method always returns `true` for a fade carousel.\r\n   *\r\n   * @return `true` if the carousel is wider than the list, or otherwise `false`.\r\n   */\r\n  function isOverflow(): boolean {\r\n    return Splide.is( FADE ) || sliderSize( true ) > listSize();\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    resize,\r\n    listSize,\r\n    slideSize,\r\n    sliderSize,\r\n    totalSize,\r\n    getPadding,\r\n    isOverflow,\r\n  };\r\n}\r\n","import { EVENT_REFRESH, EVENT_RESIZE, EVENT_UPDATED } from '../../constants/events';\r\nimport { LOOP } from '../../constants/types';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport {\r\n  addClass,\r\n  append,\r\n  before,\r\n  ceil,\r\n  empty,\r\n  EventInterface,\r\n  isUndefined,\r\n  pad,\r\n  push,\r\n  rect,\r\n  removeNode,\r\n} from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The interface for the Clone component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ClonesComponent extends BaseComponent {\r\n}\r\n\r\n/**\r\n * The multiplier to determine the number of clones.\r\n *\r\n * @since 4.0.0\r\n */\r\nexport const MULTIPLIER = 2;\r\n\r\n/**\r\n * The component that generates clones for the loop slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Clones component object.\r\n */\r\nexport function Clones(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): ClonesComponent {\r\n  const { on } = event;\r\n  const { Elements, Slides } = Components;\r\n  const { resolve } = Components.Direction;\r\n\r\n  /**\r\n   * Stores all cloned elements.\r\n   */\r\n  const clones: HTMLElement[] = [];\r\n\r\n  /**\r\n   * Keeps the current number of clones.\r\n   */\r\n  let cloneCount: number;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   * Needs to remount the component on refresh, otherwise `refresh` event will be triggered again while refreshing.\r\n   */\r\n  function mount(): void {\r\n    on( EVENT_REFRESH, remount );\r\n    on( [ EVENT_UPDATED, EVENT_RESIZE ], observe );\r\n\r\n    if ( ( cloneCount = computeCloneCount() ) ) {\r\n      generate( cloneCount );\r\n      Components.Layout.resize( true );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remounts the component.\r\n   */\r\n  function remount(): void {\r\n    destroy();\r\n    mount();\r\n  }\r\n\r\n  /**\r\n   * Destroys clones.\r\n   */\r\n  function destroy(): void {\r\n    removeNode( clones );\r\n    empty( clones );\r\n    event.destroy();\r\n  }\r\n\r\n  /**\r\n   * Observes the required clone count and refreshes the slider if necessary.\r\n   */\r\n  function observe(): void {\r\n    const count = computeCloneCount();\r\n\r\n    if ( cloneCount !== count ) {\r\n      if ( cloneCount < count || ! count ) {\r\n        event.emit( EVENT_REFRESH );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates the specified number of clones.\r\n   *\r\n   * @param count - The number of clones to generate for each side.\r\n   */\r\n  function generate( count: number ): void {\r\n    const slides = Slides.get().slice();\r\n    const { length } = slides;\r\n\r\n    if ( length ) {\r\n      while ( slides.length < count ) {\r\n        push( slides, slides );\r\n      }\r\n\r\n      push( slides.slice( -count ), slides.slice( 0, count ) ).forEach( ( Slide, index ) => {\r\n        const isHead = index < count;\r\n        const clone  = cloneDeep( Slide.slide, index );\r\n        isHead ? before( clone, slides[ 0 ].slide ) : append( Elements.list, clone );\r\n        push( clones, clone );\r\n        Slides.register( clone, index - count + ( isHead ? 0 : length ), Slide.index );\r\n      } );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deeply clones the provided element with removing the ID attribute.\r\n   *\r\n   * @param elm   - An element to clone.\r\n   * @param index - An index of the clone.\r\n   *\r\n   * @return A cloned element.\r\n   */\r\n  function cloneDeep( elm: HTMLElement, index: number ): HTMLElement {\r\n    const clone = elm.cloneNode( true ) as HTMLElement;\r\n    addClass( clone, options.classes.clone );\r\n    clone.id = `${ Splide.root.id }-clone${ pad( index + 1 ) }`;\r\n    return clone;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of elements to generate.\r\n   * This always returns 0 if the slider type is not `'loop'`.\r\n   *\r\n   * @return The number of clones.\r\n   */\r\n  function computeCloneCount(): number {\r\n    let { clones } = options;\r\n\r\n    if ( ! Splide.is( LOOP ) ) {\r\n      clones = 0;\r\n    } else if ( isUndefined( clones ) ) {\r\n      const fixedSize  = options[ resolve( 'fixedWidth' ) ] && Components.Layout.slideSize( 0 );\r\n      const fixedCount = fixedSize && ceil( rect( Elements.track )[ resolve( 'width' ) ] / fixedSize );\r\n      clones = fixedCount || ( options[ resolve( 'autoWidth' ) ] && Splide.length ) || options.perPage * MULTIPLIER;\r\n    }\r\n\r\n    return clones;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy,\r\n  };\r\n}\r\n","import {\r\n  EVENT_MOUNTED,\r\n  EVENT_MOVE,\r\n  EVENT_MOVED,\r\n  EVENT_REFRESH,\r\n  EVENT_RESIZED,\r\n  EVENT_SHIFTED,\r\n  EVENT_UPDATED,\r\n} from '../../constants/events';\r\nimport { IDLE, MOVING } from '../../constants/states';\r\nimport { FADE, LOOP, SLIDE } from '../../constants/types';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { AnyFunction, BaseComponent, Components, Options, TransitionComponent } from '../../types';\r\nimport { abs, ceil, clamp, EventInterface, isUndefined, rect, style } from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The interface for the Move component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface MoveComponent extends BaseComponent {\r\n  move( dest: number, index: number, prev: number, callback?: AnyFunction ): void;\r\n  jump( index: number ): void;\r\n  translate( position: number, preventLoop?: boolean ): void;\r\n  shift( position: number, backwards: boolean ): number;\r\n  cancel(): void;\r\n  toIndex( position: number ): number;\r\n  toPosition( index: number, trimming?: boolean ): number;\r\n  getPosition(): number;\r\n  getLimit( max: boolean ): number;\r\n  exceededLimit( max?: boolean | undefined, position?: number ): boolean;\r\n\r\n  /** @internal */\r\n  reposition(): void;\r\n}\r\n\r\n/**\r\n * The component for moving the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Move component object.\r\n */\r\nexport function Move(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): MoveComponent {\r\n  const { on, emit } = event;\r\n  const { set } = Splide.state;\r\n  const { slideSize, getPadding, totalSize, listSize, sliderSize } = Components.Layout;\r\n  const { resolve, orient } = Components.Direction;\r\n  const { list, track } = Components.Elements;\r\n\r\n  /**\r\n   * Holds the Transition component.\r\n   */\r\n  let Transition: TransitionComponent;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    Transition = Components.Transition;\r\n    on( [ EVENT_MOUNTED, EVENT_RESIZED, EVENT_UPDATED, EVENT_REFRESH ], reposition );\r\n  }\r\n\r\n  /**\r\n   * Repositions the slider.\r\n   * - Do not call `cancel()` here because LazyLoad may emit resize while transitioning.\r\n   * - iOS Safari emits window resize event while the user swipes the slider because of the bottom bar.\r\n   */\r\n  function reposition(): void {\r\n    if ( ! Components.Controller.isBusy() ) {\r\n      Components.Scroll.cancel();\r\n      jump( Splide.index );\r\n      Components.Slides.update();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Moves the slider to the dest index with the Transition component.\r\n   *\r\n   * @param dest     - A destination index to go to, including clones'.\r\n   * @param index    - A slide index.\r\n   * @param prev     - A previous index.\r\n   * @param callback - Optional. A callback function invoked after transition ends.\r\n   */\r\n  function move( dest: number, index: number, prev: number, callback?: AnyFunction ): void {\r\n    if ( dest !== index && canShift( dest > prev ) ) {\r\n      cancel();\r\n      translate( shift( getPosition(), dest > prev ), true );\r\n    }\r\n\r\n    set( MOVING );\r\n    emit( EVENT_MOVE, index, prev, dest );\r\n\r\n    Transition.start( index, () => {\r\n      set( IDLE );\r\n      emit( EVENT_MOVED, index, prev, dest );\r\n      callback && callback();\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Jumps to the slide at the specified index.\r\n   *\r\n   * @param index - An index to jump to.\r\n   */\r\n  function jump( index: number ): void {\r\n    translate( toPosition( index, true ) );\r\n  }\r\n\r\n  /**\r\n   * Moves the slider to the provided position.\r\n   *\r\n   * @param position    - The position to move to.\r\n   * @param preventLoop - Optional. If `true`, sets the provided position as is.\r\n   */\r\n  function translate( position: number, preventLoop?: boolean ): void {\r\n    if ( ! Splide.is( FADE ) ) {\r\n      const destination = preventLoop ? position : loop( position );\r\n      style( list, 'transform', `translate${ resolve( 'X' ) }(${ destination }px)` );\r\n      position !== destination && emit( EVENT_SHIFTED );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Loops the provided position if it exceeds bounds (limit indices).\r\n   *\r\n   * @param position - A position to loop.\r\n   */\r\n  function loop( position: number ): number {\r\n    if ( Splide.is( LOOP ) ) {\r\n      const index       = toIndex( position );\r\n      const exceededMax = index > Components.Controller.getEnd();\r\n      const exceededMin = index < 0;\r\n\r\n      if ( exceededMin || exceededMax ) {\r\n        position = shift( position, exceededMax );\r\n      }\r\n    }\r\n\r\n    return position;\r\n  }\r\n\r\n  /**\r\n   * Adds or subtracts the slider width to the provided position.\r\n   *\r\n   * @param position  - A position to shift.\r\n   * @param backwards - Determines whether to shift the slider backwards or forwards.\r\n   *\r\n   * @return The shifted position.\r\n   */\r\n  function shift( position: number, backwards: boolean ): number {\r\n    const excess = position - getLimit( backwards );\r\n    const size   = sliderSize();\r\n    position -= orient( size * ( ceil( abs( excess ) / size ) || 1 ) ) * ( backwards ? 1 : -1 );\r\n    return position;\r\n  }\r\n\r\n  /**\r\n   * Cancels transition.\r\n   */\r\n  function cancel(): void {\r\n    translate( getPosition(), true );\r\n    Transition.cancel();\r\n  }\r\n\r\n  /**\r\n   * Returns the closest index to the position.\r\n   *\r\n   * @param position - A position to convert.\r\n   *\r\n   * @return The closest index to the position.\r\n   */\r\n  function toIndex( position: number ): number {\r\n    const Slides = Components.Slides.get();\r\n\r\n    let index       = 0;\r\n    let minDistance = Infinity;\r\n\r\n    for ( let i = 0; i < Slides.length; i++ ) {\r\n      const slideIndex = Slides[ i ].index;\r\n      const distance   = abs( toPosition( slideIndex, true ) - position );\r\n\r\n      if ( distance <= minDistance ) {\r\n        minDistance = distance;\r\n        index       = slideIndex;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * Converts the slide index to the position.\r\n   *\r\n   * @param index    - An index to convert.\r\n   * @param trimming - Optional. Whether to trim edge spaces or not.\r\n   *\r\n   * @return The position corresponding with the index.\r\n   */\r\n  function toPosition( index: number, trimming?: boolean ): number {\r\n    const position = orient( totalSize( index - 1 ) - offset( index ) );\r\n    return trimming ? trim( position ) : position;\r\n  }\r\n\r\n  /**\r\n   * Returns the current position.\r\n   *\r\n   * @return The position of the list element.\r\n   */\r\n  function getPosition(): number {\r\n    const left = resolve( 'left' );\r\n    return rect( list )[ left ] - rect( track )[ left ] + orient( getPadding( false ) );\r\n  }\r\n\r\n  /**\r\n   * Trims spaces on the edge of the slider.\r\n   *\r\n   * @param position - A position to trim.\r\n   *\r\n   * @return A trimmed position.\r\n   */\r\n  function trim( position: number ): number {\r\n    if ( options.trimSpace && Splide.is( SLIDE ) ) {\r\n      position = clamp( position, 0, orient( sliderSize( true ) - listSize() ) );\r\n    }\r\n\r\n    return position;\r\n  }\r\n\r\n  /**\r\n   * Returns the offset amount.\r\n   *\r\n   * @param index - An index.\r\n   */\r\n  function offset( index: number ): number {\r\n    const { focus } = options;\r\n    return focus === 'center' ? ( listSize() - slideSize( index, true ) ) / 2 : +focus * slideSize( index ) || 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the limit number that the slider can move to.\r\n   *\r\n   * @param max - Determines whether to return the maximum or minimum limit.\r\n   *\r\n   * @return The border number.\r\n   */\r\n  function getLimit( max: boolean ): number {\r\n    return toPosition( max ? Components.Controller.getEnd() : 0, !! options.trimSpace );\r\n  }\r\n\r\n  /**\r\n   * Checks if there is enough width to shift the slider.\r\n   *\r\n   * @param backwards - `true` for checking backwards, or `false` for doing forwards.\r\n   *\r\n   * @return `true` if the slider can be shifted for the specified direction, or otherwise `false`.\r\n   */\r\n  function canShift( backwards: boolean ): boolean {\r\n    const shifted = orient( shift( getPosition(), backwards ) );\r\n    return backwards\r\n      ? shifted >= 0\r\n      : shifted <= list[ resolve( 'scrollWidth' ) ] - rect( track )[ resolve( 'width' ) ];\r\n  }\r\n\r\n  /**\r\n   * Checks if the provided position exceeds the minimum or maximum limit or not.\r\n   *\r\n   * @param max      - Optional. `true` for testing max, `false` for min, and `undefined` for both.\r\n   * @param position - Optional. A position to test. If omitted, tests the current position.\r\n   *\r\n   * @return `true` if the position exceeds the limit, or otherwise `false`.\r\n   */\r\n  function exceededLimit( max?: boolean | undefined, position?: number ): boolean {\r\n    position = isUndefined( position ) ? getPosition() : position;\r\n    const exceededMin = max !== true && orient( position ) < orient( getLimit( false ) );\r\n    const exceededMax = max !== false && orient( position ) > orient( getLimit( true ) );\r\n    return exceededMin || exceededMax;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    move,\r\n    jump,\r\n    translate,\r\n    shift,\r\n    cancel,\r\n    toIndex,\r\n    toPosition,\r\n    getPosition,\r\n    getLimit,\r\n    exceededLimit,\r\n    reposition,\r\n  };\r\n}\r\n","import { EVENT_END_INDEX_CHANGED, EVENT_REFRESH, EVENT_RESIZED, EVENT_UPDATED } from '../../constants/events';\r\nimport { MOVING, SCROLLING } from '../../constants/states';\r\nimport { LOOP, SLIDE } from '../../constants/types';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { AnyFunction, BaseComponent, Components, Options } from '../../types';\r\nimport {\r\n  apply,\r\n  approximatelyEqual,\r\n  between,\r\n  clamp,\r\n  EventInterface,\r\n  floor,\r\n  isString,\r\n  isUndefined,\r\n  min,\r\n} from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The interface for the Controller component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ControllerComponent extends BaseComponent {\r\n  go( control: number | string, allowSameIndex?: boolean, callback?: AnyFunction ): void;\r\n  scroll( destination: number, duration?: number, snap?: boolean, callback?: AnyFunction ): void;\r\n  getNext( destination?: boolean ): number;\r\n  getPrev( destination?: boolean ): number;\r\n  getEnd(): number;\r\n  setIndex( index: number ): void;\r\n  getIndex( prev?: boolean ): number;\r\n  toIndex( page: number ): number;\r\n  toPage( index: number ): number;\r\n  toDest( position: number ): number;\r\n  hasFocus(): boolean;\r\n  isBusy(): boolean;\r\n\r\n  /** @internal */\r\n  getAdjacent( prev: boolean, destination?: boolean ): number;\r\n}\r\n\r\n/**\r\n * The component for controlling the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Controller component object.\r\n */\r\nexport function Controller(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): ControllerComponent {\r\n  const { on, emit } = event;\r\n  const { Move } = Components;\r\n  const { getPosition, getLimit, toPosition } = Move;\r\n  const { isEnough, getLength } = Components.Slides;\r\n  const { omitEnd } = options;\r\n  const isLoop  = Splide.is( LOOP );\r\n  const isSlide = Splide.is( SLIDE );\r\n  const getNext = apply( getAdjacent, false );\r\n  const getPrev = apply( getAdjacent, true );\r\n\r\n  /**\r\n   * The current index.\r\n   */\r\n  let currIndex = options.start || 0;\r\n\r\n  /**\r\n   * The latest end index.\r\n   */\r\n  let endIndex: number;\r\n\r\n  /**\r\n   * The previous index.\r\n   */\r\n  let prevIndex = currIndex;\r\n\r\n  /**\r\n   * The latest number of slides.\r\n   */\r\n  let slideCount: number;\r\n\r\n  /**\r\n   * The latest `perMove` value.\r\n   */\r\n  let perMove: number;\r\n\r\n  /**\r\n   * The latest `perMove` value.\r\n   */\r\n  let perPage: number;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on( [ EVENT_UPDATED, EVENT_REFRESH, EVENT_END_INDEX_CHANGED ], init );\r\n    on( EVENT_RESIZED, onResized );\r\n  }\r\n\r\n  /**\r\n   * Initializes some parameters.\r\n   * Needs to check the number of slides since the current index may be out of the range after refresh.\r\n   * The process order must be Elements -> Controller -> Move.\r\n   */\r\n  function init(): void {\r\n    slideCount = getLength( true );\r\n    perMove    = options.perMove;\r\n    perPage    = options.perPage;\r\n    endIndex   = getEnd();\r\n\r\n    const index = clamp( currIndex, 0, omitEnd ? endIndex : slideCount - 1 );\r\n\r\n    if ( index !== currIndex ) {\r\n      currIndex = index;\r\n      Move.reposition();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the viewport width is changed.\r\n   * The end index can change if `autoWidth` or `fixedWidth` is enabled.\r\n   */\r\n  function onResized(): void {\r\n    if ( endIndex !== getEnd() ) {\r\n      emit( EVENT_END_INDEX_CHANGED );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Moves the slider by the control pattern.\r\n   *\r\n   * @see `Splide#go()`\r\n   *\r\n   * @param control        - A control pattern.\r\n   * @param allowSameIndex - Optional. Determines whether to allow going to the current index or not.\r\n   * @param callback       - Optional. A callback function invoked after transition ends.\r\n   */\r\n  function go( control: number | string, allowSameIndex?: boolean, callback?: AnyFunction ): void {\r\n    if ( ! isBusy() ) {\r\n      const dest  = parse( control );\r\n      const index = loop( dest );\r\n\r\n      if ( index > -1 && ( allowSameIndex || index !== currIndex ) ) {\r\n        setIndex( index );\r\n        Move.move( dest, index, prevIndex, callback );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Scrolls the slider to the specified destination with updating indices.\r\n   *\r\n   * @param destination - The position to scroll the slider to.\r\n   * @param duration    - Optional. Specifies the scroll duration.\r\n   * @param snap        - Optional. Whether to snap the slider to the closest slide or not.\r\n   * @param callback    - Optional. A callback function invoked after scroll ends.\r\n   */\r\n  function scroll( destination: number, duration?: number, snap?: boolean, callback?: AnyFunction ): void {\r\n    Components.Scroll.scroll( destination, duration, snap, () => {\r\n      const index = loop( Move.toIndex( getPosition() ) );\r\n      setIndex( omitEnd ? min( index, endIndex ) : index );\r\n      callback && callback();\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Parses the control and returns a slide index.\r\n   *\r\n   * @param control - A control pattern to parse.\r\n   *\r\n   * @return A `dest` index.\r\n   */\r\n  function parse( control: number | string ): number {\r\n    let index = currIndex;\r\n\r\n    if ( isString( control ) ) {\r\n      const [ , indicator, number ] = control.match( /([+\\-<>])(\\d+)?/ ) || [];\r\n\r\n      if ( indicator === '+' || indicator === '-' ) {\r\n        index = computeDestIndex( currIndex + +`${ indicator }${ +number || 1 }`, currIndex );\r\n      } else if ( indicator === '>' ) {\r\n        index = number ? toIndex( +number ) : getNext( true );\r\n      } else if ( indicator === '<' ) {\r\n        index = getPrev( true );\r\n      }\r\n    } else {\r\n      index = isLoop ? control : clamp( control, 0, endIndex );\r\n    }\r\n\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * Returns an adjacent destination index.\r\n   *\r\n   * @internal\r\n   *\r\n   * @param prev        - Determines whether to return a previous or next index.\r\n   * @param destination - Optional. Determines whether to get a destination index or a slide one.\r\n   *\r\n   * @return An adjacent index if available, or otherwise `-1`.\r\n   */\r\n  function getAdjacent( prev: boolean, destination?: boolean ): number {\r\n    const number = perMove || ( hasFocus() ? 1 : perPage );\r\n    const dest   = computeDestIndex( currIndex + number * ( prev ? -1 : 1 ), currIndex, ! ( perMove || hasFocus() ) );\r\n\r\n    if ( dest === -1 && isSlide ) {\r\n      if ( ! approximatelyEqual( getPosition(), getLimit( ! prev ), 1 ) ) {\r\n        return prev ? 0 : endIndex;\r\n      }\r\n    }\r\n\r\n    return destination ? dest : loop( dest );\r\n  }\r\n\r\n  /**\r\n   * Converts the desired destination index to the valid one.\r\n   * - If the `move` option is `true`, finds the dest index whose position is different with the current one.\r\n   * - This may return clone indices if the editor is the loop mode,\r\n   *   or `-1` if there is no slide to go.\r\n   * - There are still slides where the carousel can go if borders are between `from` and `dest`.\r\n   * - If `focus` is available, needs to calculate the dest index even if there are enough number of slides.\r\n   *\r\n   * @param dest     - The desired destination index.\r\n   * @param from     - A base index.\r\n   * @param snapPage - Optional. Whether to snap a page or not.\r\n   *\r\n   * @return A converted destination index, including clones.\r\n   */\r\n  function computeDestIndex( dest: number, from: number, snapPage?: boolean ): number {\r\n    if ( isEnough() || hasFocus() ) {\r\n      const index = computeMovableDestIndex( dest );\r\n\r\n      if ( index !== dest ) {\r\n        from     = dest;\r\n        dest     = index;\r\n        snapPage = false;\r\n      }\r\n\r\n      if ( dest < 0 || dest > endIndex ) {\r\n        if ( ! perMove && ( between( 0, dest, from, true ) || between( endIndex, from, dest, true ) ) ) {\r\n          dest = toIndex( toPage( dest ) );\r\n        } else {\r\n          if ( isLoop ) {\r\n            dest = snapPage\r\n              ? dest < 0 ? - ( slideCount % perPage || perPage ) : slideCount\r\n              : dest;\r\n          } else if ( options.rewind ) {\r\n            dest = dest < 0 ? endIndex : 0;\r\n          } else {\r\n            dest = -1;\r\n          }\r\n        }\r\n      } else {\r\n        if ( snapPage && dest !== from ) {\r\n          dest = toIndex( toPage( from ) + ( dest < from ? -1 : 1 ) );\r\n        }\r\n      }\r\n    } else {\r\n      dest = -1;\r\n    }\r\n\r\n    return dest;\r\n  }\r\n\r\n  /**\r\n   * Finds the dest index whose position is different with the current one for `trimSpace: 'move'`.\r\n   * This can be negative or greater than `length - 1`.\r\n   *\r\n   * @param dest - A dest index.\r\n   *\r\n   * @return A dest index.\r\n   */\r\n  function computeMovableDestIndex( dest: number ): number {\r\n    if ( isSlide && options.trimSpace === 'move' && dest !== currIndex ) {\r\n      const position = getPosition();\r\n\r\n      while ( position === toPosition( dest, true ) && between( dest, 0, Splide.length - 1, ! options.rewind ) ) {\r\n        dest < currIndex ? --dest : ++dest;\r\n      }\r\n    }\r\n\r\n    return dest;\r\n  }\r\n\r\n  /**\r\n   * Loops the provided index only in the loop mode.\r\n   *\r\n   * @param index - An index to loop.\r\n   *\r\n   * @return A looped index.\r\n   */\r\n  function loop( index: number ): number {\r\n    return isLoop ? ( index + slideCount ) % slideCount || 0 : index;\r\n  }\r\n\r\n  /**\r\n   * Returns the end index where the slider can go.\r\n   * For example, if the slider has 10 slides and the `perPage` option is 3,\r\n   * the slider can go to the slide 8 (the index is 7).\r\n   * If the `omitEnd` option is available, computes the index from the slide position.\r\n   *\r\n   * @return An end index.\r\n   */\r\n  function getEnd(): number {\r\n    let end = slideCount - ( hasFocus() || ( isLoop && perMove ) ? 1 : perPage );\r\n\r\n    while ( omitEnd && end-- > 0 ) {\r\n      if ( toPosition( slideCount - 1, true ) !== toPosition( end, true ) ) {\r\n        end++;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return clamp( end, 0, slideCount - 1 );\r\n  }\r\n\r\n  /**\r\n   * Converts the page index to the slide index.\r\n   *\r\n   * @param page - A page index to convert.\r\n   *\r\n   * @return A slide index.\r\n   */\r\n  function toIndex( page: number ): number {\r\n    return clamp( hasFocus() ? page : perPage * page, 0, endIndex );\r\n  }\r\n\r\n  /**\r\n   * Converts the slide index to the page index.\r\n   *\r\n   * @param index - An index to convert.\r\n   *\r\n   * @return A page index.\r\n   */\r\n  function toPage( index: number ): number {\r\n    return hasFocus()\r\n      ? min( index, endIndex )\r\n      : floor( ( index >= endIndex ? slideCount - 1 : index ) / perPage );\r\n  }\r\n\r\n  /**\r\n   * Converts the destination position to the dest index.\r\n   *\r\n   * @param destination - A position to convert.\r\n   *\r\n   * @return A dest index.\r\n   */\r\n  function toDest( destination: number ): number {\r\n    const closest = Move.toIndex( destination );\r\n    return isSlide ? clamp( closest, 0, endIndex ) : closest;\r\n  }\r\n\r\n  /**\r\n   * Sets a new index and retains old one.\r\n   *\r\n   * @param index - A new index to set.\r\n   */\r\n  function setIndex( index: number ): void {\r\n    if ( index !== currIndex ) {\r\n      prevIndex = currIndex;\r\n      currIndex = index;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the current/previous index.\r\n   *\r\n   * @param prev - Optional. Whether to return previous index or not.\r\n   */\r\n  function getIndex( prev?: boolean ): number {\r\n    return prev ? prevIndex : currIndex;\r\n  }\r\n\r\n  /**\r\n   * Verifies if the focus option is available or not.\r\n   *\r\n   * @return `true` if the slider has the focus option.\r\n   */\r\n  function hasFocus(): boolean {\r\n    return ! isUndefined( options.focus ) || options.isNavigation;\r\n  }\r\n\r\n  /**\r\n   * Checks if the slider is moving/scrolling or not.\r\n   *\r\n   * @return `true` if the slider can move, or otherwise `false`.\r\n   */\r\n  function isBusy(): boolean {\r\n    return Splide.state.is( [ MOVING, SCROLLING ] ) && !! options.waitForTransition;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    go,\r\n    scroll,\r\n    getNext,\r\n    getPrev,\r\n    getAdjacent,\r\n    getEnd,\r\n    setIndex,\r\n    getIndex,\r\n    toIndex,\r\n    toPage,\r\n    toDest,\r\n    hasFocus,\r\n    isBusy,\r\n  };\r\n}\r\n","import { ALL_ATTRIBUTES, ARIA_CONTROLS, ARIA_LABEL } from '../../constants/attributes';\r\nimport { CLASS_ARROWS } from '../../constants/classes';\r\nimport {\r\n  EVENT_ARROWS_MOUNTED,\r\n  EVENT_ARROWS_UPDATED,\r\n  EVENT_END_INDEX_CHANGED,\r\n  EVENT_MOUNTED,\r\n  EVENT_MOVED,\r\n  EVENT_REFRESH,\r\n  EVENT_SCROLLED,\r\n  EVENT_UPDATED,\r\n} from '../../constants/events';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport {\r\n  addClass,\r\n  append,\r\n  apply,\r\n  assign,\r\n  before,\r\n  create,\r\n  display,\r\n  EventInterface,\r\n  parseHtml,\r\n  removeNode,\r\n  removeAttribute,\r\n  removeClass,\r\n  setAttribute,\r\n} from '@splidejs/utils';\r\nimport { PATH, SIZE, XML_NAME_SPACE } from './path';\r\n\r\n\r\n/**\r\n * The interface for the Arrows component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ArrowsComponent extends BaseComponent {\r\n  arrows: { prev?: HTMLButtonElement, next?: HTMLButtonElement };\r\n\r\n  /** @internal */\r\n  update(): void;\r\n}\r\n\r\n/**\r\n * The component for handling previous and next arrows.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return An Arrows component object.\r\n */\r\nexport function Arrows(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): ArrowsComponent {\r\n  const { on, bind, emit } = event;\r\n  const { classes, i18n } = options;\r\n  const { Elements, Controller } = Components;\r\n  const { arrows: placeholder, track } = Elements;\r\n\r\n  /**\r\n   * The wrapper element.\r\n   */\r\n  let wrapper = placeholder;\r\n\r\n  /**\r\n   * The previous arrow element.\r\n   */\r\n  let prev = Elements.prev;\r\n\r\n  /**\r\n   * The next arrow element.\r\n   */\r\n  let next = Elements.next;\r\n\r\n  /**\r\n   * Indicates whether the component creates arrows or retrieved from the DOM.\r\n   */\r\n  let created: boolean;\r\n\r\n  /**\r\n   * Holds modifier classes.\r\n   */\r\n  let wrapperClasses: string;\r\n\r\n  /**\r\n   * An object with previous and next arrows.\r\n   */\r\n  const arrows: ArrowsComponent[ 'arrows' ] = {};\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on( EVENT_UPDATED, remount );\r\n  }\r\n\r\n  /**\r\n   * Remounts the component.\r\n   */\r\n  function remount(): void {\r\n    destroy();\r\n    mount();\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   */\r\n  function init(): void {\r\n    const enabled = options.arrows;\r\n\r\n    if ( enabled && ! ( prev && next ) ) {\r\n      createArrows();\r\n    }\r\n\r\n    if ( prev && next ) {\r\n      assign( arrows, { prev, next } );\r\n      display( wrapper, enabled ? '' : 'none' );\r\n      addClass( wrapper, ( wrapperClasses = `${ CLASS_ARROWS }--${ options.direction }` ) );\r\n\r\n      if ( enabled ) {\r\n        listen();\r\n        update();\r\n        setAttribute( [ prev, next ], ARIA_CONTROLS, track.id );\r\n        emit( EVENT_ARROWS_MOUNTED, prev, next );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    event.destroy();\r\n    removeClass( wrapper, wrapperClasses );\r\n\r\n    if ( created ) {\r\n      removeNode( placeholder ? [ prev, next ] : wrapper );\r\n      prev = next = null;\r\n    } else {\r\n      removeAttribute( [ prev, next ], ALL_ATTRIBUTES );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Listens to some events.\r\n   */\r\n  function listen(): void {\r\n    on( [ EVENT_MOUNTED, EVENT_MOVED, EVENT_REFRESH, EVENT_SCROLLED, EVENT_END_INDEX_CHANGED ], update );\r\n    bind( next, 'click', apply( go, '>' ) );\r\n    bind( prev, 'click', apply( go, '<' ) );\r\n  }\r\n\r\n  /**\r\n   * The wrapper function of Controller#go().\r\n   *\r\n   * @param control - The control pattern.\r\n   */\r\n  function go( control: string ): void {\r\n    Controller.go( control, true );\r\n  }\r\n\r\n  /**\r\n   * Create arrows and append them to the slider.\r\n   */\r\n  function createArrows(): void {\r\n    wrapper = placeholder || create( 'div', classes.arrows );\r\n    prev    = createArrow( true );\r\n    next    = createArrow( false );\r\n    created = true;\r\n\r\n    append( wrapper, [ prev, next ] );\r\n    ! placeholder && before( wrapper, track );\r\n  }\r\n\r\n  /**\r\n   * Creates an arrow button.\r\n   * In IE, A SVG element is focusable.\r\n   *\r\n   * @param prev - Determines whether to create a previous or next arrow.\r\n   *\r\n   * @return A created button element.\r\n   */\r\n  function createArrow( prev: boolean ): HTMLButtonElement {\r\n    const arrow = `<button class=\"${ classes.arrow } ${ prev ? classes.prev : classes.next }\" type=\"button\">`\r\n      +\t`<svg xmlns=\"${ XML_NAME_SPACE }\" viewBox=\"0 0 ${ SIZE } ${ SIZE }\" width=\"${ SIZE }\" height=\"${ SIZE }\" focusable=\"false\">`\r\n      + `<path d=\"${ options.arrowPath || PATH }\" />`;\r\n\r\n    return parseHtml<HTMLButtonElement>( arrow );\r\n  }\r\n\r\n  /**\r\n   * Updates status of arrows, such as `disabled` and `aria-label`.\r\n   */\r\n  function update(): void {\r\n    if ( prev && next ) {\r\n      const index     = Splide.index;\r\n      const prevIndex = Controller.getPrev();\r\n      const nextIndex = Controller.getNext();\r\n      const prevLabel = prevIndex > -1 && index < prevIndex ? i18n.last : i18n.prev;\r\n      const nextLabel = nextIndex > -1 && index > nextIndex ? i18n.first : i18n.next;\r\n\r\n      prev.disabled = prevIndex < 0;\r\n      next.disabled = nextIndex < 0;\r\n\r\n      setAttribute( prev, ARIA_LABEL, prevLabel );\r\n      setAttribute( next, ARIA_LABEL, nextLabel );\r\n\r\n      emit( EVENT_ARROWS_UPDATED, prev, next, prevIndex, nextIndex );\r\n    }\r\n  }\r\n\r\n  return {\r\n    arrows,\r\n    mount,\r\n    destroy,\r\n    update,\r\n  };\r\n}\r\n","/**\r\n * The namespace for SVG elements.\r\n */\r\nexport const XML_NAME_SPACE = 'http://www.w3.org/2000/svg';\r\n\r\n/**\r\n * The arrow path.\r\n */\r\nexport const PATH = 'm15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z';\r\n\r\n/**\r\n * SVG width and height.\r\n */\r\nexport const SIZE = 40;\r\n","import { ARIA_CONTROLS, ARIA_LABEL } from '../../constants/attributes';\r\nimport { CLASS_ACTIVE } from '../../constants/classes';\r\nimport {\r\n  EVENT_AUTOPLAY_PAUSE,\r\n  EVENT_AUTOPLAY_PLAY,\r\n  EVENT_AUTOPLAY_PLAYING,\r\n  EVENT_MOVE,\r\n  EVENT_REFRESH,\r\n  EVENT_SCROLL,\r\n} from '../../constants/events';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { EventInterface, getAttribute, RequestInterval, setAttribute, style, toggleClass } from '@splidejs/utils';\r\nimport { INTERVAL_DATA_ATTRIBUTE } from './constants';\r\n\r\n\r\n/**\r\n * The interface for the Autoplay component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface AutoplayComponent extends BaseComponent {\r\n  play(): void;\r\n  pause(): void;\r\n  isPaused(): boolean;\r\n}\r\n\r\n/**\r\n * The component for autoplay, handling a progress bar and a toggle button.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return An Autoplay component object.\r\n */\r\nexport function Autoplay(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): AutoplayComponent {\r\n  const { on, bind, emit } = event;\r\n  const interval = RequestInterval( options.interval, Splide.go.bind( Splide, '>' ), onAnimationFrame );\r\n  const { isPaused } = interval;\r\n  const { Elements, Elements: { root, toggle } } = Components;\r\n  const { autoplay } = options;\r\n\r\n  /**\r\n   * Indicates whether the slider is hovered or not.\r\n   */\r\n  let hovered: boolean;\r\n\r\n  /**\r\n   * Indicates whether one of slider elements has focus or not.\r\n   */\r\n  let focused: boolean;\r\n\r\n  /**\r\n   * Indicates whether the autoplay is stopped or not.\r\n   * If stopped, autoplay won't start automatically unless `play()` is explicitly called.\r\n   */\r\n  let stopped = autoplay === 'pause';\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    if ( autoplay ) {\r\n      listen();\r\n      toggle && setAttribute( toggle, ARIA_CONTROLS, Elements.track.id );\r\n      stopped || play();\r\n      update();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Listens to some events.\r\n   */\r\n  function listen(): void {\r\n    if ( options.pauseOnHover ) {\r\n      bind( root, 'mouseenter mouseleave', e => {\r\n        hovered = e.type === 'mouseenter';\r\n        autoToggle();\r\n      } );\r\n    }\r\n\r\n    if ( options.pauseOnFocus ) {\r\n      bind( root, 'focusin focusout', e => {\r\n        focused = e.type === 'focusin';\r\n        autoToggle();\r\n      } );\r\n    }\r\n\r\n    if ( toggle ) {\r\n      bind( toggle, 'click', () => {\r\n        stopped ? play() : pause( true );\r\n      } );\r\n    }\r\n\r\n    on( [ EVENT_MOVE, EVENT_SCROLL, EVENT_REFRESH ], interval.rewind );\r\n    on( EVENT_MOVE, onMove );\r\n  }\r\n\r\n  /**\r\n   * Starts autoplay and clears all flags.\r\n   */\r\n  function play(): void {\r\n    if ( isPaused() && Components.Slides.isEnough() ) {\r\n      interval.start( ! options.resetProgress );\r\n      focused = hovered = stopped = false;\r\n      update();\r\n      emit( EVENT_AUTOPLAY_PLAY );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pauses autoplay.\r\n   *\r\n   * @param stop - If `true`, autoplay keeps paused until `play()` is explicitly called.\r\n   */\r\n  function pause( stop = true ): void {\r\n    stopped = !! stop;\r\n    update();\r\n\r\n    if ( ! isPaused() ) {\r\n      interval.pause();\r\n      emit( EVENT_AUTOPLAY_PAUSE );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggles play/pause according to current flags.\r\n   * If autoplay is manually paused, this will do nothing.\r\n   */\r\n  function autoToggle(): void {\r\n    if ( ! stopped ) {\r\n      hovered || focused ? pause( false ) : play();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the toggle button status.\r\n   */\r\n  function update(): void {\r\n    if ( toggle ) {\r\n      toggleClass( toggle, CLASS_ACTIVE, ! stopped );\r\n      setAttribute( toggle, ARIA_LABEL, options.i18n[ stopped ? 'play' : 'pause' ] );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called on every animation frame while autoplay is active.\r\n   *\r\n   * @param rate - The progress rate between 0 and 1.\r\n   */\r\n  function onAnimationFrame( rate: number ): void {\r\n    const { bar } = Elements;\r\n    bar && style( bar, 'width', `${ rate * 100 }%` );\r\n    emit( EVENT_AUTOPLAY_PLAYING, rate );\r\n  }\r\n\r\n  /**\r\n   * Updates or restores the interval duration.\r\n   *\r\n   * @param index - An index to move to.\r\n   */\r\n  function onMove( index: number ): void {\r\n    const Slide = Components.Slides.getAt( index );\r\n    interval.set( Slide && +getAttribute( Slide.slide, INTERVAL_DATA_ATTRIBUTE ) || options.interval );\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy: interval.cancel,\r\n    play,\r\n    pause,\r\n    isPaused,\r\n  };\r\n}\r\n","import { EVENT_LAZYLOAD_LOADED, EVENT_MOUNTED, EVENT_REFRESH, EVENT_UPDATED } from '../../constants/events';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { apply, child, display, EventInterface } from '@splidejs/utils';\r\nimport { SlideComponent } from '../Slides/Slide';\r\n\r\n\r\n/**\r\n * The interface for the Cover component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface CoverComponent extends BaseComponent {\r\n}\r\n\r\n/**\r\n * The component for setting the image as the slide background.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Cover component object.\r\n */\r\nexport function Cover(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): CoverComponent {\r\n  const { on } = event;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    if ( options.cover ) {\r\n      on( EVENT_LAZYLOAD_LOADED, apply( toggle, true ) );\r\n      on( [ EVENT_MOUNTED, EVENT_UPDATED, EVENT_REFRESH ], apply( cover, true ) );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets/removes the background image to/from all slides.\r\n   *\r\n   * @param cover - If `false`, removes the background image.\r\n   */\r\n  function cover( cover: boolean ): void {\r\n    Components.Slides.forEach( Slide => {\r\n      const img = child<HTMLImageElement>( Slide.container || Slide.slide, 'img' );\r\n\r\n      if ( img && img.src ) {\r\n        toggle( cover, img, Slide );\r\n      }\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Sets/removes the background image to/from the parent element.\r\n   *\r\n   * @param cover - If `false`, removes the background image.\r\n   * @param img   - A target image element.\r\n   * @param Slide - A SlideComponent object where the image belongs.\r\n   */\r\n  function toggle( cover: boolean, img: HTMLImageElement, Slide: SlideComponent ): void {\r\n    Slide.style( 'background', cover ? `center/cover no-repeat url(\"${ img.src }\")` : '', true );\r\n    display( img, cover ? 'none' : '' );\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy: apply( cover, false ),\r\n  };\r\n}\r\n","import { EVENT_MOVE, EVENT_REFRESH, EVENT_SCROLL, EVENT_SCROLLED, EVENT_UPDATED } from '../../constants/events';\r\nimport { IDLE, SCROLLING } from '../../constants/states';\r\nimport { SLIDE } from '../../constants/types';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { AnyFunction, BaseComponent, Components, Options } from '../../types';\r\nimport { abs, apply, approximatelyEqual, EventInterface, floor, max, RequestInterval, sign } from '@splidejs/utils';\r\nimport { BASE_VELOCITY, BOUNCE_DIFF_THRESHOLD, BOUNCE_DURATION, FRICTION_FACTOR, MIN_DURATION } from './constants';\r\n\r\n\r\n/**\r\n * The interface for the Scroll component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface ScrollComponent extends BaseComponent {\r\n  scroll( position: number, duration?: number, snap?: boolean, callback?: AnyFunction ): void;\r\n  cancel(): void;\r\n}\r\n\r\n/**\r\n * The component for scrolling the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Scroll component object.\r\n */\r\nexport function Scroll(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): ScrollComponent {\r\n  const { on, emit } = event;\r\n  const { state: { set } } = Splide;\r\n  const { Move } = Components;\r\n  const { getPosition, getLimit, exceededLimit, translate } = Move;\r\n  const isSlide = Splide.is( SLIDE );\r\n\r\n  /**\r\n   * Retains the active RequestInterval object.\r\n   */\r\n  let interval: RequestInterval;\r\n\r\n  /**\r\n   * Holds the callback function.\r\n   */\r\n  let callback: AnyFunction;\r\n\r\n  /**\r\n   * The current friction (<= 1).\r\n   */\r\n  let friction = 1;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    on( EVENT_MOVE, clear );\r\n    on( [ EVENT_UPDATED, EVENT_REFRESH ], cancel );\r\n  }\r\n\r\n  /**\r\n   * Scrolls the slider to the provided destination.\r\n   *\r\n   * @param destination - The destination to scroll the slider to.\r\n   * @param duration    - Optional. The scroll duration. If omitted, calculates it by the distance.\r\n   * @param snap        - Optional. Whether to snap the slider to the closest slide or not.\r\n   * @param onScrolled  - Optional. A callback invoked after scroll ends.\r\n   * @param noConstrain - Optional. Whether to suppress constraint process when the slider exceeds bounds.\r\n   */\r\n  function scroll(\r\n    destination: number,\r\n    duration?: number,\r\n    snap?: boolean,\r\n    onScrolled?: AnyFunction,\r\n    noConstrain?: boolean\r\n  ): void {\r\n    const from = getPosition();\r\n\r\n    clear();\r\n\r\n    if ( snap && ( ! isSlide || ! exceededLimit() ) ) {\r\n      const size   = Components.Layout.sliderSize();\r\n      const offset = sign( destination ) * size * floor( abs( destination ) / size ) || 0;\r\n      destination = Move.toPosition( Components.Controller.toDest( destination % size ) ) + offset;\r\n    }\r\n\r\n    const noDistance = approximatelyEqual( from, destination, 1 );\r\n\r\n    friction = 1;\r\n    duration = noDistance ? 0 : duration || max( abs( destination - from ) / BASE_VELOCITY, MIN_DURATION );\r\n    callback = onScrolled;\r\n    interval = RequestInterval( duration, onEnd, apply( update, from, destination, noConstrain ), 1 );\r\n\r\n    set( SCROLLING );\r\n    emit( EVENT_SCROLL );\r\n    interval.start();\r\n  }\r\n\r\n  /**\r\n   * Called when scroll ends or has been just canceled.\r\n   */\r\n  function onEnd(): void {\r\n    set( IDLE );\r\n    callback && callback();\r\n    emit( EVENT_SCROLLED );\r\n  }\r\n\r\n  /**\r\n   * Called whenever the interval timer is updated.\r\n   *\r\n   * @param from        - A position where scroll starts.\r\n   * @param to          - A destination where the slider goes.\r\n   * @param noConstrain - Whether to suppress constraint process when the slider exceeds bounds.\r\n   * @param rate        - A current rate.\r\n   */\r\n  function update( from: number, to: number, noConstrain: boolean | undefined, rate: number ): void {\r\n    const position = getPosition();\r\n    const target   = from + ( to - from ) * easing( rate );\r\n    const diff     = ( target - position ) * friction;\r\n\r\n    translate( position + diff );\r\n\r\n    if ( isSlide && ! noConstrain && exceededLimit() ) {\r\n      friction *= FRICTION_FACTOR;\r\n\r\n      if ( abs( diff ) < BOUNCE_DIFF_THRESHOLD ) {\r\n        scroll( getLimit( exceededLimit( true ) ), BOUNCE_DURATION, false, callback, true );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clears the active interval.\r\n   */\r\n  function clear(): void {\r\n    if ( interval ) {\r\n      interval.cancel();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancels the active interval and emits the `scrolled` event.\r\n   */\r\n  function cancel(): void {\r\n    if ( interval && ! interval.isPaused() ) {\r\n      clear();\r\n      onEnd();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The easing function.\r\n   *\r\n   * @param t - A value to ease.\r\n   *\r\n   * @return An eased value.\r\n   */\r\n  function easing( t: number ): number {\r\n    const { easingFunc } = options;\r\n    return easingFunc ? easingFunc( t ) : 1 - Math.pow( 1 - t, 4 );\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy: clear,\r\n    scroll,\r\n    cancel,\r\n  };\r\n}\r\n","/**\r\n * Triggers the bounce effect when the diff becomes less than this value.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const BOUNCE_DIFF_THRESHOLD = 10;\r\n\r\n/**\r\n * The duration of the bounce effect.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const BOUNCE_DURATION = 600;\r\n\r\n/**\r\n * The friction factor.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const FRICTION_FACTOR = 0.6;\r\n\r\n/**\r\n * The velocity to calculate the scroll duration.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const BASE_VELOCITY = 1.5;\r\n\r\n/**\r\n * The minimum duration of scroll.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const MIN_DURATION = 800;\r\n","import { CLASS_ARROW, CLASS_PAGINATION_PAGE } from '../../constants/classes';\r\nimport { EVENT_DRAG, EVENT_DRAGGED, EVENT_DRAGGING, EVENT_MOUNTED, EVENT_UPDATED } from '../../constants/events';\r\nimport { SCROLL_LISTENER_OPTIONS } from '../../constants/listener-options';\r\nimport { DRAGGING, IDLE, MOVING, SCROLLING } from '../../constants/states';\r\nimport { FADE, LOOP, SLIDE } from '../../constants/types';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { abs, EventInterface, isObject, matches, min, noop, prevent, sign, timeOf } from '@splidejs/utils';\r\nimport { FRICTION, LOG_INTERVAL, POINTER_DOWN_EVENTS, POINTER_MOVE_EVENTS, POINTER_UP_EVENTS } from './constants';\r\n\r\n\r\n/**\r\n * The interface for the Drag component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface DragComponent extends BaseComponent {\r\n  disable( disabled: boolean ): void;\r\n  isDragging(): boolean;\r\n}\r\n\r\n/**\r\n * The component for dragging the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Drag component object.\r\n */\r\nexport function Drag(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): DragComponent {\r\n  const { on, emit, bind } = event;\r\n  const binder = event.create();\r\n  const { state } = Splide;\r\n  const { Move, Scroll, Controller, Elements: { track }, Media: { reduce } } = Components;\r\n  const { resolve, orient } = Components.Direction;\r\n  const { getPosition, exceededLimit } = Move;\r\n\r\n  /**\r\n   * The base slider position to calculate the delta of coords.\r\n   */\r\n  let basePosition: number;\r\n\r\n  /**\r\n   * The base event object saved per specific sampling interval.\r\n   */\r\n  let baseEvent: TouchEvent | MouseEvent;\r\n\r\n  /**\r\n   * Holds the previous base event object.\r\n   */\r\n  let prevBaseEvent: TouchEvent | MouseEvent;\r\n\r\n  /**\r\n   * Indicates whether the drag mode is `free` or not.\r\n   */\r\n  let isFree: boolean;\r\n\r\n  /**\r\n   * Indicates whether the user is dragging the slider or not.\r\n   */\r\n  let dragging: boolean;\r\n\r\n  /**\r\n   * Indicates whether the slider exceeds limits or not.\r\n   * This must not be `undefined` for strict comparison.\r\n   */\r\n  let exceeded = false;\r\n\r\n  /**\r\n   * Turns into `true` when the user starts dragging the slider.\r\n   */\r\n  let clickPrevented: boolean;\r\n\r\n  /**\r\n   * Indicates whether the drag component is now disabled or not.\r\n   */\r\n  let disabled: boolean;\r\n\r\n  /**\r\n   * The target element to attach listeners.\r\n   */\r\n  let target: Window | HTMLElement;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    bind( track, POINTER_MOVE_EVENTS, noop, SCROLL_LISTENER_OPTIONS );\r\n    bind( track, POINTER_UP_EVENTS, noop, SCROLL_LISTENER_OPTIONS );\r\n    bind( track, POINTER_DOWN_EVENTS, onPointerDown, SCROLL_LISTENER_OPTIONS );\r\n    bind( track, 'click', onClick, { capture: true } );\r\n    bind( track, 'dragstart', prevent );\r\n    on( [ EVENT_MOUNTED, EVENT_UPDATED ], init );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   */\r\n  function init(): void {\r\n    const { drag } = options;\r\n    disable( ! drag );\r\n    isFree = drag === 'free';\r\n  }\r\n\r\n  /**\r\n   * Called when the user clicks or touches the slider.\r\n   * - Needs to prevent the default behaviour when the slider is busy to deny any action, such as dragging images\r\n   * - IE does not support MouseEvent and TouchEvent constructors\r\n   * - The `dragging` state always becomes `true` when the user starts dragging while the slider is moving\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\r\n  function onPointerDown( e: TouchEvent | MouseEvent ): void {\r\n    clickPrevented = false;\r\n\r\n    if ( ! disabled ) {\r\n      const isTouch = isTouchEvent( e );\r\n\r\n      if ( isDraggable( e.target ) && ( isTouch || ! e.button ) ) {\r\n        if ( ! Controller.isBusy() ) {\r\n          target        = isTouch ? track : window;\r\n          dragging      = state.is( [ MOVING, SCROLLING ] );\r\n          prevBaseEvent = null;\r\n\r\n          binder.bind( target, POINTER_MOVE_EVENTS, onPointerMove, SCROLL_LISTENER_OPTIONS );\r\n          binder.bind( target, POINTER_UP_EVENTS, onPointerUp, SCROLL_LISTENER_OPTIONS );\r\n          Move.cancel();\r\n          Scroll.cancel();\r\n          save( e );\r\n        } else {\r\n          prevent( e, true );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called while the user moves the pointer on the slider.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\r\n  function onPointerMove( e: TouchEvent | MouseEvent ): void {\r\n    if ( ! state.is( DRAGGING ) ) {\r\n      state.set( DRAGGING );\r\n      emit( EVENT_DRAG );\r\n    }\r\n\r\n    if ( e.cancelable ) {\r\n      if ( dragging ) {\r\n        Move.translate( basePosition + constrain( diffCoord( e ) ) );\r\n\r\n        const expired     = diffTime( e ) > LOG_INTERVAL;\r\n        const hasExceeded = exceeded !== ( exceeded = exceededLimit() );\r\n\r\n        if ( expired || hasExceeded ) {\r\n          save( e );\r\n        }\r\n\r\n        clickPrevented = true;\r\n        emit( EVENT_DRAGGING );\r\n        prevent( e );\r\n      } else if ( isSliderDirection( e ) ) {\r\n        dragging = shouldStart( e );\r\n        prevent( e );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the user releases pointing devices.\r\n   * Needs to move the slider when:\r\n   * - The user drags the slider and the distance exceeds the threshold\r\n   * - The user aborted the slider moving by pointerdown and just released it without dragging the slider\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\r\n  function onPointerUp( e: TouchEvent | MouseEvent ): void {\r\n    if ( state.is( DRAGGING ) ) {\r\n      state.set( IDLE );\r\n      emit( EVENT_DRAGGED );\r\n    }\r\n\r\n    if ( dragging ) {\r\n      move( e );\r\n      prevent( e );\r\n    }\r\n\r\n    binder.destroy();\r\n    dragging = false;\r\n  }\r\n\r\n  /**\r\n   * Called when the track element is clicked.\r\n   * Disables click any elements inside it while dragging.\r\n   *\r\n   * @param e - A MouseEvent object.\r\n   */\r\n  function onClick( e: MouseEvent ): void {\r\n    if ( ! disabled && clickPrevented ) {\r\n      prevent( e, true );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Saves data at the specific moment.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   */\r\n  function save( e: TouchEvent | MouseEvent ): void {\r\n    prevBaseEvent = baseEvent;\r\n    baseEvent     = e;\r\n    basePosition  = getPosition();\r\n  }\r\n\r\n  /**\r\n   * Calculates the destination by the drag velocity and moves the carousel.\r\n   * If motion is reduced, restores transition speed to the initial value\r\n   * because it's \"essential\" motion for the user to recognize what happens on the carousel.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   */\r\n  function move( e: TouchEvent | MouseEvent ): void {\r\n    const velocity    = computeVelocity( e );\r\n    const destination = computeDestination( velocity );\r\n    const rewind      = options.rewind && options.rewindByDrag;\r\n\r\n    reduce( false );\r\n\r\n    if ( isFree ) {\r\n      Controller.scroll( destination, 0, options.snap );\r\n    } else if ( Splide.is( FADE ) ) {\r\n      Controller.go( orient( sign( velocity ) ) < 0 ? ( rewind ? '<' : '-' ) : ( rewind ? '>' : '+' ) );\r\n    } else if ( Splide.is( SLIDE ) && exceeded && rewind ) {\r\n      Controller.go( exceededLimit( true ) ? '>' : '<' );\r\n    } else {\r\n      Controller.go( Controller.toDest( destination ), true );\r\n    }\r\n\r\n    reduce( true );\r\n  }\r\n\r\n  /**\r\n   * Checks if the drag distance exceeds the defined threshold.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   *\r\n   * @return `true` if the distance exceeds the threshold, or `false` if not.\r\n   */\r\n  function shouldStart( e: TouchEvent | MouseEvent ): boolean {\r\n    const { dragMinThreshold: thresholds } = options;\r\n    const isObj = isObject( thresholds );\r\n    const mouse = isObj && thresholds.mouse || 0;\r\n    const touch = ( isObj ? thresholds.touch : +thresholds ) || 10;\r\n    return abs( diffCoord( e ) ) > ( isTouchEvent( e ) ? touch : mouse );\r\n  }\r\n\r\n  /**\r\n   * Checks whether dragging towards the slider or the scroll direction.\r\n   *\r\n   * @return `true` if dragging towards the slider direction, or otherwise `false`.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   */\r\n  function isSliderDirection( e: TouchEvent | MouseEvent ): boolean {\r\n    return abs( diffCoord( e ) ) > abs( diffCoord( e, true ) );\r\n  }\r\n\r\n  /**\r\n   * Computes the drag velocity.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object\r\n   *\r\n   * @return The drag velocity.\r\n   */\r\n  function computeVelocity( e: TouchEvent | MouseEvent ): number {\r\n    if ( Splide.is( LOOP ) || ! exceeded ) {\r\n      const time = diffTime( e );\r\n\r\n      if ( time && time < LOG_INTERVAL ) {\r\n        return diffCoord( e ) / time;\r\n      }\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Computes the destination by the velocity and the `flickPower` option.\r\n   *\r\n   * @param velocity - The drag velocity.\r\n   *\r\n   * @return The destination.\r\n   */\r\n  function computeDestination( velocity: number ): number {\r\n    return getPosition() + sign( velocity ) * min(\r\n      abs( velocity ) * ( options.flickPower || 600 ),\r\n      isFree ? Infinity : Components.Layout.listSize() * ( options.flickMaxPages || 1 )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the coord difference between the provided and base events.\r\n   *\r\n   * @param e          - A TouchEvent or MouseEvent object.\r\n   * @param orthogonal - Optional. If `true`, returns the coord of the orthogonal axis against the drag one.\r\n   *\r\n   * @return The difference of the coord.\r\n   */\r\n  function diffCoord( e: TouchEvent | MouseEvent, orthogonal?: boolean ): number {\r\n    return coordOf( e, orthogonal ) - coordOf( getBaseEvent( e ), orthogonal );\r\n  }\r\n\r\n  /**\r\n   * Returns the elapsed time from the base event to `e`.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   *\r\n   * @return The elapsed time in milliseconds.\r\n   */\r\n  function diffTime( e: TouchEvent | MouseEvent ): number {\r\n    return timeOf( e ) - timeOf( getBaseEvent( e ) );\r\n  }\r\n\r\n  /**\r\n   * Returns the base event.\r\n   * If the base event is same with `e`, returns previous one.\r\n   *\r\n   * @param e - A TouchEvent or MouseEvent object.\r\n   *\r\n   * @return A base event.\r\n   */\r\n  function getBaseEvent( e: TouchEvent | MouseEvent ): TouchEvent | MouseEvent {\r\n    return baseEvent === e && prevBaseEvent || baseEvent;\r\n  }\r\n\r\n  /**\r\n   * Returns the `pageX` and `pageY` coordinates provided by the event.\r\n   * Be aware that IE does not support both TouchEvent and MouseEvent constructors.\r\n   *\r\n   * @param e          - A TouchEvent or MouseEvent object.\r\n   * @param orthogonal - Optional. If `true`, returns the coord of the orthogonal axis against the drag one.\r\n   *\r\n   * @return A pageX or pageY coordinate.\r\n   */\r\n  function coordOf( e: TouchEvent | MouseEvent, orthogonal?: boolean ): number {\r\n    return ( isTouchEvent( e ) ? e.changedTouches[ 0 ] : e )[ `page${ resolve( orthogonal ? 'Y' : 'X' ) }` ];\r\n  }\r\n\r\n  /**\r\n   * Reduces the distance to move by the predefined friction.\r\n   * This does nothing when the slider type is not `slide`, or the position is inside borders.\r\n   *\r\n   * @param diff - Diff to constrain.\r\n   *\r\n   * @return The constrained diff.\r\n   */\r\n  function constrain( diff: number ): number {\r\n    return diff / ( exceeded && Splide.is( SLIDE ) ? FRICTION : 1 );\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the user can drag the target.\r\n   *\r\n   * @param target - An event target.\r\n   *\r\n   * @return `true` if the target is draggable.\r\n   */\r\n  function isDraggable( target: EventTarget ): boolean {\r\n    const { noDrag } = options;\r\n\r\n    return ! matches( target, `.${ CLASS_PAGINATION_PAGE }, .${ CLASS_ARROW }` )\r\n      && ( ! noDrag || ! matches( target, noDrag ) );\r\n  }\r\n\r\n  /**\r\n   * Checks if the provided event is TouchEvent or MouseEvent.\r\n   *\r\n   * @param e - An event to check.\r\n   *\r\n   * @return `true` if the `e` is TouchEvent.\r\n   */\r\n  function isTouchEvent( e: TouchEvent | MouseEvent ): e is TouchEvent {\r\n    return typeof TouchEvent !== 'undefined' && e instanceof TouchEvent;\r\n  }\r\n\r\n  /**\r\n   * Checks if now the user is dragging the slider or not.\r\n   *\r\n   * @return `true` if the user is dragging the slider or otherwise `false`.\r\n   */\r\n  function isDragging(): boolean {\r\n    return dragging;\r\n  }\r\n\r\n  /**\r\n   * Disables the component.\r\n   *\r\n   * @param value - Set `true` to disable the component.\r\n   */\r\n  function disable( value: boolean ): void {\r\n    disabled = value;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    disable,\r\n    isDragging,\r\n  };\r\n}\r\n","import { ARROW_LEFT, ARROW_RIGHT } from '../../constants/arrows';\r\nimport { EVENT_MOVE, EVENT_UPDATED } from '../../constants/events';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { EventInterface, nextTick } from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The interface for the Keyboard component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface KeyboardComponent extends BaseComponent {\r\n  disable( disabled: boolean ): void;\r\n}\r\n\r\n/**\r\n * The keyboard event name.\r\n *\r\n * @since 3.6.0\r\n */\r\nconst KEYBOARD_EVENT = 'keydown';\r\n\r\n/**\r\n * The component for controlling the slider by keyboards.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Keyboard component object.\r\n */\r\nexport function Keyboard(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): KeyboardComponent {\r\n  const { on, bind, destroy } = event;\r\n  const { root } = Splide;\r\n  const { resolve } = Components.Direction;\r\n\r\n  /**\r\n   * The target element of the keyboard event.\r\n   */\r\n  let target: Window | HTMLElement;\r\n\r\n  /**\r\n   * Indicates whether the component is currently disabled or not.\r\n   */\r\n  let disabled: boolean;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    init();\r\n    on( EVENT_UPDATED, destroy );\r\n    on( EVENT_UPDATED, init );\r\n    on( EVENT_MOVE, onMove );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   */\r\n  function init(): void {\r\n    const { keyboard } = options;\r\n\r\n    if ( keyboard ) {\r\n      target = keyboard === 'global' ? window : root;\r\n      bind( target, KEYBOARD_EVENT, onKeydown );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disables the keyboard input.\r\n   *\r\n   * @param value - Toggles disabling/enabling the keyboard input.\r\n   */\r\n  function disable( value: boolean ): void {\r\n    disabled = value;\r\n  }\r\n\r\n  /**\r\n   * Called when the slider moves.\r\n   * To avoid the slider from moving twice, wait for a tick.\r\n   */\r\n  function onMove(): void {\r\n    const _disabled = disabled;\r\n    disabled = true;\r\n    nextTick( () => { disabled = _disabled } );\r\n  }\r\n\r\n  /**\r\n   * Called when any key is pressed on the target.\r\n   *\r\n   * @param e - A KeyboardEvent object.\r\n   */\r\n  function onKeydown( e: KeyboardEvent ): void {\r\n    if ( ! disabled ) {\r\n      if ( e.key === resolve( ARROW_LEFT ) ) {\r\n        Splide.go( '<' );\r\n      } else if ( e.key === resolve( ARROW_RIGHT ) ) {\r\n        Splide.go( '>' );\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy,\r\n    disable,\r\n  };\r\n}\r\n","import { CLASS_LOADING } from '../../constants/classes';\r\nimport {\r\n  EVENT_LAZYLOAD_LOADED,\r\n  EVENT_MOVED,\r\n  EVENT_REFRESH,\r\n  EVENT_RESIZE,\r\n  EVENT_SCROLLED,\r\n} from '../../constants/events';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport {\r\n  addClass,\r\n  apply,\r\n  child,\r\n  create,\r\n  display,\r\n  empty,\r\n  EventInterface,\r\n  getAttribute,\r\n  queryAll,\r\n  removeNode,\r\n  removeAttribute,\r\n  removeClass,\r\n  setAttribute,\r\n} from '@splidejs/utils';\r\nimport { SlideComponent } from '../Slides/Slide';\r\nimport { IMAGE_SELECTOR, SRC_DATA_ATTRIBUTE, SRCSET_DATA_ATTRIBUTE } from './constants';\r\n\r\n\r\n/**\r\n * The interface for the LazyLoad component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface LazyLoadComponent extends BaseComponent {\r\n  /** @internal */\r\n  check(): void;\r\n}\r\n\r\n/**\r\n * The type for each entry.\r\n * Use a tuple for better compression.\r\n *\r\n * @since 4.0.0\r\n */\r\ntype LazyLoadEntry = [ HTMLImageElement, SlideComponent, HTMLSpanElement ];\r\n\r\n/**\r\n * The component for lazily loading images.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return An LazyLoad component object.\r\n */\r\nexport function LazyLoad(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): LazyLoadComponent {\r\n  const { on, off, bind, emit } = event;\r\n  const isSequential = options.lazyLoad === 'sequential';\r\n  const events       = [ EVENT_MOVED, EVENT_SCROLLED ];\r\n\r\n  /**\r\n   * Stores data of images.\r\n   */\r\n  let entries: LazyLoadEntry[] = [];\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    if ( options.lazyLoad ) {\r\n      init();\r\n      on( EVENT_REFRESH, init );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes the component and start loading images.\r\n   * Be aware that `refresh` also calls this method.\r\n   */\r\n  function init() {\r\n    empty( entries );\r\n    register();\r\n\r\n    if ( isSequential ) {\r\n      loadNext();\r\n    } else {\r\n      off( events );\r\n      on( events, check );\r\n      check();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds images and register them as entries with creating spinner elements.\r\n   * Note that spinner can be already available because of `refresh()`.\r\n   */\r\n  function register(): void {\r\n    Components.Slides.forEach( Slide => {\r\n      queryAll<HTMLImageElement>( Slide.slide, IMAGE_SELECTOR ).forEach( img => {\r\n        const src    = getAttribute( img, SRC_DATA_ATTRIBUTE );\r\n        const srcset = getAttribute( img, SRCSET_DATA_ATTRIBUTE );\r\n\r\n        if ( src !== img.src || srcset !== img.srcset ) {\r\n          const className = options.classes.spinner;\r\n          const parent    = img.parentElement;\r\n          const spinner   = child( parent, `.${ className }` ) || create( 'span', className, parent );\r\n\r\n          entries.push( [ img, Slide, spinner ] );\r\n          img.src || display( img, 'none' );\r\n        }\r\n      } );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Checks how close each image is from the active slide, and determines whether to start loading or not.\r\n   * The last `+1` is for the current page.\r\n   */\r\n  function check(): void {\r\n    entries = entries.filter( data => {\r\n      const distance = options.perPage * ( ( options.preloadPages || 1 ) + 1 ) - 1;\r\n      return data[ 1 ].isWithin( Splide.index, distance ) ? load( data ) : true;\r\n    } );\r\n\r\n    entries.length || off( events );\r\n  }\r\n\r\n  /**\r\n   * Starts loading the image in the provided data.\r\n   *\r\n   * @param data - A LazyLoadEntry object.\r\n   */\r\n  function load( data: LazyLoadEntry ): void {\r\n    const [ img ] = data;\r\n\r\n    addClass( data[ 1 ].slide, CLASS_LOADING );\r\n    bind( img, 'load error', apply( onLoad, data ) );\r\n\r\n    setAttribute( img, 'src', getAttribute( img, SRC_DATA_ATTRIBUTE ) );\r\n    setAttribute( img, 'srcset', getAttribute( img, SRCSET_DATA_ATTRIBUTE ) );\r\n    removeAttribute( img, SRC_DATA_ATTRIBUTE );\r\n    removeAttribute( img, SRCSET_DATA_ATTRIBUTE );\r\n  }\r\n\r\n  /**\r\n   * Called when the image is loaded or any error occurs.\r\n   *\r\n   * @param data - A LazyLoadEntry object.\r\n   * @param e    - An Event object.\r\n   */\r\n  function onLoad( data: LazyLoadEntry, e: Event ): void {\r\n    const [ img, Slide ] = data;\r\n\r\n    removeClass( Slide.slide, CLASS_LOADING );\r\n\r\n    if ( e.type !== 'error' ) {\r\n      removeNode( data[ 2 ] );\r\n      display( img, '' );\r\n      emit( EVENT_LAZYLOAD_LOADED, img, Slide );\r\n      emit( EVENT_RESIZE );\r\n    }\r\n\r\n    isSequential && loadNext();\r\n  }\r\n\r\n  /**\r\n   * Starts loading a next image.\r\n   */\r\n  function loadNext(): void {\r\n    entries.length && load( entries.shift() );\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    destroy: apply( empty, entries ),\r\n    check,\r\n  };\r\n}\r\n","import { ARROW_LEFT, ARROW_RIGHT } from '../../constants/arrows';\r\nimport {\r\n  ARIA_CONTROLS,\r\n  ARIA_LABEL,\r\n  ARIA_ORIENTATION,\r\n  ARIA_SELECTED,\r\n  ROLE,\r\n  TAB_INDEX,\r\n} from '../../constants/attributes';\r\nimport { CLASS_ACTIVE, CLASS_PAGINATION } from '../../constants/classes';\r\nimport { TTB } from '../../constants/directions';\r\nimport {\r\n  EVENT_END_INDEX_CHANGED,\r\n  EVENT_MOVE,\r\n  EVENT_PAGINATION_MOUNTED,\r\n  EVENT_PAGINATION_UPDATED,\r\n  EVENT_REFRESH,\r\n  EVENT_SCROLL,\r\n  EVENT_SCROLLED,\r\n  EVENT_UPDATED,\r\n} from '../../constants/events';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport {\r\n  addClass,\r\n  apply,\r\n  ceil,\r\n  create,\r\n  display,\r\n  empty,\r\n  EventInterface,\r\n  focus,\r\n  format,\r\n  prevent,\r\n  removeNode,\r\n  removeAttribute,\r\n  removeClass,\r\n  setAttribute,\r\n  slice,\r\n} from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The interface for the Pagination component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface PaginationComponent extends BaseComponent {\r\n  items: PaginationItem[];\r\n  getAt( index: number ): PaginationItem;\r\n  update(): void;\r\n}\r\n\r\n/**\r\n * The interface for data of the pagination.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface PaginationData {\r\n  list: HTMLUListElement;\r\n  items: PaginationItem[];\r\n}\r\n\r\n/**\r\n * The interface for each pagination item.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface PaginationItem {\r\n  li: HTMLLIElement;\r\n  button: HTMLButtonElement;\r\n  page: number;\r\n}\r\n\r\n/**\r\n * The component for the pagination UI (a slide picker).\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Pagination component object.\r\n */\r\nexport function Pagination(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): PaginationComponent {\r\n  const { on, emit, bind } = event;\r\n  const { Slides, Elements, Controller } = Components;\r\n  const { hasFocus, getIndex, go } = Controller;\r\n  const { resolve } = Components.Direction;\r\n  const { pagination: placeholder } = Elements;\r\n\r\n  /**\r\n   * Stores all pagination items.\r\n   */\r\n  const items: PaginationItem[] = [];\r\n\r\n  /**\r\n   * The pagination element.\r\n   */\r\n  let list: HTMLUListElement | null;\r\n\r\n  /**\r\n   * Holds modifier classes.\r\n   */\r\n  let paginationClasses: string;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    destroy();\r\n    on( [ EVENT_UPDATED, EVENT_REFRESH, EVENT_END_INDEX_CHANGED ], mount );\r\n\r\n    const enabled = options.pagination;\r\n    placeholder && display( placeholder, enabled ? '' : 'none' );\r\n\r\n    if ( enabled ) {\r\n      on( [ EVENT_MOVE, EVENT_SCROLL, EVENT_SCROLLED ], update );\r\n      createPagination();\r\n      update();\r\n      emit( EVENT_PAGINATION_MOUNTED, { list, items }, getAt( Splide.index ) );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    if ( list ) {\r\n      removeNode( placeholder ? slice( list.children ) : list );\r\n      removeClass( list, paginationClasses );\r\n      empty( items );\r\n      list = null;\r\n    }\r\n\r\n    event.destroy();\r\n  }\r\n\r\n  /**\r\n   * Creates the pagination element and appends it to the slider.\r\n   */\r\n  function createPagination(): void {\r\n    const { length } = Splide;\r\n    const { classes, i18n, perPage } = options;\r\n    const max = hasFocus() ? Controller.getEnd() + 1 : ceil( length / perPage );\r\n\r\n    list = placeholder || create( 'ul', classes.pagination, Elements.track.parentElement );\r\n\r\n    addClass( list, ( paginationClasses = `${ CLASS_PAGINATION }--${ getDirection() }` ) );\r\n    setAttribute( list, ROLE, 'tablist' );\r\n    setAttribute( list, ARIA_LABEL, i18n.select );\r\n    setAttribute( list, ARIA_ORIENTATION, getDirection() === TTB ? 'vertical' : '' );\r\n\r\n    for ( let i = 0; i < max; i++ ) {\r\n      const li       = create( 'li', null, list );\r\n      const button   = create( 'button', { class: classes.page, type: 'button' }, li );\r\n      const controls = Slides.getIn( i ).map( Slide => Slide.slide.id );\r\n      const text     = ! hasFocus() && perPage > 1 ? i18n.pageX : i18n.slideX;\r\n\r\n      bind( button, 'click', apply( onClick, i ) );\r\n\r\n      if ( options.paginationKeyboard ) {\r\n        bind( button, 'keydown', apply( onKeydown, i ) );\r\n      }\r\n\r\n      setAttribute( li, ROLE, 'presentation' );\r\n      setAttribute( button, ROLE, 'tab' );\r\n      setAttribute( button, ARIA_CONTROLS, controls.join( ' ' ) );\r\n      setAttribute( button, ARIA_LABEL, format( text, i + 1 ) );\r\n      setAttribute( button, TAB_INDEX, -1 );\r\n\r\n      items.push( { li, button, page: i } );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the user clicks each pagination dot.\r\n   * Moves the focus to the active slide for accessibility.\r\n   *\r\n   * @link https://www.w3.org/WAI/tutorials/carousels/functionality/\r\n   *\r\n   * @param page - A clicked page index.\r\n   */\r\n  function onClick( page: number ): void {\r\n    go( `>${ page }`, true );\r\n  }\r\n\r\n  /**\r\n   * Called when any key is pressed on the pagination.\r\n   *\r\n   * @link https://www.w3.org/TR/2021/NOTE-wai-aria-practices-1.2-20211129/#keyboard-interaction-21\r\n   *\r\n   * @param page - A page index.\r\n   * @param e    - A KeyboardEvent object.\r\n   */\r\n  function onKeydown( page: number, e: KeyboardEvent ): void {\r\n    const { length } = items;\r\n    const { key } = e;\r\n    const dir = getDirection();\r\n\r\n    let nextPage = -1;\r\n\r\n    if ( key === resolve( ARROW_RIGHT, false, dir ) ) {\r\n      nextPage = ++page % length;\r\n    } else if ( key === resolve( ARROW_LEFT, false, dir ) ) {\r\n      nextPage = ( --page + length ) % length;\r\n    } else if ( key === 'Home' ) {\r\n      nextPage = 0;\r\n    } else if ( key === 'End' ) {\r\n      nextPage = length - 1;\r\n    }\r\n\r\n    const item = items[ nextPage ];\r\n\r\n    if ( item ) {\r\n      focus( item.button );\r\n      go( `>${ nextPage }` );\r\n      prevent( e, true );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the latest direction for pagination.\r\n   */\r\n  function getDirection(): Options['direction'] {\r\n    return options.paginationDirection || options.direction;\r\n  }\r\n\r\n  /**\r\n   * Returns the pagination item at the specified index.\r\n   *\r\n   * @param index - An index.\r\n   *\r\n   * @return A pagination item object if available, or otherwise `undefined`.\r\n   */\r\n  function getAt( index: number ): PaginationItem | undefined {\r\n    return items[ Controller.toPage( index ) ];\r\n  }\r\n\r\n  /**\r\n   * Updates the pagination status.\r\n   */\r\n  function update(): void {\r\n    const prev = getAt( getIndex( true ) );\r\n    const curr = getAt( getIndex() );\r\n\r\n    if ( prev ) {\r\n      const { button } = prev;\r\n      removeClass( button, CLASS_ACTIVE );\r\n      removeAttribute( button, ARIA_SELECTED );\r\n      setAttribute( button, TAB_INDEX, -1 );\r\n    }\r\n\r\n    if ( curr ) {\r\n      const { button } = curr;\r\n      addClass( button, CLASS_ACTIVE );\r\n      setAttribute( button, ARIA_SELECTED, true );\r\n      setAttribute( button, TAB_INDEX, '' );\r\n    }\r\n\r\n    emit( EVENT_PAGINATION_UPDATED, { list, items }, prev, curr );\r\n  }\r\n\r\n  return {\r\n    items,\r\n    mount,\r\n    destroy,\r\n    getAt,\r\n    update,\r\n  };\r\n}\r\n","import { SCROLL_LISTENER_OPTIONS } from '../../constants/listener-options';\r\nimport { MOVING } from '../../constants/states';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport { abs, EventInterface, prevent, timeOf } from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The interface for the Wheel component.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport interface WheelComponent extends BaseComponent {\r\n}\r\n\r\n/**\r\n * The component for observing the mouse wheel and moving the slider.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Wheel component object.\r\n */\r\nexport function Wheel(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): WheelComponent {\r\n  /**\r\n   * Holds the last time when the wheel moves the slider.\r\n   */\r\n  let lastTime = 0;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    if ( options.wheel ) {\r\n      event.bind( Components.Elements.track, 'wheel', onWheel, SCROLL_LISTENER_OPTIONS );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the user rotates the mouse wheel on the slider.\r\n   *\r\n   * @param e - A WheelEvent object.\r\n   */\r\n  function onWheel( e: WheelEvent ): void {\r\n    if ( e.cancelable ) {\r\n      const { deltaY } = e;\r\n      const backwards = deltaY < 0;\r\n      const timeStamp = timeOf( e );\r\n      const min       = options.wheelMinThreshold || 0;\r\n      const sleep     = options.wheelSleep || 0;\r\n\r\n      if ( abs( deltaY ) > min && timeStamp - lastTime > sleep ) {\r\n        Splide.go( backwards ? '<' : '>' );\r\n        lastTime = timeStamp;\r\n      }\r\n\r\n      shouldPrevent( backwards ) && prevent( e );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks whether the component should prevent the default action of the wheel event or not.\r\n   *\r\n   * @param backwards - Set this to `true` for backwards direction.\r\n   *\r\n   * @return `true` if the action should be prevented.\r\n   */\r\n  function shouldPrevent( backwards: boolean ): boolean {\r\n    return ! options.releaseWheel\r\n      || Splide.state.is( MOVING )\r\n      || Components.Controller.getAdjacent( backwards ) !== -1;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n  };\r\n}\r\n","import { ARIA_ATOMIC, ARIA_BUSY, ARIA_LIVE } from '../../constants/attributes';\r\nimport { CLASS_SR } from '../../constants/classes';\r\nimport { EVENT_AUTOPLAY_PAUSE, EVENT_AUTOPLAY_PLAY, EVENT_MOVED, EVENT_SCROLLED } from '../../constants/events';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { BaseComponent, Components, Options } from '../../types';\r\nimport {\r\n  append,\r\n  apply,\r\n  create,\r\n  EventInterface,\r\n  removeNode,\r\n  removeAttribute,\r\n  RequestInterval,\r\n  setAttribute,\r\n} from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The interface for the Live component.\r\n *\r\n * @since 4.0.0\r\n */\r\nexport interface LiveComponent extends BaseComponent {\r\n  disable( disabled: boolean ): void;\r\n}\r\n\r\n/**\r\n * Delay in milliseconds before removing the SR field for Windows Narrator.\r\n */\r\nconst SR_REMOVAL_DELAY = 90;\r\n\r\n/**\r\n * The component for implementing Live Region to the slider.\r\n *\r\n * @link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions\r\n *\r\n * @since 4.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Live component object.\r\n */\r\nexport function Live(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): LiveComponent {\r\n  const { on } = event;\r\n  const { track } = Components.Elements;\r\n\r\n  /**\r\n   * Indicates whether the live region is enabled or not.\r\n   */\r\n  const enabled = options.live && ! options.isNavigation;\r\n\r\n  /**\r\n   * The span element for the SR only text.\r\n   */\r\n  const sr = create( 'span', CLASS_SR );\r\n\r\n  /**\r\n   * Holds the RequestInterval instance.\r\n   */\r\n  const interval = RequestInterval( SR_REMOVAL_DELAY, apply( toggle, false ) );\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   * - JAWS needs `aria-atomic` to make the `aria-busy` work.\r\n   * - Immediately removing the SR makes Windows Narrator silent, hence requires the delay around 50ms.\r\n   */\r\n  function mount(): void {\r\n    if ( enabled ) {\r\n      disable( ! Components.Autoplay.isPaused() );\r\n      setAttribute( track, ARIA_ATOMIC, true );\r\n      sr.textContent = '…';\r\n\r\n      on( EVENT_AUTOPLAY_PLAY, apply( disable, true ) );\r\n      on( EVENT_AUTOPLAY_PAUSE, apply( disable, false ) );\r\n      on( [ EVENT_MOVED, EVENT_SCROLLED ], apply( toggle, true ) );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggles the SR field and `aria-busy`.\r\n   *\r\n   * @param active - Determines whether to activate the field or not.\r\n   */\r\n  function toggle( active: boolean ): void {\r\n    setAttribute( track, ARIA_BUSY, active );\r\n\r\n    if ( active ) {\r\n      append( track, sr );\r\n      interval.start();\r\n    } else {\r\n      removeNode( sr );\r\n      interval.cancel();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   */\r\n  function destroy(): void {\r\n    removeAttribute( track, [ ARIA_LIVE, ARIA_ATOMIC, ARIA_BUSY ] );\r\n    removeNode( sr );\r\n  }\r\n\r\n  /**\r\n   * Disables/enables the live region.\r\n   * Does nothing when the `live` option is not enabled.\r\n   *\r\n   * @param disabled - `true` to disable the live region or `false` to enable it again.\r\n   */\r\n  function disable( disabled: boolean ): void {\r\n    if ( enabled ) {\r\n      setAttribute( track, ARIA_LIVE, disabled ? 'off' : 'polite' );\r\n    }\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    disable,\r\n    destroy,\r\n  };\r\n}","import { Options } from '../types';\r\nimport { CLASSES } from './classes';\r\nimport { I18N } from './i18n';\r\n\r\n\r\n/**\r\n * The collection of default options.\r\n * Note that this collection does not contain all options.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const DEFAULTS: Options = {\r\n  type              : 'slide',\r\n  role              : 'region',\r\n  speed             : 400,\r\n  perPage           : 1,\r\n  cloneStatus       : true,\r\n  arrows            : true,\r\n  pagination        : true,\r\n  paginationKeyboard: true,\r\n  interval          : 5000,\r\n  pauseOnHover      : true,\r\n  pauseOnFocus      : true,\r\n  resetProgress     : true,\r\n  easing            : 'cubic-bezier(0.25, 1, 0.5, 1)',\r\n  drag              : true,\r\n  direction         : 'ltr',\r\n  trimSpace         : true,\r\n  focusableNodes    : 'a, button, textarea, input, select, iframe',\r\n  live              : true,\r\n  classes           : CLASSES,\r\n  i18n              : I18N,\r\n  reducedMotion: {\r\n    speed      : 0,\r\n    rewindSpeed: 0,\r\n    autoplay   : 'pause',\r\n  },\r\n};","/**\r\n * The collection of i18n strings.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport const I18N = {\r\n  prev      : 'Previous slide',\r\n  next      : 'Next slide',\r\n  first     : 'Go to first slide',\r\n  last      : 'Go to last slide',\r\n  slideX    : 'Go to slide %s',\r\n  pageX     : 'Go to page %s',\r\n  play      : 'Start autoplay',\r\n  pause     : 'Pause autoplay',\r\n  carousel  : 'carousel',\r\n  slide     : 'slide',\r\n  select    : 'Select a slide to show',\r\n  slideLabel: '%s of %s', // [ slide number ] / [ slide size ]\r\n};\r\n","import { EVENT_MOUNTED, EVENT_REFRESH } from '../../constants/events';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { Components, Options, TransitionComponent } from '../../types';\r\nimport { EventInterface, nextTick, noop } from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The component for the fade transition.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Transition component object.\r\n */\r\nexport function Fade(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): TransitionComponent {\r\n  const { Slides } = Components;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    event.on( [ EVENT_MOUNTED, EVENT_REFRESH ], init );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   * Offsets all slides for stacking them onto the head of the list.\r\n   * The `nextTick` disables the initial fade transition of the first slide.\r\n   */\r\n  function init(): void {\r\n    Slides.forEach( Slide => {\r\n      Slide.style( 'transform', `translateX(-${ 100 * Slide.index }%)` );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Starts the transition.\r\n   *\r\n   * @param index - A slide index to be active.\r\n   * @param done  - The callback function that must be called after the transition ends.\r\n   */\r\n  function start( index: number, done: () => void ): void {\r\n    Slides.style( 'transition', `opacity ${ options.speed }ms ${ options.easing }` );\r\n    nextTick( done );\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    start,\r\n    cancel: noop,\r\n  };\r\n}\r\n","import { SLIDE } from '../../constants/types';\r\nimport { Splide } from '../../core/Splide/Splide';\r\nimport { Components, Options, TransitionComponent } from '../../types';\r\nimport { abs, apply, EventInterface, style } from '@splidejs/utils';\r\n\r\n\r\n/**\r\n * The component for the slide transition.\r\n *\r\n * @since 3.0.0\r\n *\r\n * @param Splide     - A Splide instance.\r\n * @param Components - A collection of components.\r\n * @param options    - Options.\r\n * @param event      - An EventInterface instance.\r\n *\r\n * @return A Transition component object.\r\n */\r\nexport function Slide(\r\n  Splide: Splide,\r\n  Components: Components,\r\n  options: Options,\r\n  event: EventInterface\r\n): TransitionComponent {\r\n  const { Move, Controller, Scroll } = Components;\r\n  const { list } = Components.Elements;\r\n  const transition = apply( style, list, 'transition' );\r\n\r\n  /**\r\n   * Holds the `done` callback function.\r\n   */\r\n  let endCallback: () => void;\r\n\r\n  /**\r\n   * Called when the component is mounted.\r\n   */\r\n  function mount(): void {\r\n    event.bind( list, 'transitionend', e => {\r\n      if ( e.target === list && endCallback ) {\r\n        cancel();\r\n        endCallback();\r\n      }\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Starts the transition.\r\n   * The Move component calls this method just before the slider moves.\r\n   *\r\n   * @param index - A destination index.\r\n   * @param done  - The callback function that must be called after the transition ends.\r\n   */\r\n  function start( index: number, done: () => void ): void {\r\n    const destination = Move.toPosition( index, true );\r\n    const position    = Move.getPosition();\r\n    const speed       = getSpeed( index );\r\n\r\n    if ( abs( destination - position ) >= 1 && speed >= 1 ) {\r\n      if ( options.useScroll ) {\r\n        Scroll.scroll( destination, speed, false, done );\r\n      } else {\r\n        transition( `transform ${ speed }ms ${ options.easing }` );\r\n        Move.translate( destination, true );\r\n        endCallback = done;\r\n      }\r\n    } else {\r\n      Move.jump( index );\r\n      done();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancels the transition.\r\n   */\r\n  function cancel(): void {\r\n    transition( '' );\r\n    Scroll.cancel();\r\n  }\r\n\r\n  /**\r\n   * Returns the transition speed.\r\n   *\r\n   * @param index - A destination index.\r\n   */\r\n  function getSpeed( index: number ): number {\r\n    const { rewindSpeed } = options;\r\n\r\n    if ( Splide.is( SLIDE ) && rewindSpeed ) {\r\n      const prev = Controller.getIndex( true );\r\n      const end  = Controller.getEnd();\r\n\r\n      if ( ( prev === 0 && index >= end ) || ( prev >= end && index === 0 ) ) {\r\n        return rewindSpeed;\r\n      }\r\n    }\r\n\r\n    return options.speed;\r\n  }\r\n\r\n  return {\r\n    mount,\r\n    start,\r\n    cancel,\r\n  };\r\n}\r\n","import * as ComponentConstructors from '../../components';\r\nimport { SlideMatcher } from '../../components/Slides/Slides';\r\nimport { CLASS_INITIALIZED } from '../../constants/classes';\r\nimport { DEFAULTS } from '../../constants/defaults';\r\nimport { EVENT_DESTROY, EVENT_MOUNTED, EVENT_READY, EVENT_REFRESH } from '../../constants/events';\r\nimport { DATA_ATTRIBUTE } from '../../constants/project';\r\nimport { CREATED, DESTROYED, IDLE, STATES } from '../../constants/states';\r\nimport { FADE } from '../../constants/types';\r\nimport { Fade, Slide } from '../../transitions';\r\nimport { AnyFunction, ComponentConstructor, Components, EventMap, Options, SyncTarget } from '../../types';\r\nimport {\r\n  addClass,\r\n  assign,\r\n  empty,\r\n  EventInterface,\r\n  forOwn,\r\n  getAttribute,\r\n  isString,\r\n  merge,\r\n  query,\r\n  slice,\r\n  State,\r\n} from '@splidejs/utils';\r\nimport { assert } from '../../utils';\r\nimport { ARIA_LABEL, ARIA_LABELLEDBY } from '../../constants/attributes';\r\n\r\n\r\n/**\r\n * The frontend class for the Splide slider.\r\n *\r\n * @since 3.0.0\r\n */\r\nexport class Splide {\r\n  /**\r\n   * Changes the default options for all Splide instances.\r\n   */\r\n  static defaults: Options = {};\r\n\r\n  /**\r\n   * The collection of state numbers.\r\n   */\r\n  static readonly STATES = STATES;\r\n\r\n  /**\r\n   * The root element where the Splide is applied.\r\n   */\r\n  readonly root: HTMLElement;\r\n\r\n  /**\r\n   * The EventBusObject object.\r\n   */\r\n  readonly event = EventInterface();\r\n\r\n  /**\r\n   * The collection of all component objects.\r\n   */\r\n  readonly Components: Components = {} as Components;\r\n\r\n  /**\r\n   * The StateObject object.\r\n   */\r\n  readonly state = State( CREATED );\r\n\r\n  /**\r\n   * An array with SyncTarget objects for splide instances to sync with.\r\n   */\r\n  readonly splides: SyncTarget[] = [];\r\n\r\n  /**\r\n   * The current options.\r\n   */\r\n  private readonly _o: Options = {};\r\n\r\n  /**\r\n   * The collection of all components.\r\n   */\r\n  private _C: Components;\r\n\r\n  /**\r\n   * The collection of extensions.\r\n   */\r\n  private _E: Record<string, ComponentConstructor> = {};\r\n\r\n  /**\r\n   * The Transition component.\r\n   */\r\n  private _T: ComponentConstructor;\r\n\r\n  /**\r\n   * The Splide constructor.\r\n   *\r\n   * @param target  - The selector for the target element, or the element itself.\r\n   * @param options - Optional. An object with options.\r\n   */\r\n  constructor( target: string | HTMLElement, options?: Options ) {\r\n    const root = isString( target ) ? query<HTMLElement>( document, target ) : target;\r\n    assert( root, `${ root } is invalid.` );\r\n\r\n    this.root = root;\r\n\r\n    options = merge( {\r\n      label     : getAttribute( root, ARIA_LABEL ) || '',\r\n      labelledby: getAttribute( root, ARIA_LABELLEDBY ) || '',\r\n    }, DEFAULTS, Splide.defaults, options || {} );\r\n\r\n    try {\r\n      merge( options, JSON.parse( getAttribute( root, DATA_ATTRIBUTE ) ) );\r\n    } catch ( e ) {\r\n      assert( false, 'Invalid JSON' );\r\n    }\r\n\r\n    this._o = Object.create( merge( {}, options ) );\r\n  }\r\n\r\n  /**\r\n   * Initializes the instance.\r\n   *\r\n   * @param Extensions - Optional. An object with extensions.\r\n   * @param Transition - Optional. A Transition component.\r\n   *\r\n   * @return `this`\r\n   */\r\n  mount( Extensions?: Record<string, ComponentConstructor>, Transition?: ComponentConstructor ): this {\r\n    const { state, Components } = this;\r\n    assert( state.is( [ CREATED, DESTROYED ] ), 'Already mounted!' );\r\n\r\n    state.set( CREATED );\r\n\r\n    this._C = Components;\r\n    this._T = Transition || this._T || ( this.is( FADE ) ? Fade : Slide );\r\n    this._E = Extensions || this._E;\r\n\r\n    const Constructors = assign( {}, ComponentConstructors, this._E, { Transition: this._T } );\r\n\r\n    forOwn( Constructors, ( Component, key ) => {\r\n      const component = Component( this, Components, this._o, this.event.create() );\r\n      Components[ key ] = component;\r\n      component.setup && component.setup();\r\n    } );\r\n\r\n    forOwn( Components, component => {\r\n      component.mount && component.mount();\r\n    } );\r\n\r\n    this.emit( EVENT_MOUNTED );\r\n\r\n    addClass( this.root, CLASS_INITIALIZED );\r\n\r\n    state.set( IDLE );\r\n    this.emit( EVENT_READY );\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Syncs the slider with the provided one.\r\n   * This method must be called before the `mount()`.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const primary   = new Splide();\r\n   * const secondary = new Splide();\r\n   *\r\n   * primary.sync( secondary );\r\n   * primary.mount();\r\n   * secondary.mount();\r\n   * ```\r\n   *\r\n   * @param splide - A Splide instance to sync with.\r\n   *\r\n   * @return `this`\r\n   */\r\n  sync( splide: Splide ): this {\r\n    this.splides.push( { splide } );\r\n    splide.splides.push( { splide: this, isParent: true } );\r\n\r\n    if ( this.state.is( IDLE ) ) {\r\n      this._C.Sync.remount();\r\n      splide.Components.Sync.remount();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Moves the slider with the following control pattern.\r\n   *\r\n   * | Pattern | Description |\r\n   * |---|---|\r\n   * | `i` | Goes to the slide `i` |\r\n   * | `'+${i}'` | Increments the slide index by `i` |\r\n   * | `'-${i}'` | Decrements the slide index by `i` |\r\n   * | `'>'` | Goes to the next page |\r\n   * | `'<'` | Goes to the previous page |\r\n   * | `>${i}` | Goes to the page `i` |\r\n   *\r\n   * In most cases, `'>'` and `'<'` notations are enough to control the slider\r\n   * because they respect `perPage` and `perMove` options.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const splide = new Splide();\r\n   *\r\n   * // Goes to the slide 1:\r\n   * splide.go( 1 );\r\n   *\r\n   * // Increments the index:\r\n   * splide.go( '+2' );\r\n   *\r\n   * // Goes to the next page:\r\n   * splide.go( '>' );\r\n   *\r\n   * // Goes to the page 2:\r\n   * splide.go( '>2' );\r\n   * ```\r\n   *\r\n   * @param control - A control pattern.\r\n   *\r\n   * @return `this`\r\n   */\r\n  go( control: number | string ): this {\r\n    this._C.Controller.go( control );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Registers an event handler.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const splide = new Splide();\r\n   *\r\n   * // Listens to a single event:\r\n   * splide.on( 'move', function() {} );\r\n   *\r\n   * // Listens to multiple events:\r\n   * splide.on( 'move resize', function() {} );\r\n   *\r\n   * // Appends a namespace:\r\n   * splide.on( 'move.myNamespace resize.myNamespace', function() {} );\r\n   * ```\r\n   *\r\n   * @param events   - An event name or names separated by spaces. Use a dot(.) to append a namespace.\r\n   * @param callback - A callback function.\r\n   *\r\n   * @return `this`\r\n   */\r\n  on<K extends keyof EventMap>( events: K, callback: EventMap[ K ] ): this;\r\n  on( events: string | string[], callback: AnyFunction ): this;\r\n  on( events: string | string[], callback: AnyFunction ): this {\r\n    this.event.on( events, callback );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes the registered all handlers for the specified event or events.\r\n   * If you want to only remove a particular handler, use namespace to identify it.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const splide = new Splide();\r\n   *\r\n   * // Removes all handlers assigned to \"move\":\r\n   * splide.off( 'move' );\r\n   *\r\n   * // Only removes handlers that belong to the specified namespace:\r\n   * splide.off( 'move.myNamespace' );\r\n   * ```\r\n   *\r\n   * @param events   - An event name or names separated by spaces. Use a dot(.) to append a namespace.\r\n   * @param callback - A callback function to remove.\r\n   *\r\n   * @return `this`\r\n   */\r\n  off<K extends keyof EventMap>( events: K | K[] | string | string[], callback: AnyFunction ): this {\r\n    this.event.off( events, callback );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Emits an event and triggers registered handlers.\r\n   *\r\n   * @param event - An event name to emit.\r\n   * @param args  - Optional. Any number of arguments to pass to handlers.\r\n   *\r\n   * @return `this`\r\n   */\r\n  emit<K extends keyof EventMap>( event: K, ...args: Parameters<EventMap[ K ]> ): this;\r\n  emit( event: string, ...args: any[] ): this;\r\n  emit( event: string ): this {\r\n    // eslint-disable-next-line prefer-rest-params, prefer-spread\r\n    this.event.emit( event, ...slice( arguments, 1 ) );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Inserts a slide at the specified position.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const splide = new Splide();\r\n   * splide.mount();\r\n   *\r\n   * // Adds the slide by the HTML:\r\n   * splide.add( '<li></li> );\r\n   *\r\n   * // or adds the element:\r\n   * splide.add( document.createElement( 'li' ) );\r\n   * ```\r\n   *\r\n   * @param slides - A slide element, an HTML string that represents a slide, or an array with them.\r\n   * @param index  - Optional. An index to insert a slide at.\r\n   *\r\n   * @return `this`\r\n   */\r\n  add( slides: string | HTMLElement | Array<string | HTMLElement>, index?: number ): this {\r\n    this._C.Slides.add( slides, index );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes slides that match the matcher\r\n   * that can be an index, an array with indices, a selector, or an iteratee function.\r\n   *\r\n   * @param matcher - An index, an array with indices, a selector string, or an iteratee function.\r\n   */\r\n  remove( matcher: SlideMatcher ): this {\r\n    this._C.Slides.remove( matcher );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Checks the slider type.\r\n   *\r\n   * @param type - A type to test.\r\n   *\r\n   * @return `true` if the type matches the current one, or otherwise `false`.\r\n   */\r\n  is( type: string ): boolean {\r\n    return this._o.type === type;\r\n  }\r\n\r\n  /**\r\n   * Refreshes the slider.\r\n   *\r\n   * @return `this`\r\n   */\r\n  refresh(): this {\r\n    this.emit( EVENT_REFRESH );\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Destroys the slider.\r\n   *\r\n   * @param completely - Optional. If `true`, Splide will not remount the slider by breakpoints.\r\n   *\r\n   * @return `this`\r\n   */\r\n  destroy( completely = true ): this {\r\n    const { event, state } = this;\r\n\r\n    if ( state.is( CREATED ) ) {\r\n      // Postpones destruction requested before the slider becomes ready.\r\n      this.on( EVENT_READY, this.destroy.bind( this, completely ) );\r\n    } else {\r\n      forOwn( this._C, component => {\r\n        component.destroy && component.destroy( completely );\r\n      }, true );\r\n\r\n      event.emit( EVENT_DESTROY );\r\n      event.destroy();\r\n      completely && empty( this.splides );\r\n      state.set( DESTROYED );\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns options.\r\n   *\r\n   * @return An object with the latest options.\r\n   */\r\n  get options(): Options {\r\n    return this._o;\r\n  }\r\n\r\n  /**\r\n   * Merges options to the current options and emits `updated` event.\r\n   *\r\n   * @param options - An object with new options.\r\n   */\r\n  set options( options: Options ) {\r\n    this._C.Media.set( options, true, true );\r\n  }\r\n\r\n  /**\r\n   * Returns the number of slides without clones.\r\n   *\r\n   * @return The number of slides.\r\n   */\r\n  get length(): number {\r\n    return this._C.Slides.getLength( true );\r\n  }\r\n\r\n  /**\r\n   * Returns the active slide index.\r\n   *\r\n   * @return The active slide index.\r\n   */\r\n  get index(): number {\r\n    return this._C.Controller.getIndex();\r\n  }\r\n}\r\n"],"names":["MEDIA_PREFERS_REDUCED_MOTION","MOVING","SCROLLING","STATES","CREATED","MOUNTED","IDLE","DRAGGING","DESTROYED","x","n","length","D","Array","prototype","m","t","e","slice","call","a","bind","arguments","an","setTimeout","ln","P","requestAnimationFrame","p","g","q","$","isArray","mn","h","Z","F","ownerDocument","defaultView","window","HTMLElement","L","d","forEach","G","includes","hn","push","I","i","classList","J","split","Q","appendChild","yn","parentNode","insertBefore","W","matches","X","children","filter","Y","firstElementChild","b","Object","assign","A","keys","O","reverse","U","En","k","removeAttribute","M","r","setAttribute","String","j","document","createElement","nn","getComputedStyle","style","$n","An","focus","preventScroll","wn","getAttribute","Cn","contains","tn","getBoundingClientRect","en","removeChild","qn","DOMParser","parseFromString","body","Ln","preventDefault","stopPropagation","stopImmediatePropagation","On","querySelector","Tn","querySelectorAll","Nn","Pn","timeStamp","Bn","class","_","reduce","trim","let","min","E","max","w","floor","Dn","ceil","Fn","abs","un","sign","In","Math","Mn","_n","o","Hn","Kn","replace","cn","B","C","S","splice","H","f","u","c","addEventListener","s","removeEventListener","create","destroy","v","on","off","l","emit","sn","Date","now","T","N","cancelAnimationFrame","start","y","rewind","pause","cancel","set","isPaused","Rn","is","EVENT_MOUNTED","EVENT_MOVE","EVENT_MOVED","EVENT_CLICK","EVENT_ACTIVE","EVENT_INACTIVE","EVENT_VISIBLE","EVENT_HIDDEN","EVENT_REFRESH","EVENT_UPDATED","EVENT_RESIZE","EVENT_RESIZED","EVENT_SCROLL","EVENT_SCROLLED","EVENT_NAVIGATION_MOUNTED","EVENT_AUTOPLAY_PLAY","EVENT_AUTOPLAY_PAUSE","EVENT_LAZYLOAD_LOADED","EVENT_SLIDE_KEYDOWN","EVENT_SHIFTED","ARROW_LEFT","ARROW_RIGHT","TTB","ORIENTATION_MAP","width","left","right","ArrowLeft","ArrowRight","ROLE","TAB_INDEX","ARIA_CONTROLS","ARIA_CURRENT","ARIA_SELECTED","ARIA_LABEL","ARIA_LABELLEDBY","ARIA_HIDDEN","ARIA_ORIENTATION","ARIA_ROLEDESCRIPTION","ARIA_LIVE","ARIA_BUSY","ARIA_ATOMIC","ALL_ATTRIBUTES","PROJECT_CODE","DATA_ATTRIBUTE","CLASS_PREFIX","CLASS_ROOT","CLASS_TRACK","CLASS_LIST","CLASS_SLIDE","CLASS_CLONE","CLASS_CONTAINER","CLASS_ARROWS","CLASS_ARROW","CLASS_ARROW_PREV","CLASS_ARROW_NEXT","CLASS_PAGINATION","CLASS_PAGINATION_PAGE","CLASS_PROGRESS_BAR","CLASS_TOGGLE","CLASS_SR","CLASS_ACTIVE","CLASS_PREV","CLASS_NEXT","CLASS_VISIBLE","CLASS_LOADING","CLASS_FOCUS_IN","CLASS_OVERFLOW","STATUS_CLASSES","CLASSES","slide","clone","arrows","arrow","prev","next","pagination","page","spinner","assert","condition","message","Error","POINTER_DOWN_EVENTS","POINTER_MOVE_EVENTS","POINTER_UP_EVENTS","SLIDE","LOOP","FADE","Slide","Splide","index","slideIndex","event","Components","root","options","isNavigation","updateOnMove","i18n","slideFocus","resolve","Direction","styles","label","isClone","container","child","destroyed","initNavigation","controls","splides","map","target","splide","Slides","getAt","id","join","format","slideX","onMove","update","curr","hidden","active","isActive","hasClass","toggleClass","self","visible","trackRect","rect","Elements","track","slideRect","state","queryAll","focusableNodes","activeElement","cloneStatus","mount","pad","slideLabel","apply","removeClass","prop","value","useContainer","_style","isWithin","from","distance","diff","INTERVAL_DATA_ATTRIBUTE","SCROLL_LISTENER_OPTIONS","passive","capture","SRC_DATA_ATTRIBUTE","SRCSET_DATA_ATTRIBUTE","IMAGE_SELECTOR","TRIGGER_KEYS","breakpoints","reducedMotion","binder","EventBinder","queries","completely","register","query","queryList","matchMedia","direction","merged","entry","merge","omit","refresh","opts","base","notify","getPrototypeOf","setup","isMin","mediaQuery","ownKeys","sort","key","enable","axisOnly","match","offset","replacement","toLowerCase","charAt","toUpperCase","orient","elements","slides","rootClasses","trackClasses","list","isUsingKey","find","bar","toggle","role","tagName","carousel","attrs","concat","empty","getClasses","addClass","labelledby","className","elm","closest","type","drag","init","object","Slide1","Slide2","get","excludeClones","iteratee","matcher","isFunction","isString","toArray","getIn","Controller","toIndex","hasFocus","perPage","between","add","items","forEachItem","isHTMLElement","parseHtml","ref","before","append","classes","observeImages","callback","images","img","remove","removeNode","getLength","isEnough","styleSlides","vertical","rootRect","overflow","unit","cssPadding","resize","force","newRect","height","cssHeight","gap","autoWidth","fixedWidth","cssSlideSize","fixedHeight","autoHeight","isOverflow","padding","isObject","heightRatio","listSize","slideSize","withoutGap","getGap","totalSize","sliderSize","parseFloat","getPadding","clones","cloneCount","remount","observe","computeCloneCount","generate","count","isHead","cloneNode","Layout","fixedCount","isUndefined","fixedSize","Transition","reposition","isBusy","Scroll","jump","translate","toPosition","position","preventLoop","destination","exceededMax","getEnd","shift","backwards","excess","getLimit","size","getPosition","minDistance","Infinity","trimming","trimSpace","clamp","move","dest","shifted","exceededLimit","exceededMin","Move","omitEnd","isLoop","isSlide","getNext","getAdjacent","getPrev","currIndex","endIndex","prevIndex","slideCount","perMove","onResized","number","computeDestIndex","approximatelyEqual","loop","snapPage","toPage","end","setIndex","waitForTransition","go","control","allowSameIndex","indicator","scroll","duration","snap","getIndex","toDest","placeholder","wrapper","created","wrapperClasses","enabled","createArrow","display","arrowPath","nextIndex","prevLabel","nextLabel","last","first","disabled","interval","RequestInterval","rate","autoplay","hovered","focused","stopped","play","resetProgress","stop","autoToggle","pauseOnHover","pauseOnFocus","cover","src","friction","onScrolled","noConstrain","noDistance","clear","onEnd","to","easingFunc","pow","Media","basePosition","baseEvent","prevBaseEvent","isFree","dragging","exceeded","clickPrevented","disable","onPointerDown","isTouch","noDrag","isTouchEvent","button","prevent","onPointerMove","onPointerUp","save","thresholds","isObj","mouse","cancelable","diffCoord","expired","diffTime","hasExceeded","touch","velocity","flickPower","flickMaxPages","time","rewindByDrag","onClick","orthogonal","coordOf","getBaseEvent","timeOf","changedTouches","TouchEvent","noop","isDragging","keyboard","onKeydown","_disabled","nextTick","isSequential","lazyLoad","events","entries","srcset","parent","parentElement","loadNext","check","preloadPages","data","load","onLoad","paginationClasses","dir","getDirection","nextPage","item","paginationDirection","select","li","text","pageX","paginationKeyboard","isParent","sync","navigate","ev","lastTime","onWheel","sleep","deltaY","wheelMinThreshold","wheelSleep","releaseWheel","wheel","live","sr","Autoplay","textContent","DEFAULTS","speed","easing","rewindSpeed","Fade","done","transition","endCallback","useScroll","defaults","fn","State","constructor","this","JSON","parse","_o","Extensions","_C","_T","_E","forOwn","ComponentConstructors","Component","component","Sync"],"mappings":"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"}